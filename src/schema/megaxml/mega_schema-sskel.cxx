// Copyright (c) 2005-2011 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD/e, an XML Schema
// to C++ data binding compiler for embedded systems.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
//

// Begin prologue.
//
//
// End prologue.

#include "mega_schema-sskel.hxx"

namespace megaxml
{
  // Package_sskel
  //

  void Package_sskel::
  Name_serializer (::xml_schema::string_sskel& s)
  {
    this->Name_serializer_ = &s;
  }

  void Package_sskel::
  Repository_serializer (::xml_schema::string_sskel& s)
  {
    this->Repository_serializer_ = &s;
  }

  void Package_sskel::
  License_serializer (::xml_schema::string_sskel& s)
  {
    this->License_serializer_ = &s;
  }

  void Package_sskel::
  Description_serializer (::xml_schema::string_sskel& s)
  {
    this->Description_serializer_ = &s;
  }

  void Package_sskel::
  Directories_serializer (::megaxml::Directories_sskel& s)
  {
    this->Directories_serializer_ = &s;
  }

  void Package_sskel::
  Files_serializer (::megaxml::Files_sskel& s)
  {
    this->Files_serializer_ = &s;
  }

  void Package_sskel::
  Command_serializer (::xml_schema::string_sskel& s)
  {
    this->Command_serializer_ = &s;
  }

  void Package_sskel::
  serializers (::xml_schema::string_sskel& Name,
               ::xml_schema::string_sskel& Repository,
               ::xml_schema::string_sskel& License,
               ::xml_schema::string_sskel& Description,
               ::megaxml::Directories_sskel& Directories,
               ::megaxml::Files_sskel& Files,
               ::xml_schema::string_sskel& Command)
  {
    this->Name_serializer_ = &Name;
    this->Repository_serializer_ = &Repository;
    this->License_serializer_ = &License;
    this->Description_serializer_ = &Description;
    this->Directories_serializer_ = &Directories;
    this->Files_serializer_ = &Files;
    this->Command_serializer_ = &Command;
  }

  Package_sskel::
  Package_sskel ()
  : Package_impl_ (0),
    Name_serializer_ (0),
    Repository_serializer_ (0),
    License_serializer_ (0),
    Description_serializer_ (0),
    Directories_serializer_ (0),
    Files_serializer_ (0),
    Command_serializer_ (0)
  {
  }

  Package_sskel::
  Package_sskel (Package_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Package_impl_ (impl),
    Name_serializer_ (0),
    Repository_serializer_ (0),
    License_serializer_ (0),
    Description_serializer_ (0),
    Directories_serializer_ (0),
    Files_serializer_ (0),
    Command_serializer_ (0)
  {
  }

  // Host_sskel
  //

  Host_sskel::
  Host_sskel (::megaxml::Package_sskel* tiein)
  : ::megaxml::Package_sskel (tiein, 0),
    Host_impl_ (0)
  {
  }

  Host_sskel::
  Host_sskel (Host_sskel* impl, void*)
  : ::megaxml::Package_sskel (impl, 0),
    Host_impl_ (impl)
  {
  }

  // Stack_sskel
  //

  void Stack_sskel::
  Size_serializer (::xml_schema::unsigned_int_sskel& s)
  {
    this->Size_serializer_ = &s;
  }

  void Stack_sskel::
  serializers (::xml_schema::unsigned_int_sskel& Size)
  {
    this->Size_serializer_ = &Size;
  }

  Stack_sskel::
  Stack_sskel ()
  : Stack_impl_ (0),
    Size_serializer_ (0)
  {
  }

  Stack_sskel::
  Stack_sskel (Stack_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Stack_impl_ (impl),
    Size_serializer_ (0)
  {
  }

  // Fibers_sskel
  //

  void Fibers_sskel::
  Stack_serializer (::megaxml::Stack_sskel& s)
  {
    this->Stack_serializer_ = &s;
  }

  void Fibers_sskel::
  serializers (::megaxml::Stack_sskel& Stack)
  {
    this->Stack_serializer_ = &Stack;
  }

  Fibers_sskel::
  Fibers_sskel ()
  : Fibers_impl_ (0),
    Stack_serializer_ (0)
  {
  }

  Fibers_sskel::
  Fibers_sskel (Fibers_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Fibers_impl_ (impl),
    Stack_serializer_ (0)
  {
  }

  // Defaults_sskel
  //

  void Defaults_sskel::
  Fibers_serializer (::megaxml::Fibers_sskel& s)
  {
    this->Fibers_serializer_ = &s;
  }

  void Defaults_sskel::
  serializers (::megaxml::Fibers_sskel& Fibers)
  {
    this->Fibers_serializer_ = &Fibers;
  }

  Defaults_sskel::
  Defaults_sskel ()
  : Defaults_impl_ (0),
    Fibers_serializer_ (0)
  {
  }

  Defaults_sskel::
  Defaults_sskel (Defaults_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Defaults_impl_ (impl),
    Fibers_serializer_ (0)
  {
  }

  // Build_sskel
  //

  void Build_sskel::
  Name_serializer (::xml_schema::string_sskel& s)
  {
    this->Name_serializer_ = &s;
  }

  void Build_sskel::
  CompilerFlags_serializer (::xml_schema::string_sskel& s)
  {
    this->CompilerFlags_serializer_ = &s;
  }

  void Build_sskel::
  LinkerFlags_serializer (::xml_schema::string_sskel& s)
  {
    this->LinkerFlags_serializer_ = &s;
  }

  void Build_sskel::
  serializers (::xml_schema::string_sskel& Name,
               ::xml_schema::string_sskel& CompilerFlags,
               ::xml_schema::string_sskel& LinkerFlags)
  {
    this->Name_serializer_ = &Name;
    this->CompilerFlags_serializer_ = &CompilerFlags;
    this->LinkerFlags_serializer_ = &LinkerFlags;
  }

  Build_sskel::
  Build_sskel ()
  : Build_impl_ (0),
    Name_serializer_ (0),
    CompilerFlags_serializer_ (0),
    LinkerFlags_serializer_ (0)
  {
  }

  Build_sskel::
  Build_sskel (Build_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Build_impl_ (impl),
    Name_serializer_ (0),
    CompilerFlags_serializer_ (0),
    LinkerFlags_serializer_ (0)
  {
  }

  // Project_sskel
  //

  void Project_sskel::
  Name_serializer (::xml_schema::string_sskel& s)
  {
    this->Name_serializer_ = &s;
  }

  void Project_sskel::
  Host_serializer (::xml_schema::string_sskel& s)
  {
    this->Host_serializer_ = &s;
  }

  void Project_sskel::
  Description_serializer (::xml_schema::string_sskel& s)
  {
    this->Description_serializer_ = &s;
  }

  void Project_sskel::
  Package_serializer (::xml_schema::string_sskel& s)
  {
    this->Package_serializer_ = &s;
  }

  void Project_sskel::
  Files_serializer (::megaxml::Files_sskel& s)
  {
    this->Files_serializer_ = &s;
  }

  void Project_sskel::
  Build_serializer (::megaxml::Build_sskel& s)
  {
    this->Build_serializer_ = &s;
  }

  void Project_sskel::
  Run_serializer (::megaxml::Run_sskel& s)
  {
    this->Run_serializer_ = &s;
  }

  void Project_sskel::
  Defaults_serializer (::megaxml::Defaults_sskel& s)
  {
    this->Defaults_serializer_ = &s;
  }

  void Project_sskel::
  serializers (::xml_schema::string_sskel& Name,
               ::xml_schema::string_sskel& Host,
               ::xml_schema::string_sskel& Description,
               ::xml_schema::string_sskel& Package,
               ::megaxml::Files_sskel& Files,
               ::megaxml::Build_sskel& Build,
               ::megaxml::Run_sskel& Run,
               ::megaxml::Defaults_sskel& Defaults)
  {
    this->Name_serializer_ = &Name;
    this->Host_serializer_ = &Host;
    this->Description_serializer_ = &Description;
    this->Package_serializer_ = &Package;
    this->Files_serializer_ = &Files;
    this->Build_serializer_ = &Build;
    this->Run_serializer_ = &Run;
    this->Defaults_serializer_ = &Defaults;
  }

  Project_sskel::
  Project_sskel ()
  : Project_impl_ (0),
    Name_serializer_ (0),
    Host_serializer_ (0),
    Description_serializer_ (0),
    Package_serializer_ (0),
    Files_serializer_ (0),
    Build_serializer_ (0),
    Run_serializer_ (0),
    Defaults_serializer_ (0)
  {
  }

  Project_sskel::
  Project_sskel (Project_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Project_impl_ (impl),
    Name_serializer_ (0),
    Host_serializer_ (0),
    Description_serializer_ (0),
    Package_serializer_ (0),
    Files_serializer_ (0),
    Build_serializer_ (0),
    Run_serializer_ (0),
    Defaults_serializer_ (0)
  {
  }

  // Files_sskel
  //

  void Files_sskel::
  System_serializer (::xml_schema::string_sskel& s)
  {
    this->System_serializer_ = &s;
  }

  void Files_sskel::
  Include_serializer (::xml_schema::string_sskel& s)
  {
    this->Include_serializer_ = &s;
  }

  void Files_sskel::
  Source_serializer (::xml_schema::string_sskel& s)
  {
    this->Source_serializer_ = &s;
  }

  void Files_sskel::
  Library_serializer (::xml_schema::string_sskel& s)
  {
    this->Library_serializer_ = &s;
  }

  void Files_sskel::
  serializers (::xml_schema::string_sskel& System,
               ::xml_schema::string_sskel& Include,
               ::xml_schema::string_sskel& Source,
               ::xml_schema::string_sskel& Library)
  {
    this->System_serializer_ = &System;
    this->Include_serializer_ = &Include;
    this->Source_serializer_ = &Source;
    this->Library_serializer_ = &Library;
  }

  Files_sskel::
  Files_sskel ()
  : Files_impl_ (0),
    System_serializer_ (0),
    Include_serializer_ (0),
    Source_serializer_ (0),
    Library_serializer_ (0)
  {
  }

  Files_sskel::
  Files_sskel (Files_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Files_impl_ (impl),
    System_serializer_ (0),
    Include_serializer_ (0),
    Source_serializer_ (0),
    Library_serializer_ (0)
  {
  }

  // EG_sskel
  //

  void EG_sskel::
  Package_serializer (::megaxml::Package_sskel& s)
  {
    this->Package_serializer_ = &s;
  }

  void EG_sskel::
  Host_serializer (::megaxml::Host_sskel& s)
  {
    this->Host_serializer_ = &s;
  }

  void EG_sskel::
  Project_serializer (::megaxml::Project_sskel& s)
  {
    this->Project_serializer_ = &s;
  }

  void EG_sskel::
  serializers (::megaxml::Package_sskel& Package,
               ::megaxml::Host_sskel& Host,
               ::megaxml::Project_sskel& Project)
  {
    this->Package_serializer_ = &Package;
    this->Host_serializer_ = &Host;
    this->Project_serializer_ = &Project;
  }

  EG_sskel::
  EG_sskel ()
  : EG_impl_ (0),
    Package_serializer_ (0),
    Host_serializer_ (0),
    Project_serializer_ (0)
  {
  }

  EG_sskel::
  EG_sskel (EG_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    EG_impl_ (impl),
    Package_serializer_ (0),
    Host_serializer_ (0),
    Project_serializer_ (0)
  {
  }

  // Directories_sskel
  //

  void Directories_sskel::
  Include_serializer (::xml_schema::string_sskel& s)
  {
    this->Include_serializer_ = &s;
  }

  void Directories_sskel::
  Library_serializer (::xml_schema::string_sskel& s)
  {
    this->Library_serializer_ = &s;
  }

  void Directories_sskel::
  serializers (::xml_schema::string_sskel& Include,
               ::xml_schema::string_sskel& Library)
  {
    this->Include_serializer_ = &Include;
    this->Library_serializer_ = &Library;
  }

  Directories_sskel::
  Directories_sskel ()
  : Directories_impl_ (0),
    Include_serializer_ (0),
    Library_serializer_ (0)
  {
  }

  Directories_sskel::
  Directories_sskel (Directories_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Directories_impl_ (impl),
    Include_serializer_ (0),
    Library_serializer_ (0)
  {
  }

  // Run_sskel
  //

  void Run_sskel::
  Name_serializer (::xml_schema::string_sskel& s)
  {
    this->Name_serializer_ = &s;
  }

  void Run_sskel::
  Command_serializer (::xml_schema::string_sskel& s)
  {
    this->Command_serializer_ = &s;
  }

  void Run_sskel::
  Argument_serializer (::xml_schema::string_sskel& s)
  {
    this->Argument_serializer_ = &s;
  }

  void Run_sskel::
  serializers (::xml_schema::string_sskel& Name,
               ::xml_schema::string_sskel& Command,
               ::xml_schema::string_sskel& Argument)
  {
    this->Name_serializer_ = &Name;
    this->Command_serializer_ = &Command;
    this->Argument_serializer_ = &Argument;
  }

  Run_sskel::
  Run_sskel ()
  : Run_impl_ (0),
    Name_serializer_ (0),
    Command_serializer_ (0),
    Argument_serializer_ (0)
  {
  }

  Run_sskel::
  Run_sskel (Run_sskel* impl, void*)
  : ::xsde::cxx::serializer::validating::complex_content (impl, 0),
    Run_impl_ (impl),
    Name_serializer_ (0),
    Command_serializer_ (0),
    Argument_serializer_ (0)
  {
  }
}

#include <assert.h>

namespace megaxml
{
  // Package_sskel
  //

  bool Package_sskel::
  Repository_present ()
  {
    return this->Package_impl_ ? this->Package_impl_->Repository_present () : false;
  }

  bool Package_sskel::
  Description_present ()
  {
    return this->Package_impl_ ? this->Package_impl_->Description_present () : false;
  }

  bool Package_sskel::
  Directories_present ()
  {
    return this->Package_impl_ ? this->Package_impl_->Directories_present () : false;
  }

  bool Package_sskel::
  Files_present ()
  {
    return this->Package_impl_ ? this->Package_impl_->Files_present () : false;
  }

  bool Package_sskel::
  Command_next ()
  {
    return this->Package_impl_ ? this->Package_impl_->Command_next () : false;
  }

  void Package_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Name_serializer_)
      this->Name_serializer_->_reset ();

    if (this->Repository_serializer_)
      this->Repository_serializer_->_reset ();

    if (this->License_serializer_)
      this->License_serializer_->_reset ();

    if (this->Description_serializer_)
      this->Description_serializer_->_reset ();

    if (this->Directories_serializer_)
      this->Directories_serializer_->_reset ();

    if (this->Files_serializer_)
      this->Files_serializer_->_reset ();

    if (this->Command_serializer_)
      this->Command_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Host_sskel
  //

  void Host_sskel::
  pre (const ::megaxml::Package& x)
  {
    assert (this->Package_impl_);
    this->Package_impl_->pre (x);
  }

  ::std::string Host_sskel::
  Name ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Name ();
  }

  ::std::string Host_sskel::
  Repository ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Repository ();
  }

  ::std::string Host_sskel::
  License ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->License ();
  }

  ::std::string Host_sskel::
  Description ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Description ();
  }

  const ::megaxml::Directories& Host_sskel::
  Directories ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Directories ();
  }

  const ::megaxml::Files& Host_sskel::
  Files ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Files ();
  }

  ::std::string Host_sskel::
  Command ()
  {
    assert (this->Package_impl_);
    return this->Package_impl_->Command ();
  }

  // Stack_sskel
  //

  bool Stack_sskel::
  Size_present ()
  {
    return this->Stack_impl_ ? this->Stack_impl_->Size_present () : false;
  }

  void Stack_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Size_serializer_)
      this->Size_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Fibers_sskel
  //

  bool Fibers_sskel::
  Stack_present ()
  {
    return this->Fibers_impl_ ? this->Fibers_impl_->Stack_present () : false;
  }

  void Fibers_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Stack_serializer_)
      this->Stack_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Defaults_sskel
  //

  bool Defaults_sskel::
  Fibers_present ()
  {
    return this->Defaults_impl_ ? this->Defaults_impl_->Fibers_present () : false;
  }

  void Defaults_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Fibers_serializer_)
      this->Fibers_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Build_sskel
  //

  void Build_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Name_serializer_)
      this->Name_serializer_->_reset ();

    if (this->CompilerFlags_serializer_)
      this->CompilerFlags_serializer_->_reset ();

    if (this->LinkerFlags_serializer_)
      this->LinkerFlags_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Project_sskel
  //

  bool Project_sskel::
  Description_present ()
  {
    return this->Project_impl_ ? this->Project_impl_->Description_present () : false;
  }

  bool Project_sskel::
  Package_next ()
  {
    return this->Project_impl_ ? this->Project_impl_->Package_next () : false;
  }

  bool Project_sskel::
  Files_present ()
  {
    return this->Project_impl_ ? this->Project_impl_->Files_present () : false;
  }

  bool Project_sskel::
  Build_next ()
  {
    return this->Project_impl_ ? this->Project_impl_->Build_next () : false;
  }

  bool Project_sskel::
  Run_next ()
  {
    return this->Project_impl_ ? this->Project_impl_->Run_next () : false;
  }

  bool Project_sskel::
  Defaults_present ()
  {
    return this->Project_impl_ ? this->Project_impl_->Defaults_present () : false;
  }

  void Project_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Name_serializer_)
      this->Name_serializer_->_reset ();

    if (this->Host_serializer_)
      this->Host_serializer_->_reset ();

    if (this->Description_serializer_)
      this->Description_serializer_->_reset ();

    if (this->Package_serializer_)
      this->Package_serializer_->_reset ();

    if (this->Files_serializer_)
      this->Files_serializer_->_reset ();

    if (this->Build_serializer_)
      this->Build_serializer_->_reset ();

    if (this->Run_serializer_)
      this->Run_serializer_->_reset ();

    if (this->Defaults_serializer_)
      this->Defaults_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Files_sskel
  //

  bool Files_sskel::
  System_next ()
  {
    return this->Files_impl_ ? this->Files_impl_->System_next () : false;
  }

  bool Files_sskel::
  Include_next ()
  {
    return this->Files_impl_ ? this->Files_impl_->Include_next () : false;
  }

  bool Files_sskel::
  Source_next ()
  {
    return this->Files_impl_ ? this->Files_impl_->Source_next () : false;
  }

  bool Files_sskel::
  Library_next ()
  {
    return this->Files_impl_ ? this->Files_impl_->Library_next () : false;
  }

  void Files_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->System_serializer_)
      this->System_serializer_->_reset ();

    if (this->Include_serializer_)
      this->Include_serializer_->_reset ();

    if (this->Source_serializer_)
      this->Source_serializer_->_reset ();

    if (this->Library_serializer_)
      this->Library_serializer_->_reset ();

    this->resetting_ = false;
  }

  // EG_sskel
  //

  void EG_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Package_serializer_)
      this->Package_serializer_->_reset ();

    if (this->Host_serializer_)
      this->Host_serializer_->_reset ();

    if (this->Project_serializer_)
      this->Project_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Directories_sskel
  //

  bool Directories_sskel::
  Include_next ()
  {
    return this->Directories_impl_ ? this->Directories_impl_->Include_next () : false;
  }

  bool Directories_sskel::
  Library_next ()
  {
    return this->Directories_impl_ ? this->Directories_impl_->Library_next () : false;
  }

  void Directories_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Include_serializer_)
      this->Include_serializer_->_reset ();

    if (this->Library_serializer_)
      this->Library_serializer_->_reset ();

    this->resetting_ = false;
  }

  // Run_sskel
  //

  bool Run_sskel::
  Argument_next ()
  {
    return this->Run_impl_ ? this->Run_impl_->Argument_next () : false;
  }

  void Run_sskel::
  _reset ()
  {
    if (this->resetting_)
      return;

    typedef ::xsde::cxx::serializer::validating::complex_content base;
    base::_reset ();

    this->resetting_ = true;

    if (this->Name_serializer_)
      this->Name_serializer_->_reset ();

    if (this->Command_serializer_)
      this->Command_serializer_->_reset ();

    if (this->Argument_serializer_)
      this->Argument_serializer_->_reset ();

    this->resetting_ = false;
  }
}

namespace megaxml
{
  // Element validation and serialization for Package_sskel.
  //
  void Package_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Name
    //
    {
      const ::std::string& r = this->Name ();

      if (this->Name_serializer_)
      {
        this->Name_serializer_->pre (r);
        this->_start_element ("Name");
        this->Name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Repository
    //
    if (this->Repository_present ())
    {
      const ::std::string& r = this->Repository ();

      if (this->Repository_serializer_)
      {
        this->Repository_serializer_->pre (r);
        this->_start_element ("Repository");
        this->Repository_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Repository_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Repository_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Repository_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Repository_serializer_->post ();
      }
    }

    // License
    //
    {
      const ::std::string& r = this->License ();

      if (this->License_serializer_)
      {
        this->License_serializer_->pre (r);
        this->_start_element ("License");
        this->License_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->License_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->License_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->License_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->License_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Description
    //
    if (this->Description_present ())
    {
      const ::std::string& r = this->Description ();

      if (this->Description_serializer_)
      {
        this->Description_serializer_->pre (r);
        this->_start_element ("Description");
        this->Description_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Description_serializer_->post ();
      }
    }

    // Directories
    //
    if (this->Directories_present ())
    {
      const ::megaxml::Directories& r = this->Directories ();

      if (this->Directories_serializer_)
      {
        this->Directories_serializer_->pre (r);
        this->_start_element ("Directories");
        this->Directories_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Directories_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Directories_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Directories_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Directories_serializer_->post ();
      }
    }

    // Files
    //
    if (this->Files_present ())
    {
      const ::megaxml::Files& r = this->Files ();

      if (this->Files_serializer_)
      {
        this->Files_serializer_->pre (r);
        this->_start_element ("Files");
        this->Files_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Files_serializer_->post ();
      }
    }

    // Command
    //
    while (this->Command_next ())
    {
      const ::std::string& r = this->Command ();

      if (this->Command_serializer_)
      {
        this->Command_serializer_->pre (r);
        this->_start_element ("Command");
        this->Command_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Command_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Stack_sskel.
  //
  void Stack_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Size
    //
    if (this->Size_present ())
    {
      unsigned int r = this->Size ();

      if (this->Size_serializer_)
      {
        this->Size_serializer_->pre (r);
        this->_start_element ("Size");
        this->Size_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Size_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Size_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Size_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Size_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Fibers_sskel.
  //
  void Fibers_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Stack
    //
    if (this->Stack_present ())
    {
      const ::megaxml::Stack& r = this->Stack ();

      if (this->Stack_serializer_)
      {
        this->Stack_serializer_->pre (r);
        this->_start_element ("Stack");
        this->Stack_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Stack_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Stack_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Stack_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Stack_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Defaults_sskel.
  //
  void Defaults_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Fibers
    //
    if (this->Fibers_present ())
    {
      const ::megaxml::Fibers& r = this->Fibers ();

      if (this->Fibers_serializer_)
      {
        this->Fibers_serializer_->pre (r);
        this->_start_element ("Fibers");
        this->Fibers_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Fibers_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Fibers_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Fibers_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Fibers_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Build_sskel.
  //
  void Build_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Name
    //
    {
      const ::std::string& r = this->Name ();

      if (this->Name_serializer_)
      {
        this->Name_serializer_->pre (r);
        this->_start_element ("Name");
        this->Name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // CompilerFlags
    //
    {
      const ::std::string& r = this->CompilerFlags ();

      if (this->CompilerFlags_serializer_)
      {
        this->CompilerFlags_serializer_->pre (r);
        this->_start_element ("CompilerFlags");
        this->CompilerFlags_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->CompilerFlags_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->CompilerFlags_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->CompilerFlags_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->CompilerFlags_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // LinkerFlags
    //
    {
      const ::std::string& r = this->LinkerFlags ();

      if (this->LinkerFlags_serializer_)
      {
        this->LinkerFlags_serializer_->pre (r);
        this->_start_element ("LinkerFlags");
        this->LinkerFlags_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->LinkerFlags_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->LinkerFlags_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->LinkerFlags_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->LinkerFlags_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }
  }

  // Element validation and serialization for Project_sskel.
  //
  void Project_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Name
    //
    {
      const ::std::string& r = this->Name ();

      if (this->Name_serializer_)
      {
        this->Name_serializer_->pre (r);
        this->_start_element ("Name");
        this->Name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Host
    //
    {
      const ::std::string& r = this->Host ();

      if (this->Host_serializer_)
      {
        this->Host_serializer_->pre (r);
        this->_start_element ("Host");
        this->Host_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Host_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Host_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Host_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Host_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Description
    //
    if (this->Description_present ())
    {
      const ::std::string& r = this->Description ();

      if (this->Description_serializer_)
      {
        this->Description_serializer_->pre (r);
        this->_start_element ("Description");
        this->Description_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Description_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Description_serializer_->post ();
      }
    }

    // Package
    //
    while (this->Package_next ())
    {
      const ::std::string& r = this->Package ();

      if (this->Package_serializer_)
      {
        this->Package_serializer_->pre (r);
        this->_start_element ("Package");
        this->Package_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Package_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Package_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Package_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Package_serializer_->post ();
      }
    }

    // Files
    //
    if (this->Files_present ())
    {
      const ::megaxml::Files& r = this->Files ();

      if (this->Files_serializer_)
      {
        this->Files_serializer_->pre (r);
        this->_start_element ("Files");
        this->Files_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Files_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Files_serializer_->post ();
      }
    }

    // Build
    //
    while (this->Build_next ())
    {
      const ::megaxml::Build& r = this->Build ();

      if (this->Build_serializer_)
      {
        this->Build_serializer_->pre (r);
        this->_start_element ("Build");
        this->Build_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Build_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Build_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Build_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Build_serializer_->post ();
      }
    }

    // Run
    //
    while (this->Run_next ())
    {
      const ::megaxml::Run& r = this->Run ();

      if (this->Run_serializer_)
      {
        this->Run_serializer_->pre (r);
        this->_start_element ("Run");
        this->Run_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Run_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Run_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Run_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Run_serializer_->post ();
      }
    }

    // Defaults
    //
    if (this->Defaults_present ())
    {
      const ::megaxml::Defaults& r = this->Defaults ();

      if (this->Defaults_serializer_)
      {
        this->Defaults_serializer_->pre (r);
        this->_start_element ("Defaults");
        this->Defaults_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Defaults_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Defaults_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Defaults_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Defaults_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Files_sskel.
  //
  void Files_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // System
    //
    while (this->System_next ())
    {
      const ::std::string& r = this->System ();

      if (this->System_serializer_)
      {
        this->System_serializer_->pre (r);
        this->_start_element ("System");
        this->System_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->System_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->System_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->System_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->System_serializer_->post ();
      }
    }

    // Include
    //
    while (this->Include_next ())
    {
      const ::std::string& r = this->Include ();

      if (this->Include_serializer_)
      {
        this->Include_serializer_->pre (r);
        this->_start_element ("Include");
        this->Include_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Include_serializer_->post ();
      }
    }

    // Source
    //
    while (this->Source_next ())
    {
      const ::std::string& r = this->Source ();

      if (this->Source_serializer_)
      {
        this->Source_serializer_->pre (r);
        this->_start_element ("Source");
        this->Source_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Source_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Source_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Source_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Source_serializer_->post ();
      }
    }

    // Library
    //
    while (this->Library_next ())
    {
      const ::std::string& r = this->Library ();

      if (this->Library_serializer_)
      {
        this->Library_serializer_->pre (r);
        this->_start_element ("Library");
        this->Library_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Library_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for EG_sskel.
  //
  void EG_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    switch (this->choice_arm ())
    {
      case Package_tag:
      {
        // Package
        //
        {
          const ::megaxml::Package& r = this->Package ();

          if (this->Package_serializer_)
          {
            this->Package_serializer_->pre (r);
            this->_start_element ("Package");
            this->Package_serializer_->_pre_impl (ctx);

            if (ctx.error_type ())
              return;

            this->Package_serializer_->_serialize_attributes ();

            if (ctx.error_type ())
              return;

            this->Package_serializer_->_serialize_content ();

            if (ctx.error_type ())
              return;

            this->Package_serializer_->_post_impl ();

            if (ctx.error_type ())
              return;

            this->_end_element ();
            this->Package_serializer_->post ();
          }
          else
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return;
          }
        }

        break;
      }
      case Host_tag:
      {
        // Host
        //
        {
          const ::megaxml::Host& r = this->Host ();

          if (this->Host_serializer_)
          {
            this->Host_serializer_->pre (r);
            this->_start_element ("Host");
            this->Host_serializer_->_pre_impl (ctx);

            if (ctx.error_type ())
              return;

            this->Host_serializer_->_serialize_attributes ();

            if (ctx.error_type ())
              return;

            this->Host_serializer_->_serialize_content ();

            if (ctx.error_type ())
              return;

            this->Host_serializer_->_post_impl ();

            if (ctx.error_type ())
              return;

            this->_end_element ();
            this->Host_serializer_->post ();
          }
          else
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return;
          }
        }

        break;
      }
      case Project_tag:
      {
        // Project
        //
        {
          const ::megaxml::Project& r = this->Project ();

          if (this->Project_serializer_)
          {
            this->Project_serializer_->pre (r);
            this->_start_element ("Project");
            this->Project_serializer_->_pre_impl (ctx);

            if (ctx.error_type ())
              return;

            this->Project_serializer_->_serialize_attributes ();

            if (ctx.error_type ())
              return;

            this->Project_serializer_->_serialize_content ();

            if (ctx.error_type ())
              return;

            this->Project_serializer_->_post_impl ();

            if (ctx.error_type ())
              return;

            this->_end_element ();
            this->Project_serializer_->post ();
          }
          else
          {
            this->_schema_error (::xsde::cxx::schema_error::expected_element);
            return;
          }
        }

        break;
      }
      default:
      {
        this->_schema_error (::xsde::cxx::schema_error::unexpected_element);
        return;
      }
    }
  }

  // Element validation and serialization for Directories_sskel.
  //
  void Directories_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Include
    //
    while (this->Include_next ())
    {
      const ::std::string& r = this->Include ();

      if (this->Include_serializer_)
      {
        this->Include_serializer_->pre (r);
        this->_start_element ("Include");
        this->Include_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Include_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Include_serializer_->post ();
      }
    }

    // Library
    //
    while (this->Library_next ())
    {
      const ::std::string& r = this->Library ();

      if (this->Library_serializer_)
      {
        this->Library_serializer_->pre (r);
        this->_start_element ("Library");
        this->Library_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Library_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Library_serializer_->post ();
      }
    }
  }

  // Element validation and serialization for Run_sskel.
  //
  void Run_sskel::
  _serialize_content ()
  {
    ::xsde::cxx::serializer::context& ctx = this->_context ();

    // Name
    //
    {
      const ::std::string& r = this->Name ();

      if (this->Name_serializer_)
      {
        this->Name_serializer_->pre (r);
        this->_start_element ("Name");
        this->Name_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Name_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Name_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Command
    //
    {
      const ::std::string& r = this->Command ();

      if (this->Command_serializer_)
      {
        this->Command_serializer_->pre (r);
        this->_start_element ("Command");
        this->Command_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Command_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Command_serializer_->post ();
      }
      else
      {
        this->_schema_error (::xsde::cxx::schema_error::expected_element);
        return;
      }
    }

    // Argument
    //
    while (this->Argument_next ())
    {
      const ::std::string& r = this->Argument ();

      if (this->Argument_serializer_)
      {
        this->Argument_serializer_->pre (r);
        this->_start_element ("Argument");
        this->Argument_serializer_->_pre_impl (ctx);

        if (ctx.error_type ())
          return;

        this->Argument_serializer_->_serialize_attributes ();

        if (ctx.error_type ())
          return;

        this->Argument_serializer_->_serialize_content ();

        if (ctx.error_type ())
          return;

        this->Argument_serializer_->_post_impl ();

        if (ctx.error_type ())
          return;

        this->_end_element ();
        this->Argument_serializer_->post ();
      }
    }
  }
}

namespace megaxml
{
}

// Begin epilogue.
//
//
// End epilogue.

