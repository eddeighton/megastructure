// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megastructure.proto

#include "megastructure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_CHQ_Alive_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_CHS_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HCQ_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HCS_Alive_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_MSQ_Alive_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_MSS_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SMQ_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SMS_Alive_megastructure_2eproto;
namespace megastructure {
class Message_SMQ_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_SMQ_Enroll> _instance;
} _Message_SMQ_Enroll_default_instance_;
class Message_MSS_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_MSS_Enroll> _instance;
} _Message_MSS_Enroll_default_instance_;
class Message_MSQ_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_MSQ_Alive> _instance;
} _Message_MSQ_Alive_default_instance_;
class Message_SMS_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_SMS_Alive> _instance;
} _Message_SMS_Alive_default_instance_;
class Message_HCQ_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_HCQ_Enroll> _instance;
} _Message_HCQ_Enroll_default_instance_;
class Message_CHS_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_CHS_Enroll> _instance;
} _Message_CHS_Enroll_default_instance_;
class Message_CHQ_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_CHQ_Alive> _instance;
} _Message_CHQ_Alive_default_instance_;
class Message_HCS_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_HCS_Alive> _instance;
} _Message_HCS_Alive_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
  const ::megastructure::Message_SMQ_Enroll* smq_enroll_;
  const ::megastructure::Message_MSS_Enroll* mss_enroll_;
  const ::megastructure::Message_MSQ_Alive* msq_alive_;
  const ::megastructure::Message_SMS_Alive* sms_alive_;
  const ::megastructure::Message_HCQ_Enroll* hcq_enroll_;
  const ::megastructure::Message_CHS_Enroll* chs_enroll_;
  const ::megastructure::Message_CHQ_Alive* chq_alive_;
  const ::megastructure::Message_HCS_Alive* hcs_alive_;
} _Message_default_instance_;
}  // namespace megastructure
static void InitDefaultsscc_info_Message_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_default_instance_;
    new (ptr) ::megastructure::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Message_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Message_megastructure_2eproto}, {
      &scc_info_Message_SMQ_Enroll_megastructure_2eproto.base,
      &scc_info_Message_MSS_Enroll_megastructure_2eproto.base,
      &scc_info_Message_MSQ_Alive_megastructure_2eproto.base,
      &scc_info_Message_SMS_Alive_megastructure_2eproto.base,
      &scc_info_Message_HCQ_Enroll_megastructure_2eproto.base,
      &scc_info_Message_CHS_Enroll_megastructure_2eproto.base,
      &scc_info_Message_CHQ_Alive_megastructure_2eproto.base,
      &scc_info_Message_HCS_Alive_megastructure_2eproto.base,}};

static void InitDefaultsscc_info_Message_CHQ_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_CHQ_Alive_default_instance_;
    new (ptr) ::megastructure::Message_CHQ_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_CHQ_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_CHQ_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_CHQ_Alive_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_CHS_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_CHS_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_CHS_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_CHS_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_CHS_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_CHS_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_HCQ_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_HCQ_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_HCQ_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_HCQ_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HCQ_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_HCQ_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_HCS_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_HCS_Alive_default_instance_;
    new (ptr) ::megastructure::Message_HCS_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_HCS_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HCS_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_HCS_Alive_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_MSQ_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_MSQ_Alive_default_instance_;
    new (ptr) ::megastructure::Message_MSQ_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_MSQ_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_MSQ_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_MSQ_Alive_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_MSS_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_MSS_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_MSS_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_MSS_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_MSS_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_MSS_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_SMQ_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_SMQ_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_SMQ_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_SMQ_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SMQ_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_SMQ_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_SMS_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_SMS_Alive_default_instance_;
    new (ptr) ::megastructure::Message_SMS_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_SMS_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SMS_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_SMS_Alive_megastructure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_megastructure_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_megastructure_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_megastructure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_megastructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SMQ_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SMQ_Enroll, slavename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_MSS_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_MSS_Enroll, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_MSQ_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_MSQ_Alive, slavename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SMS_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SMS_Alive, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HCQ_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HCQ_Enroll, processname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHS_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHS_Enroll, success_),
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHS_Enroll, hostpath_),
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHS_Enroll, program_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHQ_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_CHQ_Alive, processname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HCS_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HCS_Alive, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, id_),
  offsetof(::megastructure::MessageDefaultTypeInternal, smq_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, mss_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, msq_alive_),
  offsetof(::megastructure::MessageDefaultTypeInternal, sms_alive_),
  offsetof(::megastructure::MessageDefaultTypeInternal, hcq_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, chs_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, chq_alive_),
  offsetof(::megastructure::MessageDefaultTypeInternal, hcs_alive_),
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, foobar_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::megastructure::Message_SMQ_Enroll)},
  { 6, -1, sizeof(::megastructure::Message_MSS_Enroll)},
  { 12, -1, sizeof(::megastructure::Message_MSQ_Alive)},
  { 18, -1, sizeof(::megastructure::Message_SMS_Alive)},
  { 24, -1, sizeof(::megastructure::Message_HCQ_Enroll)},
  { 30, -1, sizeof(::megastructure::Message_CHS_Enroll)},
  { 38, -1, sizeof(::megastructure::Message_CHQ_Alive)},
  { 44, -1, sizeof(::megastructure::Message_HCS_Alive)},
  { 50, -1, sizeof(::megastructure::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_SMQ_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_MSS_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_MSQ_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_SMS_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_HCQ_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_CHS_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_CHQ_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_HCS_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_default_instance_),
};

const char descriptor_table_protodef_megastructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023megastructure.proto\022\rmegastructure\"\202\006\n"
  "\007Message\022\n\n\002id\030\001 \001(\005\0227\n\nsmq_enroll\030\002 \001(\013"
  "2!.megastructure.Message.SMQ_EnrollH\000\0227\n"
  "\nmss_enroll\030\003 \001(\0132!.megastructure.Messag"
  "e.MSS_EnrollH\000\0225\n\tmsq_alive\030\004 \001(\0132 .mega"
  "structure.Message.MSQ_AliveH\000\0225\n\tsms_ali"
  "ve\030\005 \001(\0132 .megastructure.Message.SMS_Ali"
  "veH\000\0227\n\nhcq_enroll\030\006 \001(\0132!.megastructure"
  ".Message.HCQ_EnrollH\000\0227\n\nchs_enroll\030\007 \001("
  "\0132!.megastructure.Message.CHS_EnrollH\000\0225"
  "\n\tchq_alive\030\010 \001(\0132 .megastructure.Messag"
  "e.CHQ_AliveH\000\0225\n\thcs_alive\030\t \001(\0132 .megas"
  "tructure.Message.HCS_AliveH\000\032\037\n\nSMQ_Enro"
  "ll\022\021\n\tslavename\030\001 \001(\t\032\035\n\nMSS_Enroll\022\017\n\007s"
  "uccess\030\001 \001(\010\032\036\n\tMSQ_Alive\022\021\n\tslavename\030\001"
  " \001(\t\032\034\n\tSMS_Alive\022\017\n\007success\030\001 \001(\010\032!\n\nHC"
  "Q_Enroll\022\023\n\013processname\030\001 \001(\t\032@\n\nCHS_Enr"
  "oll\022\017\n\007success\030\001 \001(\010\022\020\n\010hostpath\030\002 \001(\t\022\017"
  "\n\007program\030\003 \001(\t\032 \n\tCHQ_Alive\022\023\n\013processn"
  "ame\030\001 \001(\t\032\034\n\tHCS_Alive\022\017\n\007success\030\001 \001(\010B"
  "\010\n\006foobarb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_megastructure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_megastructure_2eproto_sccs[9] = {
  &scc_info_Message_megastructure_2eproto.base,
  &scc_info_Message_CHQ_Alive_megastructure_2eproto.base,
  &scc_info_Message_CHS_Enroll_megastructure_2eproto.base,
  &scc_info_Message_HCQ_Enroll_megastructure_2eproto.base,
  &scc_info_Message_HCS_Alive_megastructure_2eproto.base,
  &scc_info_Message_MSQ_Alive_megastructure_2eproto.base,
  &scc_info_Message_MSS_Enroll_megastructure_2eproto.base,
  &scc_info_Message_SMQ_Enroll_megastructure_2eproto.base,
  &scc_info_Message_SMS_Alive_megastructure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_megastructure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_megastructure_2eproto = {
  false, false, descriptor_table_protodef_megastructure_2eproto, "megastructure.proto", 817,
  &descriptor_table_megastructure_2eproto_once, descriptor_table_megastructure_2eproto_sccs, descriptor_table_megastructure_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_megastructure_2eproto::offsets,
  file_level_metadata_megastructure_2eproto, 9, file_level_enum_descriptors_megastructure_2eproto, file_level_service_descriptors_megastructure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_megastructure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_megastructure_2eproto)), true);
namespace megastructure {

// ===================================================================

void Message_SMQ_Enroll::InitAsDefaultInstance() {
}
class Message_SMQ_Enroll::_Internal {
 public:
};

Message_SMQ_Enroll::Message_SMQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.SMQ_Enroll)
}
Message_SMQ_Enroll::Message_SMQ_Enroll(const Message_SMQ_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slavename().empty()) {
    slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slavename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.SMQ_Enroll)
}

void Message_SMQ_Enroll::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_SMQ_Enroll_megastructure_2eproto.base);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_SMQ_Enroll::~Message_SMQ_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.SMQ_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_SMQ_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slavename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_SMQ_Enroll::ArenaDtor(void* object) {
  Message_SMQ_Enroll* _this = reinterpret_cast< Message_SMQ_Enroll* >(object);
  (void)_this;
}
void Message_SMQ_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_SMQ_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_SMQ_Enroll& Message_SMQ_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_SMQ_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_SMQ_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.SMQ_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SMQ_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slavename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slavename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.SMQ_Enroll.slavename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_SMQ_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.SMQ_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slavename().data(), static_cast<int>(this->_internal_slavename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.SMQ_Enroll.slavename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slavename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.SMQ_Enroll)
  return target;
}

size_t Message_SMQ_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.SMQ_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slavename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_SMQ_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.SMQ_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_SMQ_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_SMQ_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.SMQ_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.SMQ_Enroll)
    MergeFrom(*source);
  }
}

void Message_SMQ_Enroll::MergeFrom(const Message_SMQ_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.SMQ_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slavename().size() > 0) {
    _internal_set_slavename(from._internal_slavename());
  }
}

void Message_SMQ_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.SMQ_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_SMQ_Enroll::CopyFrom(const Message_SMQ_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.SMQ_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SMQ_Enroll::IsInitialized() const {
  return true;
}

void Message_SMQ_Enroll::InternalSwap(Message_SMQ_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slavename_.Swap(&other->slavename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SMQ_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_MSS_Enroll::InitAsDefaultInstance() {
}
class Message_MSS_Enroll::_Internal {
 public:
};

Message_MSS_Enroll::Message_MSS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.MSS_Enroll)
}
Message_MSS_Enroll::Message_MSS_Enroll(const Message_MSS_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.MSS_Enroll)
}

void Message_MSS_Enroll::SharedCtor() {
  success_ = false;
}

Message_MSS_Enroll::~Message_MSS_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.MSS_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_MSS_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message_MSS_Enroll::ArenaDtor(void* object) {
  Message_MSS_Enroll* _this = reinterpret_cast< Message_MSS_Enroll* >(object);
  (void)_this;
}
void Message_MSS_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_MSS_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_MSS_Enroll& Message_MSS_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_MSS_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_MSS_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.MSS_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MSS_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_MSS_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.MSS_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.MSS_Enroll)
  return target;
}

size_t Message_MSS_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.MSS_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_MSS_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.MSS_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_MSS_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_MSS_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.MSS_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.MSS_Enroll)
    MergeFrom(*source);
  }
}

void Message_MSS_Enroll::MergeFrom(const Message_MSS_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.MSS_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_MSS_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.MSS_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MSS_Enroll::CopyFrom(const Message_MSS_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.MSS_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MSS_Enroll::IsInitialized() const {
  return true;
}

void Message_MSS_Enroll::InternalSwap(Message_MSS_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MSS_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_MSQ_Alive::InitAsDefaultInstance() {
}
class Message_MSQ_Alive::_Internal {
 public:
};

Message_MSQ_Alive::Message_MSQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.MSQ_Alive)
}
Message_MSQ_Alive::Message_MSQ_Alive(const Message_MSQ_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slavename().empty()) {
    slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slavename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.MSQ_Alive)
}

void Message_MSQ_Alive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_MSQ_Alive_megastructure_2eproto.base);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_MSQ_Alive::~Message_MSQ_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.MSQ_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_MSQ_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slavename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_MSQ_Alive::ArenaDtor(void* object) {
  Message_MSQ_Alive* _this = reinterpret_cast< Message_MSQ_Alive* >(object);
  (void)_this;
}
void Message_MSQ_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_MSQ_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_MSQ_Alive& Message_MSQ_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_MSQ_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_MSQ_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.MSQ_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_MSQ_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slavename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slavename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.MSQ_Alive.slavename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_MSQ_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.MSQ_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slavename().data(), static_cast<int>(this->_internal_slavename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.MSQ_Alive.slavename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slavename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.MSQ_Alive)
  return target;
}

size_t Message_MSQ_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.MSQ_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slavename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_MSQ_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.MSQ_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_MSQ_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_MSQ_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.MSQ_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.MSQ_Alive)
    MergeFrom(*source);
  }
}

void Message_MSQ_Alive::MergeFrom(const Message_MSQ_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.MSQ_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slavename().size() > 0) {
    _internal_set_slavename(from._internal_slavename());
  }
}

void Message_MSQ_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.MSQ_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_MSQ_Alive::CopyFrom(const Message_MSQ_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.MSQ_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_MSQ_Alive::IsInitialized() const {
  return true;
}

void Message_MSQ_Alive::InternalSwap(Message_MSQ_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slavename_.Swap(&other->slavename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_MSQ_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_SMS_Alive::InitAsDefaultInstance() {
}
class Message_SMS_Alive::_Internal {
 public:
};

Message_SMS_Alive::Message_SMS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.SMS_Alive)
}
Message_SMS_Alive::Message_SMS_Alive(const Message_SMS_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.SMS_Alive)
}

void Message_SMS_Alive::SharedCtor() {
  success_ = false;
}

Message_SMS_Alive::~Message_SMS_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.SMS_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_SMS_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message_SMS_Alive::ArenaDtor(void* object) {
  Message_SMS_Alive* _this = reinterpret_cast< Message_SMS_Alive* >(object);
  (void)_this;
}
void Message_SMS_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_SMS_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_SMS_Alive& Message_SMS_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_SMS_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_SMS_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.SMS_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SMS_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_SMS_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.SMS_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.SMS_Alive)
  return target;
}

size_t Message_SMS_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.SMS_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_SMS_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.SMS_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_SMS_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_SMS_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.SMS_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.SMS_Alive)
    MergeFrom(*source);
  }
}

void Message_SMS_Alive::MergeFrom(const Message_SMS_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.SMS_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_SMS_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.SMS_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_SMS_Alive::CopyFrom(const Message_SMS_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.SMS_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SMS_Alive::IsInitialized() const {
  return true;
}

void Message_SMS_Alive::InternalSwap(Message_SMS_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SMS_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_HCQ_Enroll::InitAsDefaultInstance() {
}
class Message_HCQ_Enroll::_Internal {
 public:
};

Message_HCQ_Enroll::Message_HCQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.HCQ_Enroll)
}
Message_HCQ_Enroll::Message_HCQ_Enroll(const Message_HCQ_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processname().empty()) {
    processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_processname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.HCQ_Enroll)
}

void Message_HCQ_Enroll::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_HCQ_Enroll_megastructure_2eproto.base);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_HCQ_Enroll::~Message_HCQ_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.HCQ_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_HCQ_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  processname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_HCQ_Enroll::ArenaDtor(void* object) {
  Message_HCQ_Enroll* _this = reinterpret_cast< Message_HCQ_Enroll* >(object);
  (void)_this;
}
void Message_HCQ_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_HCQ_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_HCQ_Enroll& Message_HCQ_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_HCQ_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_HCQ_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.HCQ_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HCQ_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string processname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_processname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.HCQ_Enroll.processname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_HCQ_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.HCQ_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string processname = 1;
  if (this->processname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.HCQ_Enroll.processname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_processname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.HCQ_Enroll)
  return target;
}

size_t Message_HCQ_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.HCQ_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string processname = 1;
  if (this->processname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_HCQ_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.HCQ_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_HCQ_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_HCQ_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.HCQ_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.HCQ_Enroll)
    MergeFrom(*source);
  }
}

void Message_HCQ_Enroll::MergeFrom(const Message_HCQ_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.HCQ_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processname().size() > 0) {
    _internal_set_processname(from._internal_processname());
  }
}

void Message_HCQ_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.HCQ_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_HCQ_Enroll::CopyFrom(const Message_HCQ_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.HCQ_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HCQ_Enroll::IsInitialized() const {
  return true;
}

void Message_HCQ_Enroll::InternalSwap(Message_HCQ_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processname_.Swap(&other->processname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HCQ_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_CHS_Enroll::InitAsDefaultInstance() {
}
class Message_CHS_Enroll::_Internal {
 public:
};

Message_CHS_Enroll::Message_CHS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.CHS_Enroll)
}
Message_CHS_Enroll::Message_CHS_Enroll(const Message_CHS_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostpath().empty()) {
    hostpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostpath(),
      GetArena());
  }
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_program().empty()) {
    program_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_program(),
      GetArena());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.CHS_Enroll)
}

void Message_CHS_Enroll::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_CHS_Enroll_megastructure_2eproto.base);
  hostpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

Message_CHS_Enroll::~Message_CHS_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.CHS_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_CHS_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  hostpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  program_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_CHS_Enroll::ArenaDtor(void* object) {
  Message_CHS_Enroll* _this = reinterpret_cast< Message_CHS_Enroll* >(object);
  (void)_this;
}
void Message_CHS_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_CHS_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_CHS_Enroll& Message_CHS_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_CHS_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_CHS_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.CHS_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  program_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_CHS_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hostpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.CHS_Enroll.hostpath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string program = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_program();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.CHS_Enroll.program"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_CHS_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.CHS_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string hostpath = 2;
  if (this->hostpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostpath().data(), static_cast<int>(this->_internal_hostpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.CHS_Enroll.hostpath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostpath(), target);
  }

  // string program = 3;
  if (this->program().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_program().data(), static_cast<int>(this->_internal_program().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.CHS_Enroll.program");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_program(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.CHS_Enroll)
  return target;
}

size_t Message_CHS_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.CHS_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostpath = 2;
  if (this->hostpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostpath());
  }

  // string program = 3;
  if (this->program().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_program());
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_CHS_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.CHS_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_CHS_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_CHS_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.CHS_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.CHS_Enroll)
    MergeFrom(*source);
  }
}

void Message_CHS_Enroll::MergeFrom(const Message_CHS_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.CHS_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hostpath().size() > 0) {
    _internal_set_hostpath(from._internal_hostpath());
  }
  if (from.program().size() > 0) {
    _internal_set_program(from._internal_program());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_CHS_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.CHS_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_CHS_Enroll::CopyFrom(const Message_CHS_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.CHS_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_CHS_Enroll::IsInitialized() const {
  return true;
}

void Message_CHS_Enroll::InternalSwap(Message_CHS_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  hostpath_.Swap(&other->hostpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  program_.Swap(&other->program_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_CHS_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_CHQ_Alive::InitAsDefaultInstance() {
}
class Message_CHQ_Alive::_Internal {
 public:
};

Message_CHQ_Alive::Message_CHQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.CHQ_Alive)
}
Message_CHQ_Alive::Message_CHQ_Alive(const Message_CHQ_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processname().empty()) {
    processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_processname(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.CHQ_Alive)
}

void Message_CHQ_Alive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_CHQ_Alive_megastructure_2eproto.base);
  processname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_CHQ_Alive::~Message_CHQ_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.CHQ_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_CHQ_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  processname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_CHQ_Alive::ArenaDtor(void* object) {
  Message_CHQ_Alive* _this = reinterpret_cast< Message_CHQ_Alive* >(object);
  (void)_this;
}
void Message_CHQ_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_CHQ_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_CHQ_Alive& Message_CHQ_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_CHQ_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_CHQ_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.CHQ_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_CHQ_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string processname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_processname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.CHQ_Alive.processname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_CHQ_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.CHQ_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string processname = 1;
  if (this->processname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processname().data(), static_cast<int>(this->_internal_processname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.CHQ_Alive.processname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_processname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.CHQ_Alive)
  return target;
}

size_t Message_CHQ_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.CHQ_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string processname = 1;
  if (this->processname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processname());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_CHQ_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.CHQ_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_CHQ_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_CHQ_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.CHQ_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.CHQ_Alive)
    MergeFrom(*source);
  }
}

void Message_CHQ_Alive::MergeFrom(const Message_CHQ_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.CHQ_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.processname().size() > 0) {
    _internal_set_processname(from._internal_processname());
  }
}

void Message_CHQ_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.CHQ_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_CHQ_Alive::CopyFrom(const Message_CHQ_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.CHQ_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_CHQ_Alive::IsInitialized() const {
  return true;
}

void Message_CHQ_Alive::InternalSwap(Message_CHQ_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  processname_.Swap(&other->processname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_CHQ_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_HCS_Alive::InitAsDefaultInstance() {
}
class Message_HCS_Alive::_Internal {
 public:
};

Message_HCS_Alive::Message_HCS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.HCS_Alive)
}
Message_HCS_Alive::Message_HCS_Alive(const Message_HCS_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.HCS_Alive)
}

void Message_HCS_Alive::SharedCtor() {
  success_ = false;
}

Message_HCS_Alive::~Message_HCS_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.HCS_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_HCS_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message_HCS_Alive::ArenaDtor(void* object) {
  Message_HCS_Alive* _this = reinterpret_cast< Message_HCS_Alive* >(object);
  (void)_this;
}
void Message_HCS_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_HCS_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_HCS_Alive& Message_HCS_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_HCS_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_HCS_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.HCS_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HCS_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_HCS_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.HCS_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.HCS_Alive)
  return target;
}

size_t Message_HCS_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.HCS_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_HCS_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.HCS_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_HCS_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_HCS_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.HCS_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.HCS_Alive)
    MergeFrom(*source);
  }
}

void Message_HCS_Alive::MergeFrom(const Message_HCS_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.HCS_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_HCS_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.HCS_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_HCS_Alive::CopyFrom(const Message_HCS_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.HCS_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HCS_Alive::IsInitialized() const {
  return true;
}

void Message_HCS_Alive::InternalSwap(Message_HCS_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HCS_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::megastructure::_Message_default_instance_.smq_enroll_ = const_cast< ::megastructure::Message_SMQ_Enroll*>(
      ::megastructure::Message_SMQ_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.mss_enroll_ = const_cast< ::megastructure::Message_MSS_Enroll*>(
      ::megastructure::Message_MSS_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.msq_alive_ = const_cast< ::megastructure::Message_MSQ_Alive*>(
      ::megastructure::Message_MSQ_Alive::internal_default_instance());
  ::megastructure::_Message_default_instance_.sms_alive_ = const_cast< ::megastructure::Message_SMS_Alive*>(
      ::megastructure::Message_SMS_Alive::internal_default_instance());
  ::megastructure::_Message_default_instance_.hcq_enroll_ = const_cast< ::megastructure::Message_HCQ_Enroll*>(
      ::megastructure::Message_HCQ_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.chs_enroll_ = const_cast< ::megastructure::Message_CHS_Enroll*>(
      ::megastructure::Message_CHS_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.chq_alive_ = const_cast< ::megastructure::Message_CHQ_Alive*>(
      ::megastructure::Message_CHQ_Alive::internal_default_instance());
  ::megastructure::_Message_default_instance_.hcs_alive_ = const_cast< ::megastructure::Message_HCS_Alive*>(
      ::megastructure::Message_HCS_Alive::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::megastructure::Message_SMQ_Enroll& smq_enroll(const Message* msg);
  static const ::megastructure::Message_MSS_Enroll& mss_enroll(const Message* msg);
  static const ::megastructure::Message_MSQ_Alive& msq_alive(const Message* msg);
  static const ::megastructure::Message_SMS_Alive& sms_alive(const Message* msg);
  static const ::megastructure::Message_HCQ_Enroll& hcq_enroll(const Message* msg);
  static const ::megastructure::Message_CHS_Enroll& chs_enroll(const Message* msg);
  static const ::megastructure::Message_CHQ_Alive& chq_alive(const Message* msg);
  static const ::megastructure::Message_HCS_Alive& hcs_alive(const Message* msg);
};

const ::megastructure::Message_SMQ_Enroll&
Message::_Internal::smq_enroll(const Message* msg) {
  return *msg->foobar_.smq_enroll_;
}
const ::megastructure::Message_MSS_Enroll&
Message::_Internal::mss_enroll(const Message* msg) {
  return *msg->foobar_.mss_enroll_;
}
const ::megastructure::Message_MSQ_Alive&
Message::_Internal::msq_alive(const Message* msg) {
  return *msg->foobar_.msq_alive_;
}
const ::megastructure::Message_SMS_Alive&
Message::_Internal::sms_alive(const Message* msg) {
  return *msg->foobar_.sms_alive_;
}
const ::megastructure::Message_HCQ_Enroll&
Message::_Internal::hcq_enroll(const Message* msg) {
  return *msg->foobar_.hcq_enroll_;
}
const ::megastructure::Message_CHS_Enroll&
Message::_Internal::chs_enroll(const Message* msg) {
  return *msg->foobar_.chs_enroll_;
}
const ::megastructure::Message_CHQ_Alive&
Message::_Internal::chq_alive(const Message* msg) {
  return *msg->foobar_.chq_alive_;
}
const ::megastructure::Message_HCS_Alive&
Message::_Internal::hcs_alive(const Message* msg) {
  return *msg->foobar_.hcs_alive_;
}
void Message::set_allocated_smq_enroll(::megastructure::Message_SMQ_Enroll* smq_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (smq_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(smq_enroll);
    if (message_arena != submessage_arena) {
      smq_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, smq_enroll, submessage_arena);
    }
    set_has_smq_enroll();
    foobar_.smq_enroll_ = smq_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.smq_enroll)
}
void Message::set_allocated_mss_enroll(::megastructure::Message_MSS_Enroll* mss_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (mss_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mss_enroll);
    if (message_arena != submessage_arena) {
      mss_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mss_enroll, submessage_arena);
    }
    set_has_mss_enroll();
    foobar_.mss_enroll_ = mss_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.mss_enroll)
}
void Message::set_allocated_msq_alive(::megastructure::Message_MSQ_Alive* msq_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (msq_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msq_alive);
    if (message_arena != submessage_arena) {
      msq_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msq_alive, submessage_arena);
    }
    set_has_msq_alive();
    foobar_.msq_alive_ = msq_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.msq_alive)
}
void Message::set_allocated_sms_alive(::megastructure::Message_SMS_Alive* sms_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (sms_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sms_alive);
    if (message_arena != submessage_arena) {
      sms_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_alive, submessage_arena);
    }
    set_has_sms_alive();
    foobar_.sms_alive_ = sms_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.sms_alive)
}
void Message::set_allocated_hcq_enroll(::megastructure::Message_HCQ_Enroll* hcq_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (hcq_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hcq_enroll);
    if (message_arena != submessage_arena) {
      hcq_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hcq_enroll, submessage_arena);
    }
    set_has_hcq_enroll();
    foobar_.hcq_enroll_ = hcq_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.hcq_enroll)
}
void Message::set_allocated_chs_enroll(::megastructure::Message_CHS_Enroll* chs_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (chs_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chs_enroll);
    if (message_arena != submessage_arena) {
      chs_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chs_enroll, submessage_arena);
    }
    set_has_chs_enroll();
    foobar_.chs_enroll_ = chs_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.chs_enroll)
}
void Message::set_allocated_chq_alive(::megastructure::Message_CHQ_Alive* chq_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (chq_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(chq_alive);
    if (message_arena != submessage_arena) {
      chq_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chq_alive, submessage_arena);
    }
    set_has_chq_alive();
    foobar_.chq_alive_ = chq_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.chq_alive)
}
void Message::set_allocated_hcs_alive(::megastructure::Message_HCS_Alive* hcs_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (hcs_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hcs_alive);
    if (message_arena != submessage_arena) {
      hcs_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hcs_alive, submessage_arena);
    }
    set_has_hcs_alive();
    foobar_.hcs_alive_ = hcs_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.hcs_alive)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  clear_has_foobar();
  switch (from.foobar_case()) {
    case kSmqEnroll: {
      _internal_mutable_smq_enroll()->::megastructure::Message_SMQ_Enroll::MergeFrom(from._internal_smq_enroll());
      break;
    }
    case kMssEnroll: {
      _internal_mutable_mss_enroll()->::megastructure::Message_MSS_Enroll::MergeFrom(from._internal_mss_enroll());
      break;
    }
    case kMsqAlive: {
      _internal_mutable_msq_alive()->::megastructure::Message_MSQ_Alive::MergeFrom(from._internal_msq_alive());
      break;
    }
    case kSmsAlive: {
      _internal_mutable_sms_alive()->::megastructure::Message_SMS_Alive::MergeFrom(from._internal_sms_alive());
      break;
    }
    case kHcqEnroll: {
      _internal_mutable_hcq_enroll()->::megastructure::Message_HCQ_Enroll::MergeFrom(from._internal_hcq_enroll());
      break;
    }
    case kChsEnroll: {
      _internal_mutable_chs_enroll()->::megastructure::Message_CHS_Enroll::MergeFrom(from._internal_chs_enroll());
      break;
    }
    case kChqAlive: {
      _internal_mutable_chq_alive()->::megastructure::Message_CHQ_Alive::MergeFrom(from._internal_chq_alive());
      break;
    }
    case kHcsAlive: {
      _internal_mutable_hcs_alive()->::megastructure::Message_HCS_Alive::MergeFrom(from._internal_hcs_alive());
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_megastructure_2eproto.base);
  id_ = 0;
  clear_has_foobar();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:megastructure.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_foobar()) {
    clear_foobar();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message::clear_foobar() {
// @@protoc_insertion_point(one_of_clear_start:megastructure.Message)
  switch (foobar_case()) {
    case kSmqEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.smq_enroll_;
      }
      break;
    }
    case kMssEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.mss_enroll_;
      }
      break;
    }
    case kMsqAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.msq_alive_;
      }
      break;
    }
    case kSmsAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.sms_alive_;
      }
      break;
    }
    case kHcqEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.hcq_enroll_;
      }
      break;
    }
    case kChsEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.chs_enroll_;
      }
      break;
    }
    case kChqAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.chq_alive_;
      }
      break;
    }
    case kHcsAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.hcs_alive_;
      }
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOOBAR_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0;
  clear_foobar();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.SMQ_Enroll smq_enroll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_smq_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.MSS_Enroll mss_enroll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mss_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.MSQ_Alive msq_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_msq_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.SMS_Alive sms_alive = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_hcq_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.CHS_Enroll chs_enroll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_chs_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.CHQ_Alive chq_alive = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chq_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.HCS_Alive hcs_alive = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_hcs_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .megastructure.Message.SMQ_Enroll smq_enroll = 2;
  if (_internal_has_smq_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::smq_enroll(this), target, stream);
  }

  // .megastructure.Message.MSS_Enroll mss_enroll = 3;
  if (_internal_has_mss_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mss_enroll(this), target, stream);
  }

  // .megastructure.Message.MSQ_Alive msq_alive = 4;
  if (_internal_has_msq_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::msq_alive(this), target, stream);
  }

  // .megastructure.Message.SMS_Alive sms_alive = 5;
  if (_internal_has_sms_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sms_alive(this), target, stream);
  }

  // .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
  if (_internal_has_hcq_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::hcq_enroll(this), target, stream);
  }

  // .megastructure.Message.CHS_Enroll chs_enroll = 7;
  if (_internal_has_chs_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::chs_enroll(this), target, stream);
  }

  // .megastructure.Message.CHQ_Alive chq_alive = 8;
  if (_internal_has_chq_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chq_alive(this), target, stream);
  }

  // .megastructure.Message.HCS_Alive hcs_alive = 9;
  if (_internal_has_hcs_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::hcs_alive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  switch (foobar_case()) {
    // .megastructure.Message.SMQ_Enroll smq_enroll = 2;
    case kSmqEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.smq_enroll_);
      break;
    }
    // .megastructure.Message.MSS_Enroll mss_enroll = 3;
    case kMssEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.mss_enroll_);
      break;
    }
    // .megastructure.Message.MSQ_Alive msq_alive = 4;
    case kMsqAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.msq_alive_);
      break;
    }
    // .megastructure.Message.SMS_Alive sms_alive = 5;
    case kSmsAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.sms_alive_);
      break;
    }
    // .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
    case kHcqEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.hcq_enroll_);
      break;
    }
    // .megastructure.Message.CHS_Enroll chs_enroll = 7;
    case kChsEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.chs_enroll_);
      break;
    }
    // .megastructure.Message.CHQ_Alive chq_alive = 8;
    case kChqAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.chq_alive_);
      break;
    }
    // .megastructure.Message.HCS_Alive hcs_alive = 9;
    case kHcsAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.hcs_alive_);
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.foobar_case()) {
    case kSmqEnroll: {
      _internal_mutable_smq_enroll()->::megastructure::Message_SMQ_Enroll::MergeFrom(from._internal_smq_enroll());
      break;
    }
    case kMssEnroll: {
      _internal_mutable_mss_enroll()->::megastructure::Message_MSS_Enroll::MergeFrom(from._internal_mss_enroll());
      break;
    }
    case kMsqAlive: {
      _internal_mutable_msq_alive()->::megastructure::Message_MSQ_Alive::MergeFrom(from._internal_msq_alive());
      break;
    }
    case kSmsAlive: {
      _internal_mutable_sms_alive()->::megastructure::Message_SMS_Alive::MergeFrom(from._internal_sms_alive());
      break;
    }
    case kHcqEnroll: {
      _internal_mutable_hcq_enroll()->::megastructure::Message_HCQ_Enroll::MergeFrom(from._internal_hcq_enroll());
      break;
    }
    case kChsEnroll: {
      _internal_mutable_chs_enroll()->::megastructure::Message_CHS_Enroll::MergeFrom(from._internal_chs_enroll());
      break;
    }
    case kChqAlive: {
      _internal_mutable_chq_alive()->::megastructure::Message_CHQ_Alive::MergeFrom(from._internal_chq_alive());
      break;
    }
    case kHcsAlive: {
      _internal_mutable_hcs_alive()->::megastructure::Message_HCS_Alive::MergeFrom(from._internal_hcs_alive());
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(foobar_, other->foobar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace megastructure
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::megastructure::Message_SMQ_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_SMQ_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_SMQ_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_MSS_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_MSS_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_MSS_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_MSQ_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_MSQ_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_MSQ_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_SMS_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_SMS_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_SMS_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_HCQ_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_HCQ_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_HCQ_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_CHS_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_CHS_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_CHS_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_CHQ_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_CHQ_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_CHQ_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_HCS_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_HCS_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_HCS_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message* Arena::CreateMaybeMessage< ::megastructure::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
