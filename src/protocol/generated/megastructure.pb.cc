// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megastructure.proto

#include "megastructure.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto;
namespace megastructure {
class Message_SlaveHostRequest_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_SlaveHostRequest_Enroll> _instance;
} _Message_SlaveHostRequest_Enroll_default_instance_;
class Message_HostSlaveResponse_EnrollDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_HostSlaveResponse_Enroll> _instance;
} _Message_HostSlaveResponse_Enroll_default_instance_;
class Message_HostSlaveRequest_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_HostSlaveRequest_Alive> _instance;
} _Message_HostSlaveRequest_Alive_default_instance_;
class Message_SlaveHostResponse_AliveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message_SlaveHostResponse_Alive> _instance;
} _Message_SlaveHostResponse_Alive_default_instance_;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
  const ::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll_;
  const ::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll_;
  const ::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive_;
  const ::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive_;
} _Message_default_instance_;
}  // namespace megastructure
static void InitDefaultsscc_info_Message_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_default_instance_;
    new (ptr) ::megastructure::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Message_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Message_megastructure_2eproto}, {
      &scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto.base,
      &scc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto.base,
      &scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto.base,
      &scc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto.base,}};

static void InitDefaultsscc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_HostSlaveRequest_Alive_default_instance_;
    new (ptr) ::megastructure::Message_HostSlaveRequest_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_HostSlaveRequest_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_HostSlaveResponse_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_HostSlaveResponse_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_HostSlaveResponse_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_SlaveHostRequest_Enroll_default_instance_;
    new (ptr) ::megastructure::Message_SlaveHostRequest_Enroll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_SlaveHostRequest_Enroll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto}, {}};

static void InitDefaultsscc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::megastructure::_Message_SlaveHostResponse_Alive_default_instance_;
    new (ptr) ::megastructure::Message_SlaveHostResponse_Alive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::megastructure::Message_SlaveHostResponse_Alive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_megastructure_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_megastructure_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_megastructure_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_megastructure_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SlaveHostRequest_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SlaveHostRequest_Enroll, slavename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HostSlaveResponse_Enroll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HostSlaveResponse_Enroll, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HostSlaveRequest_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_HostSlaveRequest_Alive, slavename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SlaveHostResponse_Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message_SlaveHostResponse_Alive, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::megastructure::MessageDefaultTypeInternal, slavehostrequest_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, hostslaveresponse_enroll_),
  offsetof(::megastructure::MessageDefaultTypeInternal, hostslaverequest_alive_),
  offsetof(::megastructure::MessageDefaultTypeInternal, slavehostresponse_alive_),
  PROTOBUF_FIELD_OFFSET(::megastructure::Message, foobar_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::megastructure::Message_SlaveHostRequest_Enroll)},
  { 6, -1, sizeof(::megastructure::Message_HostSlaveResponse_Enroll)},
  { 12, -1, sizeof(::megastructure::Message_HostSlaveRequest_Alive)},
  { 18, -1, sizeof(::megastructure::Message_SlaveHostResponse_Alive)},
  { 24, -1, sizeof(::megastructure::Message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_SlaveHostRequest_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_HostSlaveResponse_Enroll_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_HostSlaveRequest_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_SlaveHostResponse_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::megastructure::_Message_default_instance_),
};

const char descriptor_table_protodef_megastructure_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023megastructure.proto\022\rmegastructure\"\223\004\n"
  "\007Message\022Q\n\027slavehostrequest_enroll\030\001 \001("
  "\0132..megastructure.Message.SlaveHostReque"
  "st_EnrollH\000\022S\n\030hostslaveresponse_enroll\030"
  "\002 \001(\0132/.megastructure.Message.HostSlaveR"
  "esponse_EnrollH\000\022O\n\026hostslaverequest_ali"
  "ve\030\003 \001(\0132-.megastructure.Message.HostSla"
  "veRequest_AliveH\000\022Q\n\027slavehostresponse_a"
  "live\030\004 \001(\0132..megastructure.Message.Slave"
  "HostResponse_AliveH\000\032,\n\027SlaveHostRequest"
  "_Enroll\022\021\n\tslavename\030\001 \001(\t\032+\n\030HostSlaveR"
  "esponse_Enroll\022\017\n\007success\030\001 \001(\010\032+\n\026HostS"
  "laveRequest_Alive\022\021\n\tslavename\030\001 \001(\t\032*\n\027"
  "SlaveHostResponse_Alive\022\017\n\007success\030\001 \001(\010"
  "B\010\n\006foobarb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_megastructure_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_megastructure_2eproto_sccs[5] = {
  &scc_info_Message_megastructure_2eproto.base,
  &scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto.base,
  &scc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto.base,
  &scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto.base,
  &scc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_megastructure_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_megastructure_2eproto = {
  false, false, descriptor_table_protodef_megastructure_2eproto, "megastructure.proto", 578,
  &descriptor_table_megastructure_2eproto_once, descriptor_table_megastructure_2eproto_sccs, descriptor_table_megastructure_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_megastructure_2eproto::offsets,
  file_level_metadata_megastructure_2eproto, 5, file_level_enum_descriptors_megastructure_2eproto, file_level_service_descriptors_megastructure_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_megastructure_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_megastructure_2eproto)), true);
namespace megastructure {

// ===================================================================

void Message_SlaveHostRequest_Enroll::InitAsDefaultInstance() {
}
class Message_SlaveHostRequest_Enroll::_Internal {
 public:
};

Message_SlaveHostRequest_Enroll::Message_SlaveHostRequest_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.SlaveHostRequest_Enroll)
}
Message_SlaveHostRequest_Enroll::Message_SlaveHostRequest_Enroll(const Message_SlaveHostRequest_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slavename().empty()) {
    slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slavename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.SlaveHostRequest_Enroll)
}

void Message_SlaveHostRequest_Enroll::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto.base);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_SlaveHostRequest_Enroll::~Message_SlaveHostRequest_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.SlaveHostRequest_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_SlaveHostRequest_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slavename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_SlaveHostRequest_Enroll::ArenaDtor(void* object) {
  Message_SlaveHostRequest_Enroll* _this = reinterpret_cast< Message_SlaveHostRequest_Enroll* >(object);
  (void)_this;
}
void Message_SlaveHostRequest_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_SlaveHostRequest_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_SlaveHostRequest_Enroll& Message_SlaveHostRequest_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_SlaveHostRequest_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_SlaveHostRequest_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.SlaveHostRequest_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SlaveHostRequest_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slavename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slavename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.SlaveHostRequest_Enroll.slavename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_SlaveHostRequest_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.SlaveHostRequest_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slavename().data(), static_cast<int>(this->_internal_slavename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.SlaveHostRequest_Enroll.slavename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slavename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.SlaveHostRequest_Enroll)
  return target;
}

size_t Message_SlaveHostRequest_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.SlaveHostRequest_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slavename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_SlaveHostRequest_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.SlaveHostRequest_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_SlaveHostRequest_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_SlaveHostRequest_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.SlaveHostRequest_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.SlaveHostRequest_Enroll)
    MergeFrom(*source);
  }
}

void Message_SlaveHostRequest_Enroll::MergeFrom(const Message_SlaveHostRequest_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.SlaveHostRequest_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slavename().size() > 0) {
    _internal_set_slavename(from._internal_slavename());
  }
}

void Message_SlaveHostRequest_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.SlaveHostRequest_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_SlaveHostRequest_Enroll::CopyFrom(const Message_SlaveHostRequest_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.SlaveHostRequest_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SlaveHostRequest_Enroll::IsInitialized() const {
  return true;
}

void Message_SlaveHostRequest_Enroll::InternalSwap(Message_SlaveHostRequest_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slavename_.Swap(&other->slavename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SlaveHostRequest_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_HostSlaveResponse_Enroll::InitAsDefaultInstance() {
}
class Message_HostSlaveResponse_Enroll::_Internal {
 public:
};

Message_HostSlaveResponse_Enroll::Message_HostSlaveResponse_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.HostSlaveResponse_Enroll)
}
Message_HostSlaveResponse_Enroll::Message_HostSlaveResponse_Enroll(const Message_HostSlaveResponse_Enroll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.HostSlaveResponse_Enroll)
}

void Message_HostSlaveResponse_Enroll::SharedCtor() {
  success_ = false;
}

Message_HostSlaveResponse_Enroll::~Message_HostSlaveResponse_Enroll() {
  // @@protoc_insertion_point(destructor:megastructure.Message.HostSlaveResponse_Enroll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_HostSlaveResponse_Enroll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message_HostSlaveResponse_Enroll::ArenaDtor(void* object) {
  Message_HostSlaveResponse_Enroll* _this = reinterpret_cast< Message_HostSlaveResponse_Enroll* >(object);
  (void)_this;
}
void Message_HostSlaveResponse_Enroll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_HostSlaveResponse_Enroll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_HostSlaveResponse_Enroll& Message_HostSlaveResponse_Enroll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_HostSlaveResponse_Enroll_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_HostSlaveResponse_Enroll::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.HostSlaveResponse_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HostSlaveResponse_Enroll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_HostSlaveResponse_Enroll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.HostSlaveResponse_Enroll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.HostSlaveResponse_Enroll)
  return target;
}

size_t Message_HostSlaveResponse_Enroll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.HostSlaveResponse_Enroll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_HostSlaveResponse_Enroll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.HostSlaveResponse_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_HostSlaveResponse_Enroll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_HostSlaveResponse_Enroll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.HostSlaveResponse_Enroll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.HostSlaveResponse_Enroll)
    MergeFrom(*source);
  }
}

void Message_HostSlaveResponse_Enroll::MergeFrom(const Message_HostSlaveResponse_Enroll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.HostSlaveResponse_Enroll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_HostSlaveResponse_Enroll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.HostSlaveResponse_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_HostSlaveResponse_Enroll::CopyFrom(const Message_HostSlaveResponse_Enroll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.HostSlaveResponse_Enroll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HostSlaveResponse_Enroll::IsInitialized() const {
  return true;
}

void Message_HostSlaveResponse_Enroll::InternalSwap(Message_HostSlaveResponse_Enroll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HostSlaveResponse_Enroll::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_HostSlaveRequest_Alive::InitAsDefaultInstance() {
}
class Message_HostSlaveRequest_Alive::_Internal {
 public:
};

Message_HostSlaveRequest_Alive::Message_HostSlaveRequest_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.HostSlaveRequest_Alive)
}
Message_HostSlaveRequest_Alive::Message_HostSlaveRequest_Alive(const Message_HostSlaveRequest_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slavename().empty()) {
    slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_slavename(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.HostSlaveRequest_Alive)
}

void Message_HostSlaveRequest_Alive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto.base);
  slavename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Message_HostSlaveRequest_Alive::~Message_HostSlaveRequest_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.HostSlaveRequest_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_HostSlaveRequest_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  slavename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Message_HostSlaveRequest_Alive::ArenaDtor(void* object) {
  Message_HostSlaveRequest_Alive* _this = reinterpret_cast< Message_HostSlaveRequest_Alive* >(object);
  (void)_this;
}
void Message_HostSlaveRequest_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_HostSlaveRequest_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_HostSlaveRequest_Alive& Message_HostSlaveRequest_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_HostSlaveRequest_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_HostSlaveRequest_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.HostSlaveRequest_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_HostSlaveRequest_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slavename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slavename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "megastructure.Message.HostSlaveRequest_Alive.slavename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_HostSlaveRequest_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.HostSlaveRequest_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slavename().data(), static_cast<int>(this->_internal_slavename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "megastructure.Message.HostSlaveRequest_Alive.slavename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slavename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.HostSlaveRequest_Alive)
  return target;
}

size_t Message_HostSlaveRequest_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.HostSlaveRequest_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slavename = 1;
  if (this->slavename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slavename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_HostSlaveRequest_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.HostSlaveRequest_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_HostSlaveRequest_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_HostSlaveRequest_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.HostSlaveRequest_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.HostSlaveRequest_Alive)
    MergeFrom(*source);
  }
}

void Message_HostSlaveRequest_Alive::MergeFrom(const Message_HostSlaveRequest_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.HostSlaveRequest_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slavename().size() > 0) {
    _internal_set_slavename(from._internal_slavename());
  }
}

void Message_HostSlaveRequest_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.HostSlaveRequest_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_HostSlaveRequest_Alive::CopyFrom(const Message_HostSlaveRequest_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.HostSlaveRequest_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_HostSlaveRequest_Alive::IsInitialized() const {
  return true;
}

void Message_HostSlaveRequest_Alive::InternalSwap(Message_HostSlaveRequest_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  slavename_.Swap(&other->slavename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_HostSlaveRequest_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message_SlaveHostResponse_Alive::InitAsDefaultInstance() {
}
class Message_SlaveHostResponse_Alive::_Internal {
 public:
};

Message_SlaveHostResponse_Alive::Message_SlaveHostResponse_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message.SlaveHostResponse_Alive)
}
Message_SlaveHostResponse_Alive::Message_SlaveHostResponse_Alive(const Message_SlaveHostResponse_Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:megastructure.Message.SlaveHostResponse_Alive)
}

void Message_SlaveHostResponse_Alive::SharedCtor() {
  success_ = false;
}

Message_SlaveHostResponse_Alive::~Message_SlaveHostResponse_Alive() {
  // @@protoc_insertion_point(destructor:megastructure.Message.SlaveHostResponse_Alive)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message_SlaveHostResponse_Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Message_SlaveHostResponse_Alive::ArenaDtor(void* object) {
  Message_SlaveHostResponse_Alive* _this = reinterpret_cast< Message_SlaveHostResponse_Alive* >(object);
  (void)_this;
}
void Message_SlaveHostResponse_Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message_SlaveHostResponse_Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message_SlaveHostResponse_Alive& Message_SlaveHostResponse_Alive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_SlaveHostResponse_Alive_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message_SlaveHostResponse_Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message.SlaveHostResponse_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message_SlaveHostResponse_Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message_SlaveHostResponse_Alive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message.SlaveHostResponse_Alive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message.SlaveHostResponse_Alive)
  return target;
}

size_t Message_SlaveHostResponse_Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message.SlaveHostResponse_Alive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message_SlaveHostResponse_Alive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message.SlaveHostResponse_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  const Message_SlaveHostResponse_Alive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message_SlaveHostResponse_Alive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message.SlaveHostResponse_Alive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message.SlaveHostResponse_Alive)
    MergeFrom(*source);
  }
}

void Message_SlaveHostResponse_Alive::MergeFrom(const Message_SlaveHostResponse_Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message.SlaveHostResponse_Alive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void Message_SlaveHostResponse_Alive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message.SlaveHostResponse_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message_SlaveHostResponse_Alive::CopyFrom(const Message_SlaveHostResponse_Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message.SlaveHostResponse_Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message_SlaveHostResponse_Alive::IsInitialized() const {
  return true;
}

void Message_SlaveHostResponse_Alive::InternalSwap(Message_SlaveHostResponse_Alive* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message_SlaveHostResponse_Alive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Message::InitAsDefaultInstance() {
  ::megastructure::_Message_default_instance_.slavehostrequest_enroll_ = const_cast< ::megastructure::Message_SlaveHostRequest_Enroll*>(
      ::megastructure::Message_SlaveHostRequest_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.hostslaveresponse_enroll_ = const_cast< ::megastructure::Message_HostSlaveResponse_Enroll*>(
      ::megastructure::Message_HostSlaveResponse_Enroll::internal_default_instance());
  ::megastructure::_Message_default_instance_.hostslaverequest_alive_ = const_cast< ::megastructure::Message_HostSlaveRequest_Alive*>(
      ::megastructure::Message_HostSlaveRequest_Alive::internal_default_instance());
  ::megastructure::_Message_default_instance_.slavehostresponse_alive_ = const_cast< ::megastructure::Message_SlaveHostResponse_Alive*>(
      ::megastructure::Message_SlaveHostResponse_Alive::internal_default_instance());
}
class Message::_Internal {
 public:
  static const ::megastructure::Message_SlaveHostRequest_Enroll& slavehostrequest_enroll(const Message* msg);
  static const ::megastructure::Message_HostSlaveResponse_Enroll& hostslaveresponse_enroll(const Message* msg);
  static const ::megastructure::Message_HostSlaveRequest_Alive& hostslaverequest_alive(const Message* msg);
  static const ::megastructure::Message_SlaveHostResponse_Alive& slavehostresponse_alive(const Message* msg);
};

const ::megastructure::Message_SlaveHostRequest_Enroll&
Message::_Internal::slavehostrequest_enroll(const Message* msg) {
  return *msg->foobar_.slavehostrequest_enroll_;
}
const ::megastructure::Message_HostSlaveResponse_Enroll&
Message::_Internal::hostslaveresponse_enroll(const Message* msg) {
  return *msg->foobar_.hostslaveresponse_enroll_;
}
const ::megastructure::Message_HostSlaveRequest_Alive&
Message::_Internal::hostslaverequest_alive(const Message* msg) {
  return *msg->foobar_.hostslaverequest_alive_;
}
const ::megastructure::Message_SlaveHostResponse_Alive&
Message::_Internal::slavehostresponse_alive(const Message* msg) {
  return *msg->foobar_.slavehostresponse_alive_;
}
void Message::set_allocated_slavehostrequest_enroll(::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (slavehostrequest_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slavehostrequest_enroll);
    if (message_arena != submessage_arena) {
      slavehostrequest_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slavehostrequest_enroll, submessage_arena);
    }
    set_has_slavehostrequest_enroll();
    foobar_.slavehostrequest_enroll_ = slavehostrequest_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.slavehostrequest_enroll)
}
void Message::set_allocated_hostslaveresponse_enroll(::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (hostslaveresponse_enroll) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostslaveresponse_enroll);
    if (message_arena != submessage_arena) {
      hostslaveresponse_enroll = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostslaveresponse_enroll, submessage_arena);
    }
    set_has_hostslaveresponse_enroll();
    foobar_.hostslaveresponse_enroll_ = hostslaveresponse_enroll;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.hostslaveresponse_enroll)
}
void Message::set_allocated_hostslaverequest_alive(::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (hostslaverequest_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostslaverequest_alive);
    if (message_arena != submessage_arena) {
      hostslaverequest_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostslaverequest_alive, submessage_arena);
    }
    set_has_hostslaverequest_alive();
    foobar_.hostslaverequest_alive_ = hostslaverequest_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.hostslaverequest_alive)
}
void Message::set_allocated_slavehostresponse_alive(::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_foobar();
  if (slavehostresponse_alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slavehostresponse_alive);
    if (message_arena != submessage_arena) {
      slavehostresponse_alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slavehostresponse_alive, submessage_arena);
    }
    set_has_slavehostresponse_alive();
    foobar_.slavehostresponse_alive_ = slavehostresponse_alive;
  }
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.slavehostresponse_alive)
}
Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:megastructure.Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_foobar();
  switch (from.foobar_case()) {
    case kSlavehostrequestEnroll: {
      _internal_mutable_slavehostrequest_enroll()->::megastructure::Message_SlaveHostRequest_Enroll::MergeFrom(from._internal_slavehostrequest_enroll());
      break;
    }
    case kHostslaveresponseEnroll: {
      _internal_mutable_hostslaveresponse_enroll()->::megastructure::Message_HostSlaveResponse_Enroll::MergeFrom(from._internal_hostslaveresponse_enroll());
      break;
    }
    case kHostslaverequestAlive: {
      _internal_mutable_hostslaverequest_alive()->::megastructure::Message_HostSlaveRequest_Alive::MergeFrom(from._internal_hostslaverequest_alive());
      break;
    }
    case kSlavehostresponseAlive: {
      _internal_mutable_slavehostresponse_alive()->::megastructure::Message_SlaveHostResponse_Alive::MergeFrom(from._internal_slavehostresponse_alive());
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:megastructure.Message)
}

void Message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Message_megastructure_2eproto.base);
  clear_has_foobar();
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:megastructure.Message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_foobar()) {
    clear_foobar();
  }
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_megastructure_2eproto.base);
  return *internal_default_instance();
}


void Message::clear_foobar() {
// @@protoc_insertion_point(one_of_clear_start:megastructure.Message)
  switch (foobar_case()) {
    case kSlavehostrequestEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.slavehostrequest_enroll_;
      }
      break;
    }
    case kHostslaveresponseEnroll: {
      if (GetArena() == nullptr) {
        delete foobar_.hostslaveresponse_enroll_;
      }
      break;
    }
    case kHostslaverequestAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.hostslaverequest_alive_;
      }
      break;
    }
    case kSlavehostresponseAlive: {
      if (GetArena() == nullptr) {
        delete foobar_.slavehostresponse_alive_;
      }
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FOOBAR_NOT_SET;
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:megastructure.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_foobar();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .megastructure.Message.SlaveHostRequest_Enroll slavehostrequest_enroll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_slavehostrequest_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.HostSlaveResponse_Enroll hostslaveresponse_enroll = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostslaveresponse_enroll(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.HostSlaveRequest_Alive hostslaverequest_alive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostslaverequest_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .megastructure.Message.SlaveHostResponse_Alive slavehostresponse_alive = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_slavehostresponse_alive(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:megastructure.Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .megastructure.Message.SlaveHostRequest_Enroll slavehostrequest_enroll = 1;
  if (_internal_has_slavehostrequest_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::slavehostrequest_enroll(this), target, stream);
  }

  // .megastructure.Message.HostSlaveResponse_Enroll hostslaveresponse_enroll = 2;
  if (_internal_has_hostslaveresponse_enroll()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::hostslaveresponse_enroll(this), target, stream);
  }

  // .megastructure.Message.HostSlaveRequest_Alive hostslaverequest_alive = 3;
  if (_internal_has_hostslaverequest_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::hostslaverequest_alive(this), target, stream);
  }

  // .megastructure.Message.SlaveHostResponse_Alive slavehostresponse_alive = 4;
  if (_internal_has_slavehostresponse_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::slavehostresponse_alive(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:megastructure.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:megastructure.Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (foobar_case()) {
    // .megastructure.Message.SlaveHostRequest_Enroll slavehostrequest_enroll = 1;
    case kSlavehostrequestEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.slavehostrequest_enroll_);
      break;
    }
    // .megastructure.Message.HostSlaveResponse_Enroll hostslaveresponse_enroll = 2;
    case kHostslaveresponseEnroll: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.hostslaveresponse_enroll_);
      break;
    }
    // .megastructure.Message.HostSlaveRequest_Alive hostslaverequest_alive = 3;
    case kHostslaverequestAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.hostslaverequest_alive_);
      break;
    }
    // .megastructure.Message.SlaveHostResponse_Alive slavehostresponse_alive = 4;
    case kSlavehostresponseAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *foobar_.slavehostresponse_alive_);
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:megastructure.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:megastructure.Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:megastructure.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:megastructure.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.foobar_case()) {
    case kSlavehostrequestEnroll: {
      _internal_mutable_slavehostrequest_enroll()->::megastructure::Message_SlaveHostRequest_Enroll::MergeFrom(from._internal_slavehostrequest_enroll());
      break;
    }
    case kHostslaveresponseEnroll: {
      _internal_mutable_hostslaveresponse_enroll()->::megastructure::Message_HostSlaveResponse_Enroll::MergeFrom(from._internal_hostslaveresponse_enroll());
      break;
    }
    case kHostslaverequestAlive: {
      _internal_mutable_hostslaverequest_alive()->::megastructure::Message_HostSlaveRequest_Alive::MergeFrom(from._internal_hostslaverequest_alive());
      break;
    }
    case kSlavehostresponseAlive: {
      _internal_mutable_slavehostresponse_alive()->::megastructure::Message_SlaveHostResponse_Alive::MergeFrom(from._internal_slavehostresponse_alive());
      break;
    }
    case FOOBAR_NOT_SET: {
      break;
    }
  }
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:megastructure.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:megastructure.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(foobar_, other->foobar_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace megastructure
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::megastructure::Message_SlaveHostRequest_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_SlaveHostRequest_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_SlaveHostRequest_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_HostSlaveResponse_Enroll* Arena::CreateMaybeMessage< ::megastructure::Message_HostSlaveResponse_Enroll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_HostSlaveResponse_Enroll >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_HostSlaveRequest_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_HostSlaveRequest_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_HostSlaveRequest_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message_SlaveHostResponse_Alive* Arena::CreateMaybeMessage< ::megastructure::Message_SlaveHostResponse_Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message_SlaveHostResponse_Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::megastructure::Message* Arena::CreateMaybeMessage< ::megastructure::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::megastructure::Message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
