// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megastructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_megastructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[37]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_megastructure_2eproto;
namespace megastructure {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_CHQ_Alive;
class Message_CHQ_AliveDefaultTypeInternal;
extern Message_CHQ_AliveDefaultTypeInternal _Message_CHQ_Alive_default_instance_;
class Message_CHQ_Load;
class Message_CHQ_LoadDefaultTypeInternal;
extern Message_CHQ_LoadDefaultTypeInternal _Message_CHQ_Load_default_instance_;
class Message_CHS_Buffer;
class Message_CHS_BufferDefaultTypeInternal;
extern Message_CHS_BufferDefaultTypeInternal _Message_CHS_Buffer_default_instance_;
class Message_CHS_Enroll;
class Message_CHS_EnrollDefaultTypeInternal;
extern Message_CHS_EnrollDefaultTypeInternal _Message_CHS_Enroll_default_instance_;
class Message_CHS_EnrollEG;
class Message_CHS_EnrollEGDefaultTypeInternal;
extern Message_CHS_EnrollEGDefaultTypeInternal _Message_CHS_EnrollEG_default_instance_;
class Message_Config;
class Message_ConfigDefaultTypeInternal;
extern Message_ConfigDefaultTypeInternal _Message_Config_default_instance_;
class Message_Config_Load;
class Message_Config_LoadDefaultTypeInternal;
extern Message_Config_LoadDefaultTypeInternal _Message_Config_Load_default_instance_;
class Message_Config_Load_CHQ;
class Message_Config_Load_CHQDefaultTypeInternal;
extern Message_Config_Load_CHQDefaultTypeInternal _Message_Config_Load_CHQ_default_instance_;
class Message_Config_Load_HCS;
class Message_Config_Load_HCSDefaultTypeInternal;
extern Message_Config_Load_HCSDefaultTypeInternal _Message_Config_Load_HCS_default_instance_;
class Message_Config_Load_MSQ;
class Message_Config_Load_MSQDefaultTypeInternal;
extern Message_Config_Load_MSQDefaultTypeInternal _Message_Config_Load_MSQ_default_instance_;
class Message_Config_Load_SMS;
class Message_Config_Load_SMSDefaultTypeInternal;
extern Message_Config_Load_SMSDefaultTypeInternal _Message_Config_Load_SMS_default_instance_;
class Message_Config_Save;
class Message_Config_SaveDefaultTypeInternal;
extern Message_Config_SaveDefaultTypeInternal _Message_Config_Save_default_instance_;
class Message_Config_Save_CHQ;
class Message_Config_Save_CHQDefaultTypeInternal;
extern Message_Config_Save_CHQDefaultTypeInternal _Message_Config_Save_CHQ_default_instance_;
class Message_Config_Save_HCS;
class Message_Config_Save_HCSDefaultTypeInternal;
extern Message_Config_Save_HCSDefaultTypeInternal _Message_Config_Save_HCS_default_instance_;
class Message_Config_Save_MSQ;
class Message_Config_Save_MSQDefaultTypeInternal;
extern Message_Config_Save_MSQDefaultTypeInternal _Message_Config_Save_MSQ_default_instance_;
class Message_Config_Save_SMS;
class Message_Config_Save_SMSDefaultTypeInternal;
extern Message_Config_Save_SMSDefaultTypeInternal _Message_Config_Save_SMS_default_instance_;
class Message_EG_Msg;
class Message_EG_MsgDefaultTypeInternal;
extern Message_EG_MsgDefaultTypeInternal _Message_EG_Msg_default_instance_;
class Message_EG_Msg_Error;
class Message_EG_Msg_ErrorDefaultTypeInternal;
extern Message_EG_Msg_ErrorDefaultTypeInternal _Message_EG_Msg_Error_default_instance_;
class Message_EG_Msg_Event;
class Message_EG_Msg_EventDefaultTypeInternal;
extern Message_EG_Msg_EventDefaultTypeInternal _Message_EG_Msg_Event_default_instance_;
class Message_EG_Msg_Request;
class Message_EG_Msg_RequestDefaultTypeInternal;
extern Message_EG_Msg_RequestDefaultTypeInternal _Message_EG_Msg_Request_default_instance_;
class Message_EG_Msg_Request_Lock;
class Message_EG_Msg_Request_LockDefaultTypeInternal;
extern Message_EG_Msg_Request_LockDefaultTypeInternal _Message_EG_Msg_Request_Lock_default_instance_;
class Message_EG_Msg_Request_Read;
class Message_EG_Msg_Request_ReadDefaultTypeInternal;
extern Message_EG_Msg_Request_ReadDefaultTypeInternal _Message_EG_Msg_Request_Read_default_instance_;
class Message_EG_Msg_Request_Unlock;
class Message_EG_Msg_Request_UnlockDefaultTypeInternal;
extern Message_EG_Msg_Request_UnlockDefaultTypeInternal _Message_EG_Msg_Request_Unlock_default_instance_;
class Message_EG_Msg_Request_Write;
class Message_EG_Msg_Request_WriteDefaultTypeInternal;
extern Message_EG_Msg_Request_WriteDefaultTypeInternal _Message_EG_Msg_Request_Write_default_instance_;
class Message_EG_Msg_Response;
class Message_EG_Msg_ResponseDefaultTypeInternal;
extern Message_EG_Msg_ResponseDefaultTypeInternal _Message_EG_Msg_Response_default_instance_;
class Message_HCQ_Buffer;
class Message_HCQ_BufferDefaultTypeInternal;
extern Message_HCQ_BufferDefaultTypeInternal _Message_HCQ_Buffer_default_instance_;
class Message_HCQ_Enroll;
class Message_HCQ_EnrollDefaultTypeInternal;
extern Message_HCQ_EnrollDefaultTypeInternal _Message_HCQ_Enroll_default_instance_;
class Message_HCQ_EnrollEG;
class Message_HCQ_EnrollEGDefaultTypeInternal;
extern Message_HCQ_EnrollEGDefaultTypeInternal _Message_HCQ_EnrollEG_default_instance_;
class Message_HCS_Alive;
class Message_HCS_AliveDefaultTypeInternal;
extern Message_HCS_AliveDefaultTypeInternal _Message_HCS_Alive_default_instance_;
class Message_HCS_Load;
class Message_HCS_LoadDefaultTypeInternal;
extern Message_HCS_LoadDefaultTypeInternal _Message_HCS_Load_default_instance_;
class Message_MSQ_Alive;
class Message_MSQ_AliveDefaultTypeInternal;
extern Message_MSQ_AliveDefaultTypeInternal _Message_MSQ_Alive_default_instance_;
class Message_MSQ_Load;
class Message_MSQ_LoadDefaultTypeInternal;
extern Message_MSQ_LoadDefaultTypeInternal _Message_MSQ_Load_default_instance_;
class Message_MSS_Enroll;
class Message_MSS_EnrollDefaultTypeInternal;
extern Message_MSS_EnrollDefaultTypeInternal _Message_MSS_Enroll_default_instance_;
class Message_SMQ_Enroll;
class Message_SMQ_EnrollDefaultTypeInternal;
extern Message_SMQ_EnrollDefaultTypeInternal _Message_SMQ_Enroll_default_instance_;
class Message_SMS_Alive;
class Message_SMS_AliveDefaultTypeInternal;
extern Message_SMS_AliveDefaultTypeInternal _Message_SMS_Alive_default_instance_;
class Message_SMS_Load;
class Message_SMS_LoadDefaultTypeInternal;
extern Message_SMS_LoadDefaultTypeInternal _Message_SMS_Load_default_instance_;
}  // namespace megastructure
PROTOBUF_NAMESPACE_OPEN
template<> ::megastructure::Message* Arena::CreateMaybeMessage<::megastructure::Message>(Arena*);
template<> ::megastructure::Message_CHQ_Alive* Arena::CreateMaybeMessage<::megastructure::Message_CHQ_Alive>(Arena*);
template<> ::megastructure::Message_CHQ_Load* Arena::CreateMaybeMessage<::megastructure::Message_CHQ_Load>(Arena*);
template<> ::megastructure::Message_CHS_Buffer* Arena::CreateMaybeMessage<::megastructure::Message_CHS_Buffer>(Arena*);
template<> ::megastructure::Message_CHS_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_CHS_Enroll>(Arena*);
template<> ::megastructure::Message_CHS_EnrollEG* Arena::CreateMaybeMessage<::megastructure::Message_CHS_EnrollEG>(Arena*);
template<> ::megastructure::Message_Config* Arena::CreateMaybeMessage<::megastructure::Message_Config>(Arena*);
template<> ::megastructure::Message_Config_Load* Arena::CreateMaybeMessage<::megastructure::Message_Config_Load>(Arena*);
template<> ::megastructure::Message_Config_Load_CHQ* Arena::CreateMaybeMessage<::megastructure::Message_Config_Load_CHQ>(Arena*);
template<> ::megastructure::Message_Config_Load_HCS* Arena::CreateMaybeMessage<::megastructure::Message_Config_Load_HCS>(Arena*);
template<> ::megastructure::Message_Config_Load_MSQ* Arena::CreateMaybeMessage<::megastructure::Message_Config_Load_MSQ>(Arena*);
template<> ::megastructure::Message_Config_Load_SMS* Arena::CreateMaybeMessage<::megastructure::Message_Config_Load_SMS>(Arena*);
template<> ::megastructure::Message_Config_Save* Arena::CreateMaybeMessage<::megastructure::Message_Config_Save>(Arena*);
template<> ::megastructure::Message_Config_Save_CHQ* Arena::CreateMaybeMessage<::megastructure::Message_Config_Save_CHQ>(Arena*);
template<> ::megastructure::Message_Config_Save_HCS* Arena::CreateMaybeMessage<::megastructure::Message_Config_Save_HCS>(Arena*);
template<> ::megastructure::Message_Config_Save_MSQ* Arena::CreateMaybeMessage<::megastructure::Message_Config_Save_MSQ>(Arena*);
template<> ::megastructure::Message_Config_Save_SMS* Arena::CreateMaybeMessage<::megastructure::Message_Config_Save_SMS>(Arena*);
template<> ::megastructure::Message_EG_Msg* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg>(Arena*);
template<> ::megastructure::Message_EG_Msg_Error* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Error>(Arena*);
template<> ::megastructure::Message_EG_Msg_Event* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Event>(Arena*);
template<> ::megastructure::Message_EG_Msg_Request* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Request>(Arena*);
template<> ::megastructure::Message_EG_Msg_Request_Lock* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Request_Lock>(Arena*);
template<> ::megastructure::Message_EG_Msg_Request_Read* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Request_Read>(Arena*);
template<> ::megastructure::Message_EG_Msg_Request_Unlock* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Request_Unlock>(Arena*);
template<> ::megastructure::Message_EG_Msg_Request_Write* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Request_Write>(Arena*);
template<> ::megastructure::Message_EG_Msg_Response* Arena::CreateMaybeMessage<::megastructure::Message_EG_Msg_Response>(Arena*);
template<> ::megastructure::Message_HCQ_Buffer* Arena::CreateMaybeMessage<::megastructure::Message_HCQ_Buffer>(Arena*);
template<> ::megastructure::Message_HCQ_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_HCQ_Enroll>(Arena*);
template<> ::megastructure::Message_HCQ_EnrollEG* Arena::CreateMaybeMessage<::megastructure::Message_HCQ_EnrollEG>(Arena*);
template<> ::megastructure::Message_HCS_Alive* Arena::CreateMaybeMessage<::megastructure::Message_HCS_Alive>(Arena*);
template<> ::megastructure::Message_HCS_Load* Arena::CreateMaybeMessage<::megastructure::Message_HCS_Load>(Arena*);
template<> ::megastructure::Message_MSQ_Alive* Arena::CreateMaybeMessage<::megastructure::Message_MSQ_Alive>(Arena*);
template<> ::megastructure::Message_MSQ_Load* Arena::CreateMaybeMessage<::megastructure::Message_MSQ_Load>(Arena*);
template<> ::megastructure::Message_MSS_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_MSS_Enroll>(Arena*);
template<> ::megastructure::Message_SMQ_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_SMQ_Enroll>(Arena*);
template<> ::megastructure::Message_SMS_Alive* Arena::CreateMaybeMessage<::megastructure::Message_SMS_Alive>(Arena*);
template<> ::megastructure::Message_SMS_Load* Arena::CreateMaybeMessage<::megastructure::Message_SMS_Load>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace megastructure {

// ===================================================================

class Message_SMQ_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMQ_Enroll) */ {
 public:
  inline Message_SMQ_Enroll() : Message_SMQ_Enroll(nullptr) {}
  virtual ~Message_SMQ_Enroll();

  Message_SMQ_Enroll(const Message_SMQ_Enroll& from);
  Message_SMQ_Enroll(Message_SMQ_Enroll&& from) noexcept
    : Message_SMQ_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_SMQ_Enroll& operator=(const Message_SMQ_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMQ_Enroll& operator=(Message_SMQ_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMQ_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMQ_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_SMQ_Enroll*>(
               &_Message_SMQ_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_SMQ_Enroll& a, Message_SMQ_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMQ_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMQ_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMQ_Enroll* New() const final {
    return CreateMaybeMessage<Message_SMQ_Enroll>(nullptr);
  }

  Message_SMQ_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMQ_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMQ_Enroll& from);
  void MergeFrom(const Message_SMQ_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMQ_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMQ_Enroll";
  }
  protected:
  explicit Message_SMQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMQ_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSS_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSS_Enroll) */ {
 public:
  inline Message_MSS_Enroll() : Message_MSS_Enroll(nullptr) {}
  virtual ~Message_MSS_Enroll();

  Message_MSS_Enroll(const Message_MSS_Enroll& from);
  Message_MSS_Enroll(Message_MSS_Enroll&& from) noexcept
    : Message_MSS_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_MSS_Enroll& operator=(const Message_MSS_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSS_Enroll& operator=(Message_MSS_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSS_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSS_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_MSS_Enroll*>(
               &_Message_MSS_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_MSS_Enroll& a, Message_MSS_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSS_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSS_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSS_Enroll* New() const final {
    return CreateMaybeMessage<Message_MSS_Enroll>(nullptr);
  }

  Message_MSS_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSS_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSS_Enroll& from);
  void MergeFrom(const Message_MSS_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSS_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSS_Enroll";
  }
  protected:
  explicit Message_MSS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramnameFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string programname = 2;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSS_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSQ_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSQ_Alive) */ {
 public:
  inline Message_MSQ_Alive() : Message_MSQ_Alive(nullptr) {}
  virtual ~Message_MSQ_Alive();

  Message_MSQ_Alive(const Message_MSQ_Alive& from);
  Message_MSQ_Alive(Message_MSQ_Alive&& from) noexcept
    : Message_MSQ_Alive() {
    *this = ::std::move(from);
  }

  inline Message_MSQ_Alive& operator=(const Message_MSQ_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSQ_Alive& operator=(Message_MSQ_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSQ_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSQ_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_MSQ_Alive*>(
               &_Message_MSQ_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_MSQ_Alive& a, Message_MSQ_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSQ_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSQ_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSQ_Alive* New() const final {
    return CreateMaybeMessage<Message_MSQ_Alive>(nullptr);
  }

  Message_MSQ_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSQ_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSQ_Alive& from);
  void MergeFrom(const Message_MSQ_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSQ_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSQ_Alive";
  }
  protected:
  explicit Message_MSQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSQ_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_SMS_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMS_Alive) */ {
 public:
  inline Message_SMS_Alive() : Message_SMS_Alive(nullptr) {}
  virtual ~Message_SMS_Alive();

  Message_SMS_Alive(const Message_SMS_Alive& from);
  Message_SMS_Alive(Message_SMS_Alive&& from) noexcept
    : Message_SMS_Alive() {
    *this = ::std::move(from);
  }

  inline Message_SMS_Alive& operator=(const Message_SMS_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMS_Alive& operator=(Message_SMS_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMS_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMS_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_SMS_Alive*>(
               &_Message_SMS_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_SMS_Alive& a, Message_SMS_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMS_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMS_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMS_Alive* New() const final {
    return CreateMaybeMessage<Message_SMS_Alive>(nullptr);
  }

  Message_SMS_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMS_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMS_Alive& from);
  void MergeFrom(const Message_SMS_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMS_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMS_Alive";
  }
  protected:
  explicit Message_SMS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMS_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCQ_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCQ_Enroll) */ {
 public:
  inline Message_HCQ_Enroll() : Message_HCQ_Enroll(nullptr) {}
  virtual ~Message_HCQ_Enroll();

  Message_HCQ_Enroll(const Message_HCQ_Enroll& from);
  Message_HCQ_Enroll(Message_HCQ_Enroll&& from) noexcept
    : Message_HCQ_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_HCQ_Enroll& operator=(const Message_HCQ_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCQ_Enroll& operator=(Message_HCQ_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCQ_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCQ_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_HCQ_Enroll*>(
               &_Message_HCQ_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message_HCQ_Enroll& a, Message_HCQ_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCQ_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCQ_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCQ_Enroll* New() const final {
    return CreateMaybeMessage<Message_HCQ_Enroll>(nullptr);
  }

  Message_HCQ_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCQ_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCQ_Enroll& from);
  void MergeFrom(const Message_HCQ_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCQ_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCQ_Enroll";
  }
  protected:
  explicit Message_HCQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessnameFieldNumber = 1,
    kUniqueFieldNumber = 2,
  };
  // string processname = 1;
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // string unique = 2;
  void clear_unique();
  const std::string& unique() const;
  void set_unique(const std::string& value);
  void set_unique(std::string&& value);
  void set_unique(const char* value);
  void set_unique(const char* value, size_t size);
  std::string* mutable_unique();
  std::string* release_unique();
  void set_allocated_unique(std::string* unique);
  private:
  const std::string& _internal_unique() const;
  void _internal_set_unique(const std::string& value);
  std::string* _internal_mutable_unique();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCQ_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHS_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHS_Enroll) */ {
 public:
  inline Message_CHS_Enroll() : Message_CHS_Enroll(nullptr) {}
  virtual ~Message_CHS_Enroll();

  Message_CHS_Enroll(const Message_CHS_Enroll& from);
  Message_CHS_Enroll(Message_CHS_Enroll&& from) noexcept
    : Message_CHS_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_CHS_Enroll& operator=(const Message_CHS_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHS_Enroll& operator=(Message_CHS_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHS_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHS_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_CHS_Enroll*>(
               &_Message_CHS_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message_CHS_Enroll& a, Message_CHS_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHS_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHS_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHS_Enroll* New() const final {
    return CreateMaybeMessage<Message_CHS_Enroll>(nullptr);
  }

  Message_CHS_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHS_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHS_Enroll& from);
  void MergeFrom(const Message_CHS_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHS_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHS_Enroll";
  }
  protected:
  explicit Message_CHS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorkspacepathFieldNumber = 2,
    kSlavenameFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string workspacepath = 2;
  void clear_workspacepath();
  const std::string& workspacepath() const;
  void set_workspacepath(const std::string& value);
  void set_workspacepath(std::string&& value);
  void set_workspacepath(const char* value);
  void set_workspacepath(const char* value, size_t size);
  std::string* mutable_workspacepath();
  std::string* release_workspacepath();
  void set_allocated_workspacepath(std::string* workspacepath);
  private:
  const std::string& _internal_workspacepath() const;
  void _internal_set_workspacepath(const std::string& value);
  std::string* _internal_mutable_workspacepath();
  public:

  // string slavename = 3;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHS_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspacepath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCQ_EnrollEG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCQ_EnrollEG) */ {
 public:
  inline Message_HCQ_EnrollEG() : Message_HCQ_EnrollEG(nullptr) {}
  virtual ~Message_HCQ_EnrollEG();

  Message_HCQ_EnrollEG(const Message_HCQ_EnrollEG& from);
  Message_HCQ_EnrollEG(Message_HCQ_EnrollEG&& from) noexcept
    : Message_HCQ_EnrollEG() {
    *this = ::std::move(from);
  }

  inline Message_HCQ_EnrollEG& operator=(const Message_HCQ_EnrollEG& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCQ_EnrollEG& operator=(Message_HCQ_EnrollEG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCQ_EnrollEG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCQ_EnrollEG* internal_default_instance() {
    return reinterpret_cast<const Message_HCQ_EnrollEG*>(
               &_Message_HCQ_EnrollEG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message_HCQ_EnrollEG& a, Message_HCQ_EnrollEG& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCQ_EnrollEG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCQ_EnrollEG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCQ_EnrollEG* New() const final {
    return CreateMaybeMessage<Message_HCQ_EnrollEG>(nullptr);
  }

  Message_HCQ_EnrollEG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCQ_EnrollEG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCQ_EnrollEG& from);
  void MergeFrom(const Message_HCQ_EnrollEG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCQ_EnrollEG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCQ_EnrollEG";
  }
  protected:
  explicit Message_HCQ_EnrollEG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueFieldNumber = 1,
  };
  // string unique = 1;
  void clear_unique();
  const std::string& unique() const;
  void set_unique(const std::string& value);
  void set_unique(std::string&& value);
  void set_unique(const char* value);
  void set_unique(const char* value, size_t size);
  std::string* mutable_unique();
  std::string* release_unique();
  void set_allocated_unique(std::string* unique);
  private:
  const std::string& _internal_unique() const;
  void _internal_set_unique(const std::string& value);
  std::string* _internal_mutable_unique();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCQ_EnrollEG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHS_EnrollEG PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHS_EnrollEG) */ {
 public:
  inline Message_CHS_EnrollEG() : Message_CHS_EnrollEG(nullptr) {}
  virtual ~Message_CHS_EnrollEG();

  Message_CHS_EnrollEG(const Message_CHS_EnrollEG& from);
  Message_CHS_EnrollEG(Message_CHS_EnrollEG&& from) noexcept
    : Message_CHS_EnrollEG() {
    *this = ::std::move(from);
  }

  inline Message_CHS_EnrollEG& operator=(const Message_CHS_EnrollEG& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHS_EnrollEG& operator=(Message_CHS_EnrollEG&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHS_EnrollEG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHS_EnrollEG* internal_default_instance() {
    return reinterpret_cast<const Message_CHS_EnrollEG*>(
               &_Message_CHS_EnrollEG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Message_CHS_EnrollEG& a, Message_CHS_EnrollEG& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHS_EnrollEG* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHS_EnrollEG* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHS_EnrollEG* New() const final {
    return CreateMaybeMessage<Message_CHS_EnrollEG>(nullptr);
  }

  Message_CHS_EnrollEG* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHS_EnrollEG>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHS_EnrollEG& from);
  void MergeFrom(const Message_CHS_EnrollEG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHS_EnrollEG* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHS_EnrollEG";
  }
  protected:
  explicit Message_CHS_EnrollEG(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHS_EnrollEG)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHQ_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHQ_Alive) */ {
 public:
  inline Message_CHQ_Alive() : Message_CHQ_Alive(nullptr) {}
  virtual ~Message_CHQ_Alive();

  Message_CHQ_Alive(const Message_CHQ_Alive& from);
  Message_CHQ_Alive(Message_CHQ_Alive&& from) noexcept
    : Message_CHQ_Alive() {
    *this = ::std::move(from);
  }

  inline Message_CHQ_Alive& operator=(const Message_CHQ_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHQ_Alive& operator=(Message_CHQ_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHQ_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHQ_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_CHQ_Alive*>(
               &_Message_CHQ_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message_CHQ_Alive& a, Message_CHQ_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHQ_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHQ_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHQ_Alive* New() const final {
    return CreateMaybeMessage<Message_CHQ_Alive>(nullptr);
  }

  Message_CHQ_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHQ_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHQ_Alive& from);
  void MergeFrom(const Message_CHQ_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHQ_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHQ_Alive";
  }
  protected:
  explicit Message_CHQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessnameFieldNumber = 1,
  };
  // string processname = 1;
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHQ_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCS_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCS_Alive) */ {
 public:
  inline Message_HCS_Alive() : Message_HCS_Alive(nullptr) {}
  virtual ~Message_HCS_Alive();

  Message_HCS_Alive(const Message_HCS_Alive& from);
  Message_HCS_Alive(Message_HCS_Alive&& from) noexcept
    : Message_HCS_Alive() {
    *this = ::std::move(from);
  }

  inline Message_HCS_Alive& operator=(const Message_HCS_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCS_Alive& operator=(Message_HCS_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCS_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCS_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_HCS_Alive*>(
               &_Message_HCS_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message_HCS_Alive& a, Message_HCS_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCS_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCS_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCS_Alive* New() const final {
    return CreateMaybeMessage<Message_HCS_Alive>(nullptr);
  }

  Message_HCS_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCS_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCS_Alive& from);
  void MergeFrom(const Message_HCS_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCS_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCS_Alive";
  }
  protected:
  explicit Message_HCS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCS_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSQ_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSQ_Load) */ {
 public:
  inline Message_MSQ_Load() : Message_MSQ_Load(nullptr) {}
  virtual ~Message_MSQ_Load();

  Message_MSQ_Load(const Message_MSQ_Load& from);
  Message_MSQ_Load(Message_MSQ_Load&& from) noexcept
    : Message_MSQ_Load() {
    *this = ::std::move(from);
  }

  inline Message_MSQ_Load& operator=(const Message_MSQ_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSQ_Load& operator=(Message_MSQ_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSQ_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSQ_Load* internal_default_instance() {
    return reinterpret_cast<const Message_MSQ_Load*>(
               &_Message_MSQ_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message_MSQ_Load& a, Message_MSQ_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSQ_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSQ_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSQ_Load* New() const final {
    return CreateMaybeMessage<Message_MSQ_Load>(nullptr);
  }

  Message_MSQ_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSQ_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSQ_Load& from);
  void MergeFrom(const Message_MSQ_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSQ_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSQ_Load";
  }
  protected:
  explicit Message_MSQ_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramnameFieldNumber = 1,
  };
  // string programname = 1;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSQ_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_SMS_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMS_Load) */ {
 public:
  inline Message_SMS_Load() : Message_SMS_Load(nullptr) {}
  virtual ~Message_SMS_Load();

  Message_SMS_Load(const Message_SMS_Load& from);
  Message_SMS_Load(Message_SMS_Load&& from) noexcept
    : Message_SMS_Load() {
    *this = ::std::move(from);
  }

  inline Message_SMS_Load& operator=(const Message_SMS_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMS_Load& operator=(Message_SMS_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMS_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMS_Load* internal_default_instance() {
    return reinterpret_cast<const Message_SMS_Load*>(
               &_Message_SMS_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Message_SMS_Load& a, Message_SMS_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMS_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMS_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMS_Load* New() const final {
    return CreateMaybeMessage<Message_SMS_Load>(nullptr);
  }

  Message_SMS_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMS_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMS_Load& from);
  void MergeFrom(const Message_SMS_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMS_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMS_Load";
  }
  protected:
  explicit Message_SMS_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMS_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHQ_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHQ_Load) */ {
 public:
  inline Message_CHQ_Load() : Message_CHQ_Load(nullptr) {}
  virtual ~Message_CHQ_Load();

  Message_CHQ_Load(const Message_CHQ_Load& from);
  Message_CHQ_Load(Message_CHQ_Load&& from) noexcept
    : Message_CHQ_Load() {
    *this = ::std::move(from);
  }

  inline Message_CHQ_Load& operator=(const Message_CHQ_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHQ_Load& operator=(Message_CHQ_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHQ_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHQ_Load* internal_default_instance() {
    return reinterpret_cast<const Message_CHQ_Load*>(
               &_Message_CHQ_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message_CHQ_Load& a, Message_CHQ_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHQ_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHQ_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHQ_Load* New() const final {
    return CreateMaybeMessage<Message_CHQ_Load>(nullptr);
  }

  Message_CHQ_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHQ_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHQ_Load& from);
  void MergeFrom(const Message_CHQ_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHQ_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHQ_Load";
  }
  protected:
  explicit Message_CHQ_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kProgramnameFieldNumber = 2,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string programname = 2;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHQ_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCS_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCS_Load) */ {
 public:
  inline Message_HCS_Load() : Message_HCS_Load(nullptr) {}
  virtual ~Message_HCS_Load();

  Message_HCS_Load(const Message_HCS_Load& from);
  Message_HCS_Load(Message_HCS_Load&& from) noexcept
    : Message_HCS_Load() {
    *this = ::std::move(from);
  }

  inline Message_HCS_Load& operator=(const Message_HCS_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCS_Load& operator=(Message_HCS_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCS_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCS_Load* internal_default_instance() {
    return reinterpret_cast<const Message_HCS_Load*>(
               &_Message_HCS_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Message_HCS_Load& a, Message_HCS_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCS_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCS_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCS_Load* New() const final {
    return CreateMaybeMessage<Message_HCS_Load>(nullptr);
  }

  Message_HCS_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCS_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCS_Load& from);
  void MergeFrom(const Message_HCS_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCS_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCS_Load";
  }
  protected:
  explicit Message_HCS_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCS_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCQ_Buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCQ_Buffer) */ {
 public:
  inline Message_HCQ_Buffer() : Message_HCQ_Buffer(nullptr) {}
  virtual ~Message_HCQ_Buffer();

  Message_HCQ_Buffer(const Message_HCQ_Buffer& from);
  Message_HCQ_Buffer(Message_HCQ_Buffer&& from) noexcept
    : Message_HCQ_Buffer() {
    *this = ::std::move(from);
  }

  inline Message_HCQ_Buffer& operator=(const Message_HCQ_Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCQ_Buffer& operator=(Message_HCQ_Buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCQ_Buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCQ_Buffer* internal_default_instance() {
    return reinterpret_cast<const Message_HCQ_Buffer*>(
               &_Message_HCQ_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Message_HCQ_Buffer& a, Message_HCQ_Buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCQ_Buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCQ_Buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCQ_Buffer* New() const final {
    return CreateMaybeMessage<Message_HCQ_Buffer>(nullptr);
  }

  Message_HCQ_Buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCQ_Buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCQ_Buffer& from);
  void MergeFrom(const Message_HCQ_Buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCQ_Buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCQ_Buffer";
  }
  protected:
  explicit Message_HCQ_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffernameFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string buffername = 1;
  void clear_buffername();
  const std::string& buffername() const;
  void set_buffername(const std::string& value);
  void set_buffername(std::string&& value);
  void set_buffername(const char* value);
  void set_buffername(const char* value, size_t size);
  std::string* mutable_buffername();
  std::string* release_buffername();
  void set_allocated_buffername(std::string* buffername);
  private:
  const std::string& _internal_buffername() const;
  void _internal_set_buffername(const std::string& value);
  std::string* _internal_mutable_buffername();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCQ_Buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffername_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHS_Buffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHS_Buffer) */ {
 public:
  inline Message_CHS_Buffer() : Message_CHS_Buffer(nullptr) {}
  virtual ~Message_CHS_Buffer();

  Message_CHS_Buffer(const Message_CHS_Buffer& from);
  Message_CHS_Buffer(Message_CHS_Buffer&& from) noexcept
    : Message_CHS_Buffer() {
    *this = ::std::move(from);
  }

  inline Message_CHS_Buffer& operator=(const Message_CHS_Buffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHS_Buffer& operator=(Message_CHS_Buffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHS_Buffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHS_Buffer* internal_default_instance() {
    return reinterpret_cast<const Message_CHS_Buffer*>(
               &_Message_CHS_Buffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Message_CHS_Buffer& a, Message_CHS_Buffer& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHS_Buffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHS_Buffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHS_Buffer* New() const final {
    return CreateMaybeMessage<Message_CHS_Buffer>(nullptr);
  }

  Message_CHS_Buffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHS_Buffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHS_Buffer& from);
  void MergeFrom(const Message_CHS_Buffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHS_Buffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHS_Buffer";
  }
  protected:
  explicit Message_CHS_Buffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffernameFieldNumber = 1,
    kSharednameFieldNumber = 2,
  };
  // string buffername = 1;
  void clear_buffername();
  const std::string& buffername() const;
  void set_buffername(const std::string& value);
  void set_buffername(std::string&& value);
  void set_buffername(const char* value);
  void set_buffername(const char* value, size_t size);
  std::string* mutable_buffername();
  std::string* release_buffername();
  void set_allocated_buffername(std::string* buffername);
  private:
  const std::string& _internal_buffername() const;
  void _internal_set_buffername(const std::string& value);
  std::string* _internal_mutable_buffername();
  public:

  // string sharedname = 2;
  void clear_sharedname();
  const std::string& sharedname() const;
  void set_sharedname(const std::string& value);
  void set_sharedname(std::string&& value);
  void set_sharedname(const char* value);
  void set_sharedname(const char* value, size_t size);
  std::string* mutable_sharedname();
  std::string* release_sharedname();
  void set_allocated_sharedname(std::string* sharedname);
  private:
  const std::string& _internal_sharedname() const;
  void _internal_set_sharedname(const std::string& value);
  std::string* _internal_mutable_sharedname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHS_Buffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sharedname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Load_MSQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Load.MSQ) */ {
 public:
  inline Message_Config_Load_MSQ() : Message_Config_Load_MSQ(nullptr) {}
  virtual ~Message_Config_Load_MSQ();

  Message_Config_Load_MSQ(const Message_Config_Load_MSQ& from);
  Message_Config_Load_MSQ(Message_Config_Load_MSQ&& from) noexcept
    : Message_Config_Load_MSQ() {
    *this = ::std::move(from);
  }

  inline Message_Config_Load_MSQ& operator=(const Message_Config_Load_MSQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Load_MSQ& operator=(Message_Config_Load_MSQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Load_MSQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Load_MSQ* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Load_MSQ*>(
               &_Message_Config_Load_MSQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Message_Config_Load_MSQ& a, Message_Config_Load_MSQ& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Load_MSQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Load_MSQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Load_MSQ* New() const final {
    return CreateMaybeMessage<Message_Config_Load_MSQ>(nullptr);
  }

  Message_Config_Load_MSQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Load_MSQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Load_MSQ& from);
  void MergeFrom(const Message_Config_Load_MSQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Load_MSQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Load.MSQ";
  }
  protected:
  explicit Message_Config_Load_MSQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Load.MSQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Load_SMS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Load.SMS) */ {
 public:
  inline Message_Config_Load_SMS() : Message_Config_Load_SMS(nullptr) {}
  virtual ~Message_Config_Load_SMS();

  Message_Config_Load_SMS(const Message_Config_Load_SMS& from);
  Message_Config_Load_SMS(Message_Config_Load_SMS&& from) noexcept
    : Message_Config_Load_SMS() {
    *this = ::std::move(from);
  }

  inline Message_Config_Load_SMS& operator=(const Message_Config_Load_SMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Load_SMS& operator=(Message_Config_Load_SMS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Load_SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Load_SMS* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Load_SMS*>(
               &_Message_Config_Load_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Message_Config_Load_SMS& a, Message_Config_Load_SMS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Load_SMS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Load_SMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Load_SMS* New() const final {
    return CreateMaybeMessage<Message_Config_Load_SMS>(nullptr);
  }

  Message_Config_Load_SMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Load_SMS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Load_SMS& from);
  void MergeFrom(const Message_Config_Load_SMS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Load_SMS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Load.SMS";
  }
  protected:
  explicit Message_Config_Load_SMS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Load.SMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Load_CHQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Load.CHQ) */ {
 public:
  inline Message_Config_Load_CHQ() : Message_Config_Load_CHQ(nullptr) {}
  virtual ~Message_Config_Load_CHQ();

  Message_Config_Load_CHQ(const Message_Config_Load_CHQ& from);
  Message_Config_Load_CHQ(Message_Config_Load_CHQ&& from) noexcept
    : Message_Config_Load_CHQ() {
    *this = ::std::move(from);
  }

  inline Message_Config_Load_CHQ& operator=(const Message_Config_Load_CHQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Load_CHQ& operator=(Message_Config_Load_CHQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Load_CHQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Load_CHQ* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Load_CHQ*>(
               &_Message_Config_Load_CHQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Message_Config_Load_CHQ& a, Message_Config_Load_CHQ& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Load_CHQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Load_CHQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Load_CHQ* New() const final {
    return CreateMaybeMessage<Message_Config_Load_CHQ>(nullptr);
  }

  Message_Config_Load_CHQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Load_CHQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Load_CHQ& from);
  void MergeFrom(const Message_Config_Load_CHQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Load_CHQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Load.CHQ";
  }
  protected:
  explicit Message_Config_Load_CHQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Load.CHQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Load_HCS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Load.HCS) */ {
 public:
  inline Message_Config_Load_HCS() : Message_Config_Load_HCS(nullptr) {}
  virtual ~Message_Config_Load_HCS();

  Message_Config_Load_HCS(const Message_Config_Load_HCS& from);
  Message_Config_Load_HCS(Message_Config_Load_HCS&& from) noexcept
    : Message_Config_Load_HCS() {
    *this = ::std::move(from);
  }

  inline Message_Config_Load_HCS& operator=(const Message_Config_Load_HCS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Load_HCS& operator=(Message_Config_Load_HCS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Load_HCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Load_HCS* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Load_HCS*>(
               &_Message_Config_Load_HCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Message_Config_Load_HCS& a, Message_Config_Load_HCS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Load_HCS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Load_HCS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Load_HCS* New() const final {
    return CreateMaybeMessage<Message_Config_Load_HCS>(nullptr);
  }

  Message_Config_Load_HCS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Load_HCS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Load_HCS& from);
  void MergeFrom(const Message_Config_Load_HCS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Load_HCS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Load.HCS";
  }
  protected:
  explicit Message_Config_Load_HCS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Load.HCS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Load) */ {
 public:
  inline Message_Config_Load() : Message_Config_Load(nullptr) {}
  virtual ~Message_Config_Load();

  Message_Config_Load(const Message_Config_Load& from);
  Message_Config_Load(Message_Config_Load&& from) noexcept
    : Message_Config_Load() {
    *this = ::std::move(from);
  }

  inline Message_Config_Load& operator=(const Message_Config_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Load& operator=(Message_Config_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Load& default_instance();

  enum FoobarCase {
    kMsq = 1,
    kSms = 2,
    kChq = 3,
    kHcs = 4,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Load* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Load*>(
               &_Message_Config_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Message_Config_Load& a, Message_Config_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Load* New() const final {
    return CreateMaybeMessage<Message_Config_Load>(nullptr);
  }

  Message_Config_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Load& from);
  void MergeFrom(const Message_Config_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Load";
  }
  protected:
  explicit Message_Config_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Config_Load_MSQ MSQ;
  typedef Message_Config_Load_SMS SMS;
  typedef Message_Config_Load_CHQ CHQ;
  typedef Message_Config_Load_HCS HCS;

  // accessors -------------------------------------------------------

  enum : int {
    kMsqFieldNumber = 1,
    kSmsFieldNumber = 2,
    kChqFieldNumber = 3,
    kHcsFieldNumber = 4,
  };
  // .megastructure.Message.Config.Load.MSQ msq = 1;
  bool has_msq() const;
  private:
  bool _internal_has_msq() const;
  public:
  void clear_msq();
  const ::megastructure::Message_Config_Load_MSQ& msq() const;
  ::megastructure::Message_Config_Load_MSQ* release_msq();
  ::megastructure::Message_Config_Load_MSQ* mutable_msq();
  void set_allocated_msq(::megastructure::Message_Config_Load_MSQ* msq);
  private:
  const ::megastructure::Message_Config_Load_MSQ& _internal_msq() const;
  ::megastructure::Message_Config_Load_MSQ* _internal_mutable_msq();
  public:
  void unsafe_arena_set_allocated_msq(
      ::megastructure::Message_Config_Load_MSQ* msq);
  ::megastructure::Message_Config_Load_MSQ* unsafe_arena_release_msq();

  // .megastructure.Message.Config.Load.SMS sms = 2;
  bool has_sms() const;
  private:
  bool _internal_has_sms() const;
  public:
  void clear_sms();
  const ::megastructure::Message_Config_Load_SMS& sms() const;
  ::megastructure::Message_Config_Load_SMS* release_sms();
  ::megastructure::Message_Config_Load_SMS* mutable_sms();
  void set_allocated_sms(::megastructure::Message_Config_Load_SMS* sms);
  private:
  const ::megastructure::Message_Config_Load_SMS& _internal_sms() const;
  ::megastructure::Message_Config_Load_SMS* _internal_mutable_sms();
  public:
  void unsafe_arena_set_allocated_sms(
      ::megastructure::Message_Config_Load_SMS* sms);
  ::megastructure::Message_Config_Load_SMS* unsafe_arena_release_sms();

  // .megastructure.Message.Config.Load.CHQ chq = 3;
  bool has_chq() const;
  private:
  bool _internal_has_chq() const;
  public:
  void clear_chq();
  const ::megastructure::Message_Config_Load_CHQ& chq() const;
  ::megastructure::Message_Config_Load_CHQ* release_chq();
  ::megastructure::Message_Config_Load_CHQ* mutable_chq();
  void set_allocated_chq(::megastructure::Message_Config_Load_CHQ* chq);
  private:
  const ::megastructure::Message_Config_Load_CHQ& _internal_chq() const;
  ::megastructure::Message_Config_Load_CHQ* _internal_mutable_chq();
  public:
  void unsafe_arena_set_allocated_chq(
      ::megastructure::Message_Config_Load_CHQ* chq);
  ::megastructure::Message_Config_Load_CHQ* unsafe_arena_release_chq();

  // .megastructure.Message.Config.Load.HCS hcs = 4;
  bool has_hcs() const;
  private:
  bool _internal_has_hcs() const;
  public:
  void clear_hcs();
  const ::megastructure::Message_Config_Load_HCS& hcs() const;
  ::megastructure::Message_Config_Load_HCS* release_hcs();
  ::megastructure::Message_Config_Load_HCS* mutable_hcs();
  void set_allocated_hcs(::megastructure::Message_Config_Load_HCS* hcs);
  private:
  const ::megastructure::Message_Config_Load_HCS& _internal_hcs() const;
  ::megastructure::Message_Config_Load_HCS* _internal_mutable_hcs();
  public:
  void unsafe_arena_set_allocated_hcs(
      ::megastructure::Message_Config_Load_HCS* hcs);
  ::megastructure::Message_Config_Load_HCS* unsafe_arena_release_hcs();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Load)
 private:
  class _Internal;
  void set_has_msq();
  void set_has_sms();
  void set_has_chq();
  void set_has_hcs();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_Config_Load_MSQ* msq_;
    ::megastructure::Message_Config_Load_SMS* sms_;
    ::megastructure::Message_Config_Load_CHQ* chq_;
    ::megastructure::Message_Config_Load_HCS* hcs_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Save_MSQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Save.MSQ) */ {
 public:
  inline Message_Config_Save_MSQ() : Message_Config_Save_MSQ(nullptr) {}
  virtual ~Message_Config_Save_MSQ();

  Message_Config_Save_MSQ(const Message_Config_Save_MSQ& from);
  Message_Config_Save_MSQ(Message_Config_Save_MSQ&& from) noexcept
    : Message_Config_Save_MSQ() {
    *this = ::std::move(from);
  }

  inline Message_Config_Save_MSQ& operator=(const Message_Config_Save_MSQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Save_MSQ& operator=(Message_Config_Save_MSQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Save_MSQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Save_MSQ* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Save_MSQ*>(
               &_Message_Config_Save_MSQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Message_Config_Save_MSQ& a, Message_Config_Save_MSQ& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Save_MSQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Save_MSQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Save_MSQ* New() const final {
    return CreateMaybeMessage<Message_Config_Save_MSQ>(nullptr);
  }

  Message_Config_Save_MSQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Save_MSQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Save_MSQ& from);
  void MergeFrom(const Message_Config_Save_MSQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Save_MSQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Save.MSQ";
  }
  protected:
  explicit Message_Config_Save_MSQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Save.MSQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Save_SMS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Save.SMS) */ {
 public:
  inline Message_Config_Save_SMS() : Message_Config_Save_SMS(nullptr) {}
  virtual ~Message_Config_Save_SMS();

  Message_Config_Save_SMS(const Message_Config_Save_SMS& from);
  Message_Config_Save_SMS(Message_Config_Save_SMS&& from) noexcept
    : Message_Config_Save_SMS() {
    *this = ::std::move(from);
  }

  inline Message_Config_Save_SMS& operator=(const Message_Config_Save_SMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Save_SMS& operator=(Message_Config_Save_SMS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Save_SMS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Save_SMS* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Save_SMS*>(
               &_Message_Config_Save_SMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Message_Config_Save_SMS& a, Message_Config_Save_SMS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Save_SMS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Save_SMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Save_SMS* New() const final {
    return CreateMaybeMessage<Message_Config_Save_SMS>(nullptr);
  }

  Message_Config_Save_SMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Save_SMS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Save_SMS& from);
  void MergeFrom(const Message_Config_Save_SMS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Save_SMS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Save.SMS";
  }
  protected:
  explicit Message_Config_Save_SMS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Save.SMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Save_CHQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Save.CHQ) */ {
 public:
  inline Message_Config_Save_CHQ() : Message_Config_Save_CHQ(nullptr) {}
  virtual ~Message_Config_Save_CHQ();

  Message_Config_Save_CHQ(const Message_Config_Save_CHQ& from);
  Message_Config_Save_CHQ(Message_Config_Save_CHQ&& from) noexcept
    : Message_Config_Save_CHQ() {
    *this = ::std::move(from);
  }

  inline Message_Config_Save_CHQ& operator=(const Message_Config_Save_CHQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Save_CHQ& operator=(Message_Config_Save_CHQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Save_CHQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Save_CHQ* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Save_CHQ*>(
               &_Message_Config_Save_CHQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Message_Config_Save_CHQ& a, Message_Config_Save_CHQ& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Save_CHQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Save_CHQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Save_CHQ* New() const final {
    return CreateMaybeMessage<Message_Config_Save_CHQ>(nullptr);
  }

  Message_Config_Save_CHQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Save_CHQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Save_CHQ& from);
  void MergeFrom(const Message_Config_Save_CHQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Save_CHQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Save.CHQ";
  }
  protected:
  explicit Message_Config_Save_CHQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Save.CHQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Save_HCS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Save.HCS) */ {
 public:
  inline Message_Config_Save_HCS() : Message_Config_Save_HCS(nullptr) {}
  virtual ~Message_Config_Save_HCS();

  Message_Config_Save_HCS(const Message_Config_Save_HCS& from);
  Message_Config_Save_HCS(Message_Config_Save_HCS&& from) noexcept
    : Message_Config_Save_HCS() {
    *this = ::std::move(from);
  }

  inline Message_Config_Save_HCS& operator=(const Message_Config_Save_HCS& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Save_HCS& operator=(Message_Config_Save_HCS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Save_HCS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Save_HCS* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Save_HCS*>(
               &_Message_Config_Save_HCS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Message_Config_Save_HCS& a, Message_Config_Save_HCS& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Save_HCS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Save_HCS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Save_HCS* New() const final {
    return CreateMaybeMessage<Message_Config_Save_HCS>(nullptr);
  }

  Message_Config_Save_HCS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Save_HCS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Save_HCS& from);
  void MergeFrom(const Message_Config_Save_HCS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Save_HCS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Save.HCS";
  }
  protected:
  explicit Message_Config_Save_HCS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Save.HCS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config_Save PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config.Save) */ {
 public:
  inline Message_Config_Save() : Message_Config_Save(nullptr) {}
  virtual ~Message_Config_Save();

  Message_Config_Save(const Message_Config_Save& from);
  Message_Config_Save(Message_Config_Save&& from) noexcept
    : Message_Config_Save() {
    *this = ::std::move(from);
  }

  inline Message_Config_Save& operator=(const Message_Config_Save& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config_Save& operator=(Message_Config_Save&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config_Save& default_instance();

  enum FoobarCase {
    kMsq = 1,
    kSms = 2,
    kChq = 3,
    kHcs = 4,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config_Save* internal_default_instance() {
    return reinterpret_cast<const Message_Config_Save*>(
               &_Message_Config_Save_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Message_Config_Save& a, Message_Config_Save& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config_Save* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config_Save* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config_Save* New() const final {
    return CreateMaybeMessage<Message_Config_Save>(nullptr);
  }

  Message_Config_Save* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config_Save>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config_Save& from);
  void MergeFrom(const Message_Config_Save& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config_Save* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config.Save";
  }
  protected:
  explicit Message_Config_Save(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Config_Save_MSQ MSQ;
  typedef Message_Config_Save_SMS SMS;
  typedef Message_Config_Save_CHQ CHQ;
  typedef Message_Config_Save_HCS HCS;

  // accessors -------------------------------------------------------

  enum : int {
    kMsqFieldNumber = 1,
    kSmsFieldNumber = 2,
    kChqFieldNumber = 3,
    kHcsFieldNumber = 4,
  };
  // .megastructure.Message.Config.Save.MSQ msq = 1;
  bool has_msq() const;
  private:
  bool _internal_has_msq() const;
  public:
  void clear_msq();
  const ::megastructure::Message_Config_Save_MSQ& msq() const;
  ::megastructure::Message_Config_Save_MSQ* release_msq();
  ::megastructure::Message_Config_Save_MSQ* mutable_msq();
  void set_allocated_msq(::megastructure::Message_Config_Save_MSQ* msq);
  private:
  const ::megastructure::Message_Config_Save_MSQ& _internal_msq() const;
  ::megastructure::Message_Config_Save_MSQ* _internal_mutable_msq();
  public:
  void unsafe_arena_set_allocated_msq(
      ::megastructure::Message_Config_Save_MSQ* msq);
  ::megastructure::Message_Config_Save_MSQ* unsafe_arena_release_msq();

  // .megastructure.Message.Config.Save.SMS sms = 2;
  bool has_sms() const;
  private:
  bool _internal_has_sms() const;
  public:
  void clear_sms();
  const ::megastructure::Message_Config_Save_SMS& sms() const;
  ::megastructure::Message_Config_Save_SMS* release_sms();
  ::megastructure::Message_Config_Save_SMS* mutable_sms();
  void set_allocated_sms(::megastructure::Message_Config_Save_SMS* sms);
  private:
  const ::megastructure::Message_Config_Save_SMS& _internal_sms() const;
  ::megastructure::Message_Config_Save_SMS* _internal_mutable_sms();
  public:
  void unsafe_arena_set_allocated_sms(
      ::megastructure::Message_Config_Save_SMS* sms);
  ::megastructure::Message_Config_Save_SMS* unsafe_arena_release_sms();

  // .megastructure.Message.Config.Save.CHQ chq = 3;
  bool has_chq() const;
  private:
  bool _internal_has_chq() const;
  public:
  void clear_chq();
  const ::megastructure::Message_Config_Save_CHQ& chq() const;
  ::megastructure::Message_Config_Save_CHQ* release_chq();
  ::megastructure::Message_Config_Save_CHQ* mutable_chq();
  void set_allocated_chq(::megastructure::Message_Config_Save_CHQ* chq);
  private:
  const ::megastructure::Message_Config_Save_CHQ& _internal_chq() const;
  ::megastructure::Message_Config_Save_CHQ* _internal_mutable_chq();
  public:
  void unsafe_arena_set_allocated_chq(
      ::megastructure::Message_Config_Save_CHQ* chq);
  ::megastructure::Message_Config_Save_CHQ* unsafe_arena_release_chq();

  // .megastructure.Message.Config.Save.HCS hcs = 4;
  bool has_hcs() const;
  private:
  bool _internal_has_hcs() const;
  public:
  void clear_hcs();
  const ::megastructure::Message_Config_Save_HCS& hcs() const;
  ::megastructure::Message_Config_Save_HCS* release_hcs();
  ::megastructure::Message_Config_Save_HCS* mutable_hcs();
  void set_allocated_hcs(::megastructure::Message_Config_Save_HCS* hcs);
  private:
  const ::megastructure::Message_Config_Save_HCS& _internal_hcs() const;
  ::megastructure::Message_Config_Save_HCS* _internal_mutable_hcs();
  public:
  void unsafe_arena_set_allocated_hcs(
      ::megastructure::Message_Config_Save_HCS* hcs);
  ::megastructure::Message_Config_Save_HCS* unsafe_arena_release_hcs();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message.Config.Save)
 private:
  class _Internal;
  void set_has_msq();
  void set_has_sms();
  void set_has_chq();
  void set_has_hcs();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_Config_Save_MSQ* msq_;
    ::megastructure::Message_Config_Save_SMS* sms_;
    ::megastructure::Message_Config_Save_CHQ* chq_;
    ::megastructure::Message_Config_Save_HCS* hcs_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_Config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.Config) */ {
 public:
  inline Message_Config() : Message_Config(nullptr) {}
  virtual ~Message_Config();

  Message_Config(const Message_Config& from);
  Message_Config(Message_Config&& from) noexcept
    : Message_Config() {
    *this = ::std::move(from);
  }

  inline Message_Config& operator=(const Message_Config& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_Config& operator=(Message_Config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_Config& default_instance();

  enum FoobarCase {
    kLoad = 1,
    kSave = 2,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_Config* internal_default_instance() {
    return reinterpret_cast<const Message_Config*>(
               &_Message_Config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(Message_Config& a, Message_Config& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_Config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_Config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_Config* New() const final {
    return CreateMaybeMessage<Message_Config>(nullptr);
  }

  Message_Config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_Config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_Config& from);
  void MergeFrom(const Message_Config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_Config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.Config";
  }
  protected:
  explicit Message_Config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_Config_Load Load;
  typedef Message_Config_Save Save;

  // accessors -------------------------------------------------------

  enum : int {
    kLoadFieldNumber = 1,
    kSaveFieldNumber = 2,
  };
  // .megastructure.Message.Config.Load load = 1;
  bool has_load() const;
  private:
  bool _internal_has_load() const;
  public:
  void clear_load();
  const ::megastructure::Message_Config_Load& load() const;
  ::megastructure::Message_Config_Load* release_load();
  ::megastructure::Message_Config_Load* mutable_load();
  void set_allocated_load(::megastructure::Message_Config_Load* load);
  private:
  const ::megastructure::Message_Config_Load& _internal_load() const;
  ::megastructure::Message_Config_Load* _internal_mutable_load();
  public:
  void unsafe_arena_set_allocated_load(
      ::megastructure::Message_Config_Load* load);
  ::megastructure::Message_Config_Load* unsafe_arena_release_load();

  // .megastructure.Message.Config.Save save = 2;
  bool has_save() const;
  private:
  bool _internal_has_save() const;
  public:
  void clear_save();
  const ::megastructure::Message_Config_Save& save() const;
  ::megastructure::Message_Config_Save* release_save();
  ::megastructure::Message_Config_Save* mutable_save();
  void set_allocated_save(::megastructure::Message_Config_Save* save);
  private:
  const ::megastructure::Message_Config_Save& _internal_save() const;
  ::megastructure::Message_Config_Save* _internal_mutable_save();
  public:
  void unsafe_arena_set_allocated_save(
      ::megastructure::Message_Config_Save* save);
  ::megastructure::Message_Config_Save* unsafe_arena_release_save();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message.Config)
 private:
  class _Internal;
  void set_has_load();
  void set_has_save();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_Config_Load* load_;
    ::megastructure::Message_Config_Save* save_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Request_Read PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Request.Read) */ {
 public:
  inline Message_EG_Msg_Request_Read() : Message_EG_Msg_Request_Read(nullptr) {}
  virtual ~Message_EG_Msg_Request_Read();

  Message_EG_Msg_Request_Read(const Message_EG_Msg_Request_Read& from);
  Message_EG_Msg_Request_Read(Message_EG_Msg_Request_Read&& from) noexcept
    : Message_EG_Msg_Request_Read() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Request_Read& operator=(const Message_EG_Msg_Request_Read& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Request_Read& operator=(Message_EG_Msg_Request_Read&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Request_Read& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Request_Read* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Request_Read*>(
               &_Message_EG_Msg_Request_Read_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Message_EG_Msg_Request_Read& a, Message_EG_Msg_Request_Read& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Request_Read* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Request_Read* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Request_Read* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Read>(nullptr);
  }

  Message_EG_Msg_Request_Read* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Read>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Request_Read& from);
  void MergeFrom(const Message_EG_Msg_Request_Read& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Request_Read* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Request.Read";
  }
  protected:
  explicit Message_EG_Msg_Request_Read(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Request.Read)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Request_Write PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Request.Write) */ {
 public:
  inline Message_EG_Msg_Request_Write() : Message_EG_Msg_Request_Write(nullptr) {}
  virtual ~Message_EG_Msg_Request_Write();

  Message_EG_Msg_Request_Write(const Message_EG_Msg_Request_Write& from);
  Message_EG_Msg_Request_Write(Message_EG_Msg_Request_Write&& from) noexcept
    : Message_EG_Msg_Request_Write() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Request_Write& operator=(const Message_EG_Msg_Request_Write& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Request_Write& operator=(Message_EG_Msg_Request_Write&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Request_Write& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Request_Write* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Request_Write*>(
               &_Message_EG_Msg_Request_Write_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Message_EG_Msg_Request_Write& a, Message_EG_Msg_Request_Write& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Request_Write* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Request_Write* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Request_Write* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Write>(nullptr);
  }

  Message_EG_Msg_Request_Write* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Write>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Request_Write& from);
  void MergeFrom(const Message_EG_Msg_Request_Write& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Request_Write* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Request.Write";
  }
  protected:
  explicit Message_EG_Msg_Request_Write(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Request.Write)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Request_Lock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Request.Lock) */ {
 public:
  inline Message_EG_Msg_Request_Lock() : Message_EG_Msg_Request_Lock(nullptr) {}
  virtual ~Message_EG_Msg_Request_Lock();

  Message_EG_Msg_Request_Lock(const Message_EG_Msg_Request_Lock& from);
  Message_EG_Msg_Request_Lock(Message_EG_Msg_Request_Lock&& from) noexcept
    : Message_EG_Msg_Request_Lock() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Request_Lock& operator=(const Message_EG_Msg_Request_Lock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Request_Lock& operator=(Message_EG_Msg_Request_Lock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Request_Lock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Request_Lock* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Request_Lock*>(
               &_Message_EG_Msg_Request_Lock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Message_EG_Msg_Request_Lock& a, Message_EG_Msg_Request_Lock& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Request_Lock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Request_Lock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Request_Lock* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Lock>(nullptr);
  }

  Message_EG_Msg_Request_Lock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Lock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Request_Lock& from);
  void MergeFrom(const Message_EG_Msg_Request_Lock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Request_Lock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Request.Lock";
  }
  protected:
  explicit Message_EG_Msg_Request_Lock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadFieldNumber = 1,
  };
  // bool read = 1;
  void clear_read();
  bool read() const;
  void set_read(bool value);
  private:
  bool _internal_read() const;
  void _internal_set_read(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Request.Lock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool read_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Request_Unlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Request.Unlock) */ {
 public:
  inline Message_EG_Msg_Request_Unlock() : Message_EG_Msg_Request_Unlock(nullptr) {}
  virtual ~Message_EG_Msg_Request_Unlock();

  Message_EG_Msg_Request_Unlock(const Message_EG_Msg_Request_Unlock& from);
  Message_EG_Msg_Request_Unlock(Message_EG_Msg_Request_Unlock&& from) noexcept
    : Message_EG_Msg_Request_Unlock() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Request_Unlock& operator=(const Message_EG_Msg_Request_Unlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Request_Unlock& operator=(Message_EG_Msg_Request_Unlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Request_Unlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Request_Unlock* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Request_Unlock*>(
               &_Message_EG_Msg_Request_Unlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Message_EG_Msg_Request_Unlock& a, Message_EG_Msg_Request_Unlock& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Request_Unlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Request_Unlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Request_Unlock* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Unlock>(nullptr);
  }

  Message_EG_Msg_Request_Unlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Request_Unlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Request_Unlock& from);
  void MergeFrom(const Message_EG_Msg_Request_Unlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Request_Unlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Request.Unlock";
  }
  protected:
  explicit Message_EG_Msg_Request_Unlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Request.Unlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Request) */ {
 public:
  inline Message_EG_Msg_Request() : Message_EG_Msg_Request(nullptr) {}
  virtual ~Message_EG_Msg_Request();

  Message_EG_Msg_Request(const Message_EG_Msg_Request& from);
  Message_EG_Msg_Request(Message_EG_Msg_Request&& from) noexcept
    : Message_EG_Msg_Request() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Request& operator=(const Message_EG_Msg_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Request& operator=(Message_EG_Msg_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Request& default_instance();

  enum FoobarCase {
    kRead = 3,
    kWrite = 4,
    kLock = 6,
    kUnlock = 7,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Request* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Request*>(
               &_Message_EG_Msg_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Message_EG_Msg_Request& a, Message_EG_Msg_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Request* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Request>(nullptr);
  }

  Message_EG_Msg_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Request& from);
  void MergeFrom(const Message_EG_Msg_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Request";
  }
  protected:
  explicit Message_EG_Msg_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_EG_Msg_Request_Read Read;
  typedef Message_EG_Msg_Request_Write Write;
  typedef Message_EG_Msg_Request_Lock Lock;
  typedef Message_EG_Msg_Request_Unlock Unlock;

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatorFieldNumber = 1,
    kHostFieldNumber = 2,
    kReadFieldNumber = 3,
    kWriteFieldNumber = 4,
    kLockFieldNumber = 6,
    kUnlockFieldNumber = 7,
  };
  // uint32 coordinator = 1;
  void clear_coordinator();
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator() const;
  void set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coordinator() const;
  void _internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 host = 2;
  void clear_host();
  ::PROTOBUF_NAMESPACE_ID::uint32 host() const;
  void set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host() const;
  void _internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .megastructure.Message.EG_Msg.Request.Read read = 3;
  bool has_read() const;
  private:
  bool _internal_has_read() const;
  public:
  void clear_read();
  const ::megastructure::Message_EG_Msg_Request_Read& read() const;
  ::megastructure::Message_EG_Msg_Request_Read* release_read();
  ::megastructure::Message_EG_Msg_Request_Read* mutable_read();
  void set_allocated_read(::megastructure::Message_EG_Msg_Request_Read* read);
  private:
  const ::megastructure::Message_EG_Msg_Request_Read& _internal_read() const;
  ::megastructure::Message_EG_Msg_Request_Read* _internal_mutable_read();
  public:
  void unsafe_arena_set_allocated_read(
      ::megastructure::Message_EG_Msg_Request_Read* read);
  ::megastructure::Message_EG_Msg_Request_Read* unsafe_arena_release_read();

  // .megastructure.Message.EG_Msg.Request.Write write = 4;
  bool has_write() const;
  private:
  bool _internal_has_write() const;
  public:
  void clear_write();
  const ::megastructure::Message_EG_Msg_Request_Write& write() const;
  ::megastructure::Message_EG_Msg_Request_Write* release_write();
  ::megastructure::Message_EG_Msg_Request_Write* mutable_write();
  void set_allocated_write(::megastructure::Message_EG_Msg_Request_Write* write);
  private:
  const ::megastructure::Message_EG_Msg_Request_Write& _internal_write() const;
  ::megastructure::Message_EG_Msg_Request_Write* _internal_mutable_write();
  public:
  void unsafe_arena_set_allocated_write(
      ::megastructure::Message_EG_Msg_Request_Write* write);
  ::megastructure::Message_EG_Msg_Request_Write* unsafe_arena_release_write();

  // .megastructure.Message.EG_Msg.Request.Lock lock = 6;
  bool has_lock() const;
  private:
  bool _internal_has_lock() const;
  public:
  void clear_lock();
  const ::megastructure::Message_EG_Msg_Request_Lock& lock() const;
  ::megastructure::Message_EG_Msg_Request_Lock* release_lock();
  ::megastructure::Message_EG_Msg_Request_Lock* mutable_lock();
  void set_allocated_lock(::megastructure::Message_EG_Msg_Request_Lock* lock);
  private:
  const ::megastructure::Message_EG_Msg_Request_Lock& _internal_lock() const;
  ::megastructure::Message_EG_Msg_Request_Lock* _internal_mutable_lock();
  public:
  void unsafe_arena_set_allocated_lock(
      ::megastructure::Message_EG_Msg_Request_Lock* lock);
  ::megastructure::Message_EG_Msg_Request_Lock* unsafe_arena_release_lock();

  // .megastructure.Message.EG_Msg.Request.Unlock unlock = 7;
  bool has_unlock() const;
  private:
  bool _internal_has_unlock() const;
  public:
  void clear_unlock();
  const ::megastructure::Message_EG_Msg_Request_Unlock& unlock() const;
  ::megastructure::Message_EG_Msg_Request_Unlock* release_unlock();
  ::megastructure::Message_EG_Msg_Request_Unlock* mutable_unlock();
  void set_allocated_unlock(::megastructure::Message_EG_Msg_Request_Unlock* unlock);
  private:
  const ::megastructure::Message_EG_Msg_Request_Unlock& _internal_unlock() const;
  ::megastructure::Message_EG_Msg_Request_Unlock* _internal_mutable_unlock();
  public:
  void unsafe_arena_set_allocated_unlock(
      ::megastructure::Message_EG_Msg_Request_Unlock* unlock);
  ::megastructure::Message_EG_Msg_Request_Unlock* unsafe_arena_release_unlock();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Request)
 private:
  class _Internal;
  void set_has_read();
  void set_has_write();
  void set_has_lock();
  void set_has_unlock();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_EG_Msg_Request_Read* read_;
    ::megastructure::Message_EG_Msg_Request_Write* write_;
    ::megastructure::Message_EG_Msg_Request_Lock* lock_;
    ::megastructure::Message_EG_Msg_Request_Unlock* unlock_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Response) */ {
 public:
  inline Message_EG_Msg_Response() : Message_EG_Msg_Response(nullptr) {}
  virtual ~Message_EG_Msg_Response();

  Message_EG_Msg_Response(const Message_EG_Msg_Response& from);
  Message_EG_Msg_Response(Message_EG_Msg_Response&& from) noexcept
    : Message_EG_Msg_Response() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Response& operator=(const Message_EG_Msg_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Response& operator=(Message_EG_Msg_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Response* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Response*>(
               &_Message_EG_Msg_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(Message_EG_Msg_Response& a, Message_EG_Msg_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Response* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Response>(nullptr);
  }

  Message_EG_Msg_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Response& from);
  void MergeFrom(const Message_EG_Msg_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Response";
  }
  protected:
  explicit Message_EG_Msg_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kCoordinatorFieldNumber = 1,
    kHostFieldNumber = 2,
  };
  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // uint32 coordinator = 1;
  void clear_coordinator();
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator() const;
  void set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coordinator() const;
  void _internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 host = 2;
  void clear_host();
  ::PROTOBUF_NAMESPACE_ID::uint32 host() const;
  void set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host() const;
  void _internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Error PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Error) */ {
 public:
  inline Message_EG_Msg_Error() : Message_EG_Msg_Error(nullptr) {}
  virtual ~Message_EG_Msg_Error();

  Message_EG_Msg_Error(const Message_EG_Msg_Error& from);
  Message_EG_Msg_Error(Message_EG_Msg_Error&& from) noexcept
    : Message_EG_Msg_Error() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Error& operator=(const Message_EG_Msg_Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Error& operator=(Message_EG_Msg_Error&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Error* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Error*>(
               &_Message_EG_Msg_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Message_EG_Msg_Error& a, Message_EG_Msg_Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Error* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Error* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Error>(nullptr);
  }

  Message_EG_Msg_Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Error>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Error& from);
  void MergeFrom(const Message_EG_Msg_Error& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Error* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Error";
  }
  protected:
  explicit Message_EG_Msg_Error(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoordinatorFieldNumber = 1,
    kHostFieldNumber = 2,
  };
  // uint32 coordinator = 1;
  void clear_coordinator();
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator() const;
  void set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_coordinator() const;
  void _internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 host = 2;
  void clear_host();
  ::PROTOBUF_NAMESPACE_ID::uint32 host() const;
  void set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_host() const;
  void _internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 coordinator_;
  ::PROTOBUF_NAMESPACE_ID::uint32 host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg_Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg.Event) */ {
 public:
  inline Message_EG_Msg_Event() : Message_EG_Msg_Event(nullptr) {}
  virtual ~Message_EG_Msg_Event();

  Message_EG_Msg_Event(const Message_EG_Msg_Event& from);
  Message_EG_Msg_Event(Message_EG_Msg_Event&& from) noexcept
    : Message_EG_Msg_Event() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg_Event& operator=(const Message_EG_Msg_Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg_Event& operator=(Message_EG_Msg_Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg_Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg_Event* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg_Event*>(
               &_Message_EG_Msg_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Message_EG_Msg_Event& a, Message_EG_Msg_Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg_Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg_Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg_Event* New() const final {
    return CreateMaybeMessage<Message_EG_Msg_Event>(nullptr);
  }

  Message_EG_Msg_Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg_Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg_Event& from);
  void MergeFrom(const Message_EG_Msg_Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg_Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg.Event";
  }
  protected:
  explicit Message_EG_Msg_Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_EG_Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.EG_Msg) */ {
 public:
  inline Message_EG_Msg() : Message_EG_Msg(nullptr) {}
  virtual ~Message_EG_Msg();

  Message_EG_Msg(const Message_EG_Msg& from);
  Message_EG_Msg(Message_EG_Msg&& from) noexcept
    : Message_EG_Msg() {
    *this = ::std::move(from);
  }

  inline Message_EG_Msg& operator=(const Message_EG_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_EG_Msg& operator=(Message_EG_Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_EG_Msg& default_instance();

  enum FoobarCase {
    kRequest = 4,
    kResponse = 5,
    kError = 6,
    kEvent = 7,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_EG_Msg* internal_default_instance() {
    return reinterpret_cast<const Message_EG_Msg*>(
               &_Message_EG_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Message_EG_Msg& a, Message_EG_Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_EG_Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_EG_Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_EG_Msg* New() const final {
    return CreateMaybeMessage<Message_EG_Msg>(nullptr);
  }

  Message_EG_Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_EG_Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_EG_Msg& from);
  void MergeFrom(const Message_EG_Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_EG_Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.EG_Msg";
  }
  protected:
  explicit Message_EG_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_EG_Msg_Request Request;
  typedef Message_EG_Msg_Response Response;
  typedef Message_EG_Msg_Error Error;
  typedef Message_EG_Msg_Event Event;

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kInstanceFieldNumber = 2,
    kCycleFieldNumber = 3,
    kRequestFieldNumber = 4,
    kResponseFieldNumber = 5,
    kErrorFieldNumber = 6,
    kEventFieldNumber = 7,
  };
  // int32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 instance = 2;
  void clear_instance();
  ::PROTOBUF_NAMESPACE_ID::uint32 instance() const;
  void set_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_instance() const;
  void _internal_set_instance(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cycle = 3;
  void clear_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle() const;
  void set_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cycle() const;
  void _internal_set_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .megastructure.Message.EG_Msg.Request request = 4;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::megastructure::Message_EG_Msg_Request& request() const;
  ::megastructure::Message_EG_Msg_Request* release_request();
  ::megastructure::Message_EG_Msg_Request* mutable_request();
  void set_allocated_request(::megastructure::Message_EG_Msg_Request* request);
  private:
  const ::megastructure::Message_EG_Msg_Request& _internal_request() const;
  ::megastructure::Message_EG_Msg_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::megastructure::Message_EG_Msg_Request* request);
  ::megastructure::Message_EG_Msg_Request* unsafe_arena_release_request();

  // .megastructure.Message.EG_Msg.Response response = 5;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::megastructure::Message_EG_Msg_Response& response() const;
  ::megastructure::Message_EG_Msg_Response* release_response();
  ::megastructure::Message_EG_Msg_Response* mutable_response();
  void set_allocated_response(::megastructure::Message_EG_Msg_Response* response);
  private:
  const ::megastructure::Message_EG_Msg_Response& _internal_response() const;
  ::megastructure::Message_EG_Msg_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::megastructure::Message_EG_Msg_Response* response);
  ::megastructure::Message_EG_Msg_Response* unsafe_arena_release_response();

  // .megastructure.Message.EG_Msg.Error error = 6;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::megastructure::Message_EG_Msg_Error& error() const;
  ::megastructure::Message_EG_Msg_Error* release_error();
  ::megastructure::Message_EG_Msg_Error* mutable_error();
  void set_allocated_error(::megastructure::Message_EG_Msg_Error* error);
  private:
  const ::megastructure::Message_EG_Msg_Error& _internal_error() const;
  ::megastructure::Message_EG_Msg_Error* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::megastructure::Message_EG_Msg_Error* error);
  ::megastructure::Message_EG_Msg_Error* unsafe_arena_release_error();

  // .megastructure.Message.EG_Msg.Event event = 7;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::megastructure::Message_EG_Msg_Event& event() const;
  ::megastructure::Message_EG_Msg_Event* release_event();
  ::megastructure::Message_EG_Msg_Event* mutable_event();
  void set_allocated_event(::megastructure::Message_EG_Msg_Event* event);
  private:
  const ::megastructure::Message_EG_Msg_Event& _internal_event() const;
  ::megastructure::Message_EG_Msg_Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::megastructure::Message_EG_Msg_Event* event);
  ::megastructure::Message_EG_Msg_Event* unsafe_arena_release_event();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message.EG_Msg)
 private:
  class _Internal;
  void set_has_request();
  void set_has_response();
  void set_has_error();
  void set_has_event();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 instance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cycle_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_EG_Msg_Request* request_;
    ::megastructure::Message_EG_Msg_Response* response_;
    ::megastructure::Message_EG_Msg_Error* error_;
    ::megastructure::Message_EG_Msg_Event* event_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum FoobarCase {
    kSmqEnroll = 2,
    kMssEnroll = 3,
    kMsqAlive = 4,
    kSmsAlive = 5,
    kHcqEnroll = 6,
    kChsEnroll = 7,
    kHcqEnrolleg = 8,
    kChsEnrolleg = 9,
    kChqAlive = 10,
    kHcsAlive = 11,
    kMsqLoad = 12,
    kSmsLoad = 13,
    kChqLoad = 14,
    kHcsLoad = 15,
    kHcqBuffer = 16,
    kChsBuffer = 17,
    kConfigMsg = 18,
    kEgMsg = 19,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_SMQ_Enroll SMQ_Enroll;
  typedef Message_MSS_Enroll MSS_Enroll;
  typedef Message_MSQ_Alive MSQ_Alive;
  typedef Message_SMS_Alive SMS_Alive;
  typedef Message_HCQ_Enroll HCQ_Enroll;
  typedef Message_CHS_Enroll CHS_Enroll;
  typedef Message_HCQ_EnrollEG HCQ_EnrollEG;
  typedef Message_CHS_EnrollEG CHS_EnrollEG;
  typedef Message_CHQ_Alive CHQ_Alive;
  typedef Message_HCS_Alive HCS_Alive;
  typedef Message_MSQ_Load MSQ_Load;
  typedef Message_SMS_Load SMS_Load;
  typedef Message_CHQ_Load CHQ_Load;
  typedef Message_HCS_Load HCS_Load;
  typedef Message_HCQ_Buffer HCQ_Buffer;
  typedef Message_CHS_Buffer CHS_Buffer;
  typedef Message_Config Config;
  typedef Message_EG_Msg EG_Msg;

  // accessors -------------------------------------------------------

  enum : int {
    kSmqEnrollFieldNumber = 2,
    kMssEnrollFieldNumber = 3,
    kMsqAliveFieldNumber = 4,
    kSmsAliveFieldNumber = 5,
    kHcqEnrollFieldNumber = 6,
    kChsEnrollFieldNumber = 7,
    kHcqEnrollegFieldNumber = 8,
    kChsEnrollegFieldNumber = 9,
    kChqAliveFieldNumber = 10,
    kHcsAliveFieldNumber = 11,
    kMsqLoadFieldNumber = 12,
    kSmsLoadFieldNumber = 13,
    kChqLoadFieldNumber = 14,
    kHcsLoadFieldNumber = 15,
    kHcqBufferFieldNumber = 16,
    kChsBufferFieldNumber = 17,
    kConfigMsgFieldNumber = 18,
    kEgMsgFieldNumber = 19,
  };
  // .megastructure.Message.SMQ_Enroll smq_enroll = 2;
  bool has_smq_enroll() const;
  private:
  bool _internal_has_smq_enroll() const;
  public:
  void clear_smq_enroll();
  const ::megastructure::Message_SMQ_Enroll& smq_enroll() const;
  ::megastructure::Message_SMQ_Enroll* release_smq_enroll();
  ::megastructure::Message_SMQ_Enroll* mutable_smq_enroll();
  void set_allocated_smq_enroll(::megastructure::Message_SMQ_Enroll* smq_enroll);
  private:
  const ::megastructure::Message_SMQ_Enroll& _internal_smq_enroll() const;
  ::megastructure::Message_SMQ_Enroll* _internal_mutable_smq_enroll();
  public:
  void unsafe_arena_set_allocated_smq_enroll(
      ::megastructure::Message_SMQ_Enroll* smq_enroll);
  ::megastructure::Message_SMQ_Enroll* unsafe_arena_release_smq_enroll();

  // .megastructure.Message.MSS_Enroll mss_enroll = 3;
  bool has_mss_enroll() const;
  private:
  bool _internal_has_mss_enroll() const;
  public:
  void clear_mss_enroll();
  const ::megastructure::Message_MSS_Enroll& mss_enroll() const;
  ::megastructure::Message_MSS_Enroll* release_mss_enroll();
  ::megastructure::Message_MSS_Enroll* mutable_mss_enroll();
  void set_allocated_mss_enroll(::megastructure::Message_MSS_Enroll* mss_enroll);
  private:
  const ::megastructure::Message_MSS_Enroll& _internal_mss_enroll() const;
  ::megastructure::Message_MSS_Enroll* _internal_mutable_mss_enroll();
  public:
  void unsafe_arena_set_allocated_mss_enroll(
      ::megastructure::Message_MSS_Enroll* mss_enroll);
  ::megastructure::Message_MSS_Enroll* unsafe_arena_release_mss_enroll();

  // .megastructure.Message.MSQ_Alive msq_alive = 4;
  bool has_msq_alive() const;
  private:
  bool _internal_has_msq_alive() const;
  public:
  void clear_msq_alive();
  const ::megastructure::Message_MSQ_Alive& msq_alive() const;
  ::megastructure::Message_MSQ_Alive* release_msq_alive();
  ::megastructure::Message_MSQ_Alive* mutable_msq_alive();
  void set_allocated_msq_alive(::megastructure::Message_MSQ_Alive* msq_alive);
  private:
  const ::megastructure::Message_MSQ_Alive& _internal_msq_alive() const;
  ::megastructure::Message_MSQ_Alive* _internal_mutable_msq_alive();
  public:
  void unsafe_arena_set_allocated_msq_alive(
      ::megastructure::Message_MSQ_Alive* msq_alive);
  ::megastructure::Message_MSQ_Alive* unsafe_arena_release_msq_alive();

  // .megastructure.Message.SMS_Alive sms_alive = 5;
  bool has_sms_alive() const;
  private:
  bool _internal_has_sms_alive() const;
  public:
  void clear_sms_alive();
  const ::megastructure::Message_SMS_Alive& sms_alive() const;
  ::megastructure::Message_SMS_Alive* release_sms_alive();
  ::megastructure::Message_SMS_Alive* mutable_sms_alive();
  void set_allocated_sms_alive(::megastructure::Message_SMS_Alive* sms_alive);
  private:
  const ::megastructure::Message_SMS_Alive& _internal_sms_alive() const;
  ::megastructure::Message_SMS_Alive* _internal_mutable_sms_alive();
  public:
  void unsafe_arena_set_allocated_sms_alive(
      ::megastructure::Message_SMS_Alive* sms_alive);
  ::megastructure::Message_SMS_Alive* unsafe_arena_release_sms_alive();

  // .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
  bool has_hcq_enroll() const;
  private:
  bool _internal_has_hcq_enroll() const;
  public:
  void clear_hcq_enroll();
  const ::megastructure::Message_HCQ_Enroll& hcq_enroll() const;
  ::megastructure::Message_HCQ_Enroll* release_hcq_enroll();
  ::megastructure::Message_HCQ_Enroll* mutable_hcq_enroll();
  void set_allocated_hcq_enroll(::megastructure::Message_HCQ_Enroll* hcq_enroll);
  private:
  const ::megastructure::Message_HCQ_Enroll& _internal_hcq_enroll() const;
  ::megastructure::Message_HCQ_Enroll* _internal_mutable_hcq_enroll();
  public:
  void unsafe_arena_set_allocated_hcq_enroll(
      ::megastructure::Message_HCQ_Enroll* hcq_enroll);
  ::megastructure::Message_HCQ_Enroll* unsafe_arena_release_hcq_enroll();

  // .megastructure.Message.CHS_Enroll chs_enroll = 7;
  bool has_chs_enroll() const;
  private:
  bool _internal_has_chs_enroll() const;
  public:
  void clear_chs_enroll();
  const ::megastructure::Message_CHS_Enroll& chs_enroll() const;
  ::megastructure::Message_CHS_Enroll* release_chs_enroll();
  ::megastructure::Message_CHS_Enroll* mutable_chs_enroll();
  void set_allocated_chs_enroll(::megastructure::Message_CHS_Enroll* chs_enroll);
  private:
  const ::megastructure::Message_CHS_Enroll& _internal_chs_enroll() const;
  ::megastructure::Message_CHS_Enroll* _internal_mutable_chs_enroll();
  public:
  void unsafe_arena_set_allocated_chs_enroll(
      ::megastructure::Message_CHS_Enroll* chs_enroll);
  ::megastructure::Message_CHS_Enroll* unsafe_arena_release_chs_enroll();

  // .megastructure.Message.HCQ_EnrollEG hcq_enrolleg = 8;
  bool has_hcq_enrolleg() const;
  private:
  bool _internal_has_hcq_enrolleg() const;
  public:
  void clear_hcq_enrolleg();
  const ::megastructure::Message_HCQ_EnrollEG& hcq_enrolleg() const;
  ::megastructure::Message_HCQ_EnrollEG* release_hcq_enrolleg();
  ::megastructure::Message_HCQ_EnrollEG* mutable_hcq_enrolleg();
  void set_allocated_hcq_enrolleg(::megastructure::Message_HCQ_EnrollEG* hcq_enrolleg);
  private:
  const ::megastructure::Message_HCQ_EnrollEG& _internal_hcq_enrolleg() const;
  ::megastructure::Message_HCQ_EnrollEG* _internal_mutable_hcq_enrolleg();
  public:
  void unsafe_arena_set_allocated_hcq_enrolleg(
      ::megastructure::Message_HCQ_EnrollEG* hcq_enrolleg);
  ::megastructure::Message_HCQ_EnrollEG* unsafe_arena_release_hcq_enrolleg();

  // .megastructure.Message.CHS_EnrollEG chs_enrolleg = 9;
  bool has_chs_enrolleg() const;
  private:
  bool _internal_has_chs_enrolleg() const;
  public:
  void clear_chs_enrolleg();
  const ::megastructure::Message_CHS_EnrollEG& chs_enrolleg() const;
  ::megastructure::Message_CHS_EnrollEG* release_chs_enrolleg();
  ::megastructure::Message_CHS_EnrollEG* mutable_chs_enrolleg();
  void set_allocated_chs_enrolleg(::megastructure::Message_CHS_EnrollEG* chs_enrolleg);
  private:
  const ::megastructure::Message_CHS_EnrollEG& _internal_chs_enrolleg() const;
  ::megastructure::Message_CHS_EnrollEG* _internal_mutable_chs_enrolleg();
  public:
  void unsafe_arena_set_allocated_chs_enrolleg(
      ::megastructure::Message_CHS_EnrollEG* chs_enrolleg);
  ::megastructure::Message_CHS_EnrollEG* unsafe_arena_release_chs_enrolleg();

  // .megastructure.Message.CHQ_Alive chq_alive = 10;
  bool has_chq_alive() const;
  private:
  bool _internal_has_chq_alive() const;
  public:
  void clear_chq_alive();
  const ::megastructure::Message_CHQ_Alive& chq_alive() const;
  ::megastructure::Message_CHQ_Alive* release_chq_alive();
  ::megastructure::Message_CHQ_Alive* mutable_chq_alive();
  void set_allocated_chq_alive(::megastructure::Message_CHQ_Alive* chq_alive);
  private:
  const ::megastructure::Message_CHQ_Alive& _internal_chq_alive() const;
  ::megastructure::Message_CHQ_Alive* _internal_mutable_chq_alive();
  public:
  void unsafe_arena_set_allocated_chq_alive(
      ::megastructure::Message_CHQ_Alive* chq_alive);
  ::megastructure::Message_CHQ_Alive* unsafe_arena_release_chq_alive();

  // .megastructure.Message.HCS_Alive hcs_alive = 11;
  bool has_hcs_alive() const;
  private:
  bool _internal_has_hcs_alive() const;
  public:
  void clear_hcs_alive();
  const ::megastructure::Message_HCS_Alive& hcs_alive() const;
  ::megastructure::Message_HCS_Alive* release_hcs_alive();
  ::megastructure::Message_HCS_Alive* mutable_hcs_alive();
  void set_allocated_hcs_alive(::megastructure::Message_HCS_Alive* hcs_alive);
  private:
  const ::megastructure::Message_HCS_Alive& _internal_hcs_alive() const;
  ::megastructure::Message_HCS_Alive* _internal_mutable_hcs_alive();
  public:
  void unsafe_arena_set_allocated_hcs_alive(
      ::megastructure::Message_HCS_Alive* hcs_alive);
  ::megastructure::Message_HCS_Alive* unsafe_arena_release_hcs_alive();

  // .megastructure.Message.MSQ_Load msq_load = 12;
  bool has_msq_load() const;
  private:
  bool _internal_has_msq_load() const;
  public:
  void clear_msq_load();
  const ::megastructure::Message_MSQ_Load& msq_load() const;
  ::megastructure::Message_MSQ_Load* release_msq_load();
  ::megastructure::Message_MSQ_Load* mutable_msq_load();
  void set_allocated_msq_load(::megastructure::Message_MSQ_Load* msq_load);
  private:
  const ::megastructure::Message_MSQ_Load& _internal_msq_load() const;
  ::megastructure::Message_MSQ_Load* _internal_mutable_msq_load();
  public:
  void unsafe_arena_set_allocated_msq_load(
      ::megastructure::Message_MSQ_Load* msq_load);
  ::megastructure::Message_MSQ_Load* unsafe_arena_release_msq_load();

  // .megastructure.Message.SMS_Load sms_load = 13;
  bool has_sms_load() const;
  private:
  bool _internal_has_sms_load() const;
  public:
  void clear_sms_load();
  const ::megastructure::Message_SMS_Load& sms_load() const;
  ::megastructure::Message_SMS_Load* release_sms_load();
  ::megastructure::Message_SMS_Load* mutable_sms_load();
  void set_allocated_sms_load(::megastructure::Message_SMS_Load* sms_load);
  private:
  const ::megastructure::Message_SMS_Load& _internal_sms_load() const;
  ::megastructure::Message_SMS_Load* _internal_mutable_sms_load();
  public:
  void unsafe_arena_set_allocated_sms_load(
      ::megastructure::Message_SMS_Load* sms_load);
  ::megastructure::Message_SMS_Load* unsafe_arena_release_sms_load();

  // .megastructure.Message.CHQ_Load chq_load = 14;
  bool has_chq_load() const;
  private:
  bool _internal_has_chq_load() const;
  public:
  void clear_chq_load();
  const ::megastructure::Message_CHQ_Load& chq_load() const;
  ::megastructure::Message_CHQ_Load* release_chq_load();
  ::megastructure::Message_CHQ_Load* mutable_chq_load();
  void set_allocated_chq_load(::megastructure::Message_CHQ_Load* chq_load);
  private:
  const ::megastructure::Message_CHQ_Load& _internal_chq_load() const;
  ::megastructure::Message_CHQ_Load* _internal_mutable_chq_load();
  public:
  void unsafe_arena_set_allocated_chq_load(
      ::megastructure::Message_CHQ_Load* chq_load);
  ::megastructure::Message_CHQ_Load* unsafe_arena_release_chq_load();

  // .megastructure.Message.HCS_Load hcs_load = 15;
  bool has_hcs_load() const;
  private:
  bool _internal_has_hcs_load() const;
  public:
  void clear_hcs_load();
  const ::megastructure::Message_HCS_Load& hcs_load() const;
  ::megastructure::Message_HCS_Load* release_hcs_load();
  ::megastructure::Message_HCS_Load* mutable_hcs_load();
  void set_allocated_hcs_load(::megastructure::Message_HCS_Load* hcs_load);
  private:
  const ::megastructure::Message_HCS_Load& _internal_hcs_load() const;
  ::megastructure::Message_HCS_Load* _internal_mutable_hcs_load();
  public:
  void unsafe_arena_set_allocated_hcs_load(
      ::megastructure::Message_HCS_Load* hcs_load);
  ::megastructure::Message_HCS_Load* unsafe_arena_release_hcs_load();

  // .megastructure.Message.HCQ_Buffer hcq_buffer = 16;
  bool has_hcq_buffer() const;
  private:
  bool _internal_has_hcq_buffer() const;
  public:
  void clear_hcq_buffer();
  const ::megastructure::Message_HCQ_Buffer& hcq_buffer() const;
  ::megastructure::Message_HCQ_Buffer* release_hcq_buffer();
  ::megastructure::Message_HCQ_Buffer* mutable_hcq_buffer();
  void set_allocated_hcq_buffer(::megastructure::Message_HCQ_Buffer* hcq_buffer);
  private:
  const ::megastructure::Message_HCQ_Buffer& _internal_hcq_buffer() const;
  ::megastructure::Message_HCQ_Buffer* _internal_mutable_hcq_buffer();
  public:
  void unsafe_arena_set_allocated_hcq_buffer(
      ::megastructure::Message_HCQ_Buffer* hcq_buffer);
  ::megastructure::Message_HCQ_Buffer* unsafe_arena_release_hcq_buffer();

  // .megastructure.Message.CHS_Buffer chs_buffer = 17;
  bool has_chs_buffer() const;
  private:
  bool _internal_has_chs_buffer() const;
  public:
  void clear_chs_buffer();
  const ::megastructure::Message_CHS_Buffer& chs_buffer() const;
  ::megastructure::Message_CHS_Buffer* release_chs_buffer();
  ::megastructure::Message_CHS_Buffer* mutable_chs_buffer();
  void set_allocated_chs_buffer(::megastructure::Message_CHS_Buffer* chs_buffer);
  private:
  const ::megastructure::Message_CHS_Buffer& _internal_chs_buffer() const;
  ::megastructure::Message_CHS_Buffer* _internal_mutable_chs_buffer();
  public:
  void unsafe_arena_set_allocated_chs_buffer(
      ::megastructure::Message_CHS_Buffer* chs_buffer);
  ::megastructure::Message_CHS_Buffer* unsafe_arena_release_chs_buffer();

  // .megastructure.Message.Config config_msg = 18;
  bool has_config_msg() const;
  private:
  bool _internal_has_config_msg() const;
  public:
  void clear_config_msg();
  const ::megastructure::Message_Config& config_msg() const;
  ::megastructure::Message_Config* release_config_msg();
  ::megastructure::Message_Config* mutable_config_msg();
  void set_allocated_config_msg(::megastructure::Message_Config* config_msg);
  private:
  const ::megastructure::Message_Config& _internal_config_msg() const;
  ::megastructure::Message_Config* _internal_mutable_config_msg();
  public:
  void unsafe_arena_set_allocated_config_msg(
      ::megastructure::Message_Config* config_msg);
  ::megastructure::Message_Config* unsafe_arena_release_config_msg();

  // .megastructure.Message.EG_Msg eg_msg = 19;
  bool has_eg_msg() const;
  private:
  bool _internal_has_eg_msg() const;
  public:
  void clear_eg_msg();
  const ::megastructure::Message_EG_Msg& eg_msg() const;
  ::megastructure::Message_EG_Msg* release_eg_msg();
  ::megastructure::Message_EG_Msg* mutable_eg_msg();
  void set_allocated_eg_msg(::megastructure::Message_EG_Msg* eg_msg);
  private:
  const ::megastructure::Message_EG_Msg& _internal_eg_msg() const;
  ::megastructure::Message_EG_Msg* _internal_mutable_eg_msg();
  public:
  void unsafe_arena_set_allocated_eg_msg(
      ::megastructure::Message_EG_Msg* eg_msg);
  ::megastructure::Message_EG_Msg* unsafe_arena_release_eg_msg();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message)
 private:
  class _Internal;
  void set_has_smq_enroll();
  void set_has_mss_enroll();
  void set_has_msq_alive();
  void set_has_sms_alive();
  void set_has_hcq_enroll();
  void set_has_chs_enroll();
  void set_has_hcq_enrolleg();
  void set_has_chs_enrolleg();
  void set_has_chq_alive();
  void set_has_hcs_alive();
  void set_has_msq_load();
  void set_has_sms_load();
  void set_has_chq_load();
  void set_has_hcs_load();
  void set_has_hcq_buffer();
  void set_has_chs_buffer();
  void set_has_config_msg();
  void set_has_eg_msg();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_SMQ_Enroll* smq_enroll_;
    ::megastructure::Message_MSS_Enroll* mss_enroll_;
    ::megastructure::Message_MSQ_Alive* msq_alive_;
    ::megastructure::Message_SMS_Alive* sms_alive_;
    ::megastructure::Message_HCQ_Enroll* hcq_enroll_;
    ::megastructure::Message_CHS_Enroll* chs_enroll_;
    ::megastructure::Message_HCQ_EnrollEG* hcq_enrolleg_;
    ::megastructure::Message_CHS_EnrollEG* chs_enrolleg_;
    ::megastructure::Message_CHQ_Alive* chq_alive_;
    ::megastructure::Message_HCS_Alive* hcs_alive_;
    ::megastructure::Message_MSQ_Load* msq_load_;
    ::megastructure::Message_SMS_Load* sms_load_;
    ::megastructure::Message_CHQ_Load* chq_load_;
    ::megastructure::Message_HCS_Load* hcs_load_;
    ::megastructure::Message_HCQ_Buffer* hcq_buffer_;
    ::megastructure::Message_CHS_Buffer* chs_buffer_;
    ::megastructure::Message_Config* config_msg_;
    ::megastructure::Message_EG_Msg* eg_msg_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_SMQ_Enroll

// string slavename = 1;
inline void Message_SMQ_Enroll::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_SMQ_Enroll::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMQ_Enroll.slavename)
  return _internal_slavename();
}
inline void Message_SMQ_Enroll::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMQ_Enroll.slavename)
}
inline std::string* Message_SMQ_Enroll::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.SMQ_Enroll.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_SMQ_Enroll::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_SMQ_Enroll::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_SMQ_Enroll::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.SMQ_Enroll.slavename)
}
inline void Message_SMQ_Enroll::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.SMQ_Enroll.slavename)
}
inline void Message_SMQ_Enroll::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.SMQ_Enroll.slavename)
}
inline std::string* Message_SMQ_Enroll::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_SMQ_Enroll::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.SMQ_Enroll.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SMQ_Enroll::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.SMQ_Enroll.slavename)
}

// -------------------------------------------------------------------

// Message_MSS_Enroll

// bool success = 1;
inline void Message_MSS_Enroll::clear_success() {
  success_ = false;
}
inline bool Message_MSS_Enroll::_internal_success() const {
  return success_;
}
inline bool Message_MSS_Enroll::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSS_Enroll.success)
  return _internal_success();
}
inline void Message_MSS_Enroll::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_MSS_Enroll::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSS_Enroll.success)
}

// string programname = 2;
inline void Message_MSS_Enroll::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSS_Enroll::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSS_Enroll.programname)
  return _internal_programname();
}
inline void Message_MSS_Enroll::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSS_Enroll.programname)
}
inline std::string* Message_MSS_Enroll::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSS_Enroll.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_MSS_Enroll::_internal_programname() const {
  return programname_.Get();
}
inline void Message_MSS_Enroll::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSS_Enroll::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSS_Enroll.programname)
}
inline void Message_MSS_Enroll::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSS_Enroll.programname)
}
inline void Message_MSS_Enroll::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSS_Enroll.programname)
}
inline std::string* Message_MSS_Enroll::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSS_Enroll::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSS_Enroll.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSS_Enroll::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSS_Enroll.programname)
}

// -------------------------------------------------------------------

// Message_MSQ_Alive

// string slavename = 1;
inline void Message_MSQ_Alive::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSQ_Alive::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSQ_Alive.slavename)
  return _internal_slavename();
}
inline void Message_MSQ_Alive::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSQ_Alive.slavename)
}
inline std::string* Message_MSQ_Alive::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSQ_Alive.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_MSQ_Alive::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_MSQ_Alive::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSQ_Alive::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSQ_Alive.slavename)
}
inline void Message_MSQ_Alive::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSQ_Alive.slavename)
}
inline void Message_MSQ_Alive::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSQ_Alive.slavename)
}
inline std::string* Message_MSQ_Alive::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSQ_Alive::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSQ_Alive.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSQ_Alive::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSQ_Alive.slavename)
}

// -------------------------------------------------------------------

// Message_SMS_Alive

// bool success = 1;
inline void Message_SMS_Alive::clear_success() {
  success_ = false;
}
inline bool Message_SMS_Alive::_internal_success() const {
  return success_;
}
inline bool Message_SMS_Alive::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMS_Alive.success)
  return _internal_success();
}
inline void Message_SMS_Alive::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_SMS_Alive::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMS_Alive.success)
}

// -------------------------------------------------------------------

// Message_HCQ_Enroll

// string processname = 1;
inline void Message_HCQ_Enroll::clear_processname() {
  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_Enroll::processname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Enroll.processname)
  return _internal_processname();
}
inline void Message_HCQ_Enroll::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Enroll.processname)
}
inline std::string* Message_HCQ_Enroll::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_Enroll.processname)
  return _internal_mutable_processname();
}
inline const std::string& Message_HCQ_Enroll::_internal_processname() const {
  return processname_.Get();
}
inline void Message_HCQ_Enroll::_internal_set_processname(const std::string& value) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_Enroll::set_processname(std::string&& value) {
  
  processname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_Enroll.processname)
}
inline void Message_HCQ_Enroll::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_Enroll.processname)
}
inline void Message_HCQ_Enroll::set_processname(const char* value,
    size_t size) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_Enroll.processname)
}
inline std::string* Message_HCQ_Enroll::_internal_mutable_processname() {
  
  return processname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_Enroll::release_processname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_Enroll.processname)
  return processname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_Enroll::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_Enroll.processname)
}

// string unique = 2;
inline void Message_HCQ_Enroll::clear_unique() {
  unique_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_Enroll::unique() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Enroll.unique)
  return _internal_unique();
}
inline void Message_HCQ_Enroll::set_unique(const std::string& value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Enroll.unique)
}
inline std::string* Message_HCQ_Enroll::mutable_unique() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_Enroll.unique)
  return _internal_mutable_unique();
}
inline const std::string& Message_HCQ_Enroll::_internal_unique() const {
  return unique_.Get();
}
inline void Message_HCQ_Enroll::_internal_set_unique(const std::string& value) {
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_Enroll::set_unique(std::string&& value) {
  
  unique_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_Enroll.unique)
}
inline void Message_HCQ_Enroll::set_unique(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_Enroll.unique)
}
inline void Message_HCQ_Enroll::set_unique(const char* value,
    size_t size) {
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_Enroll.unique)
}
inline std::string* Message_HCQ_Enroll::_internal_mutable_unique() {
  
  return unique_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_Enroll::release_unique() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_Enroll.unique)
  return unique_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_Enroll::set_allocated_unique(std::string* unique) {
  if (unique != nullptr) {
    
  } else {
    
  }
  unique_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_Enroll.unique)
}

// -------------------------------------------------------------------

// Message_CHS_Enroll

// bool success = 1;
inline void Message_CHS_Enroll::clear_success() {
  success_ = false;
}
inline bool Message_CHS_Enroll::_internal_success() const {
  return success_;
}
inline bool Message_CHS_Enroll::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.success)
  return _internal_success();
}
inline void Message_CHS_Enroll::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_CHS_Enroll::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.success)
}

// string workspacepath = 2;
inline void Message_CHS_Enroll::clear_workspacepath() {
  workspacepath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Enroll::workspacepath() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.workspacepath)
  return _internal_workspacepath();
}
inline void Message_CHS_Enroll::set_workspacepath(const std::string& value) {
  _internal_set_workspacepath(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.workspacepath)
}
inline std::string* Message_CHS_Enroll::mutable_workspacepath() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Enroll.workspacepath)
  return _internal_mutable_workspacepath();
}
inline const std::string& Message_CHS_Enroll::_internal_workspacepath() const {
  return workspacepath_.Get();
}
inline void Message_CHS_Enroll::_internal_set_workspacepath(const std::string& value) {
  
  workspacepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Enroll::set_workspacepath(std::string&& value) {
  
  workspacepath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Enroll.workspacepath)
}
inline void Message_CHS_Enroll::set_workspacepath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workspacepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Enroll.workspacepath)
}
inline void Message_CHS_Enroll::set_workspacepath(const char* value,
    size_t size) {
  
  workspacepath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Enroll.workspacepath)
}
inline std::string* Message_CHS_Enroll::_internal_mutable_workspacepath() {
  
  return workspacepath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Enroll::release_workspacepath() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Enroll.workspacepath)
  return workspacepath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Enroll::set_allocated_workspacepath(std::string* workspacepath) {
  if (workspacepath != nullptr) {
    
  } else {
    
  }
  workspacepath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspacepath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Enroll.workspacepath)
}

// string slavename = 3;
inline void Message_CHS_Enroll::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Enroll::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.slavename)
  return _internal_slavename();
}
inline void Message_CHS_Enroll::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.slavename)
}
inline std::string* Message_CHS_Enroll::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Enroll.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_CHS_Enroll::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_CHS_Enroll::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Enroll::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Enroll.slavename)
}
inline void Message_CHS_Enroll::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Enroll.slavename)
}
inline void Message_CHS_Enroll::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Enroll.slavename)
}
inline std::string* Message_CHS_Enroll::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Enroll::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Enroll.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Enroll::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Enroll.slavename)
}

// -------------------------------------------------------------------

// Message_HCQ_EnrollEG

// string unique = 1;
inline void Message_HCQ_EnrollEG::clear_unique() {
  unique_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_EnrollEG::unique() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_EnrollEG.unique)
  return _internal_unique();
}
inline void Message_HCQ_EnrollEG::set_unique(const std::string& value) {
  _internal_set_unique(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_EnrollEG.unique)
}
inline std::string* Message_HCQ_EnrollEG::mutable_unique() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_EnrollEG.unique)
  return _internal_mutable_unique();
}
inline const std::string& Message_HCQ_EnrollEG::_internal_unique() const {
  return unique_.Get();
}
inline void Message_HCQ_EnrollEG::_internal_set_unique(const std::string& value) {
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_EnrollEG::set_unique(std::string&& value) {
  
  unique_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_EnrollEG.unique)
}
inline void Message_HCQ_EnrollEG::set_unique(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_EnrollEG.unique)
}
inline void Message_HCQ_EnrollEG::set_unique(const char* value,
    size_t size) {
  
  unique_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_EnrollEG.unique)
}
inline std::string* Message_HCQ_EnrollEG::_internal_mutable_unique() {
  
  return unique_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_EnrollEG::release_unique() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_EnrollEG.unique)
  return unique_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_EnrollEG::set_allocated_unique(std::string* unique) {
  if (unique != nullptr) {
    
  } else {
    
  }
  unique_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unique,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_EnrollEG.unique)
}

// -------------------------------------------------------------------

// Message_CHS_EnrollEG

// bool success = 1;
inline void Message_CHS_EnrollEG::clear_success() {
  success_ = false;
}
inline bool Message_CHS_EnrollEG::_internal_success() const {
  return success_;
}
inline bool Message_CHS_EnrollEG::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_EnrollEG.success)
  return _internal_success();
}
inline void Message_CHS_EnrollEG::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_CHS_EnrollEG::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_EnrollEG.success)
}

// -------------------------------------------------------------------

// Message_CHQ_Alive

// string processname = 1;
inline void Message_CHQ_Alive::clear_processname() {
  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHQ_Alive::processname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHQ_Alive.processname)
  return _internal_processname();
}
inline void Message_CHQ_Alive::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHQ_Alive.processname)
}
inline std::string* Message_CHQ_Alive::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHQ_Alive.processname)
  return _internal_mutable_processname();
}
inline const std::string& Message_CHQ_Alive::_internal_processname() const {
  return processname_.Get();
}
inline void Message_CHQ_Alive::_internal_set_processname(const std::string& value) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHQ_Alive::set_processname(std::string&& value) {
  
  processname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHQ_Alive.processname)
}
inline void Message_CHQ_Alive::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHQ_Alive.processname)
}
inline void Message_CHQ_Alive::set_processname(const char* value,
    size_t size) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHQ_Alive.processname)
}
inline std::string* Message_CHQ_Alive::_internal_mutable_processname() {
  
  return processname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHQ_Alive::release_processname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHQ_Alive.processname)
  return processname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHQ_Alive::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHQ_Alive.processname)
}

// -------------------------------------------------------------------

// Message_HCS_Alive

// bool success = 1;
inline void Message_HCS_Alive::clear_success() {
  success_ = false;
}
inline bool Message_HCS_Alive::_internal_success() const {
  return success_;
}
inline bool Message_HCS_Alive::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCS_Alive.success)
  return _internal_success();
}
inline void Message_HCS_Alive::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_HCS_Alive::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCS_Alive.success)
}

// -------------------------------------------------------------------

// Message_MSQ_Load

// string programname = 1;
inline void Message_MSQ_Load::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSQ_Load::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSQ_Load.programname)
  return _internal_programname();
}
inline void Message_MSQ_Load::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSQ_Load.programname)
}
inline std::string* Message_MSQ_Load::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSQ_Load.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_MSQ_Load::_internal_programname() const {
  return programname_.Get();
}
inline void Message_MSQ_Load::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSQ_Load::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSQ_Load.programname)
}
inline void Message_MSQ_Load::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSQ_Load.programname)
}
inline void Message_MSQ_Load::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSQ_Load.programname)
}
inline std::string* Message_MSQ_Load::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSQ_Load::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSQ_Load.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSQ_Load::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSQ_Load.programname)
}

// -------------------------------------------------------------------

// Message_SMS_Load

// bool success = 1;
inline void Message_SMS_Load::clear_success() {
  success_ = false;
}
inline bool Message_SMS_Load::_internal_success() const {
  return success_;
}
inline bool Message_SMS_Load::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMS_Load.success)
  return _internal_success();
}
inline void Message_SMS_Load::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_SMS_Load::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMS_Load.success)
}

// -------------------------------------------------------------------

// Message_CHQ_Load

// string hostname = 1;
inline void Message_CHQ_Load::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHQ_Load::hostname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHQ_Load.hostname)
  return _internal_hostname();
}
inline void Message_CHQ_Load::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHQ_Load.hostname)
}
inline std::string* Message_CHQ_Load::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHQ_Load.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& Message_CHQ_Load::_internal_hostname() const {
  return hostname_.Get();
}
inline void Message_CHQ_Load::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHQ_Load::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHQ_Load.hostname)
}
inline void Message_CHQ_Load::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHQ_Load.hostname)
}
inline void Message_CHQ_Load::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHQ_Load.hostname)
}
inline std::string* Message_CHQ_Load::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHQ_Load::release_hostname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHQ_Load.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHQ_Load::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHQ_Load.hostname)
}

// string programname = 2;
inline void Message_CHQ_Load::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHQ_Load::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHQ_Load.programname)
  return _internal_programname();
}
inline void Message_CHQ_Load::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHQ_Load.programname)
}
inline std::string* Message_CHQ_Load::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHQ_Load.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_CHQ_Load::_internal_programname() const {
  return programname_.Get();
}
inline void Message_CHQ_Load::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHQ_Load::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHQ_Load.programname)
}
inline void Message_CHQ_Load::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHQ_Load.programname)
}
inline void Message_CHQ_Load::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHQ_Load.programname)
}
inline std::string* Message_CHQ_Load::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHQ_Load::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHQ_Load.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHQ_Load::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHQ_Load.programname)
}

// -------------------------------------------------------------------

// Message_HCS_Load

// bool success = 1;
inline void Message_HCS_Load::clear_success() {
  success_ = false;
}
inline bool Message_HCS_Load::_internal_success() const {
  return success_;
}
inline bool Message_HCS_Load::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCS_Load.success)
  return _internal_success();
}
inline void Message_HCS_Load::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_HCS_Load::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCS_Load.success)
}

// -------------------------------------------------------------------

// Message_HCQ_Buffer

// string buffername = 1;
inline void Message_HCQ_Buffer::clear_buffername() {
  buffername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_Buffer::buffername() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Buffer.buffername)
  return _internal_buffername();
}
inline void Message_HCQ_Buffer::set_buffername(const std::string& value) {
  _internal_set_buffername(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Buffer.buffername)
}
inline std::string* Message_HCQ_Buffer::mutable_buffername() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_Buffer.buffername)
  return _internal_mutable_buffername();
}
inline const std::string& Message_HCQ_Buffer::_internal_buffername() const {
  return buffername_.Get();
}
inline void Message_HCQ_Buffer::_internal_set_buffername(const std::string& value) {
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_Buffer::set_buffername(std::string&& value) {
  
  buffername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_Buffer.buffername)
}
inline void Message_HCQ_Buffer::set_buffername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_Buffer.buffername)
}
inline void Message_HCQ_Buffer::set_buffername(const char* value,
    size_t size) {
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_Buffer.buffername)
}
inline std::string* Message_HCQ_Buffer::_internal_mutable_buffername() {
  
  return buffername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_Buffer::release_buffername() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_Buffer.buffername)
  return buffername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_Buffer::set_allocated_buffername(std::string* buffername) {
  if (buffername != nullptr) {
    
  } else {
    
  }
  buffername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_Buffer.buffername)
}

// uint32 size = 2;
inline void Message_HCQ_Buffer::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_HCQ_Buffer::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_HCQ_Buffer::size() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Buffer.size)
  return _internal_size();
}
inline void Message_HCQ_Buffer::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void Message_HCQ_Buffer::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Buffer.size)
}

// -------------------------------------------------------------------

// Message_CHS_Buffer

// string buffername = 1;
inline void Message_CHS_Buffer::clear_buffername() {
  buffername_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Buffer::buffername() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Buffer.buffername)
  return _internal_buffername();
}
inline void Message_CHS_Buffer::set_buffername(const std::string& value) {
  _internal_set_buffername(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Buffer.buffername)
}
inline std::string* Message_CHS_Buffer::mutable_buffername() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Buffer.buffername)
  return _internal_mutable_buffername();
}
inline const std::string& Message_CHS_Buffer::_internal_buffername() const {
  return buffername_.Get();
}
inline void Message_CHS_Buffer::_internal_set_buffername(const std::string& value) {
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Buffer::set_buffername(std::string&& value) {
  
  buffername_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Buffer.buffername)
}
inline void Message_CHS_Buffer::set_buffername(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Buffer.buffername)
}
inline void Message_CHS_Buffer::set_buffername(const char* value,
    size_t size) {
  
  buffername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Buffer.buffername)
}
inline std::string* Message_CHS_Buffer::_internal_mutable_buffername() {
  
  return buffername_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Buffer::release_buffername() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Buffer.buffername)
  return buffername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Buffer::set_allocated_buffername(std::string* buffername) {
  if (buffername != nullptr) {
    
  } else {
    
  }
  buffername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffername,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Buffer.buffername)
}

// string sharedname = 2;
inline void Message_CHS_Buffer::clear_sharedname() {
  sharedname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Buffer::sharedname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Buffer.sharedname)
  return _internal_sharedname();
}
inline void Message_CHS_Buffer::set_sharedname(const std::string& value) {
  _internal_set_sharedname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Buffer.sharedname)
}
inline std::string* Message_CHS_Buffer::mutable_sharedname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Buffer.sharedname)
  return _internal_mutable_sharedname();
}
inline const std::string& Message_CHS_Buffer::_internal_sharedname() const {
  return sharedname_.Get();
}
inline void Message_CHS_Buffer::_internal_set_sharedname(const std::string& value) {
  
  sharedname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Buffer::set_sharedname(std::string&& value) {
  
  sharedname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Buffer.sharedname)
}
inline void Message_CHS_Buffer::set_sharedname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sharedname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Buffer.sharedname)
}
inline void Message_CHS_Buffer::set_sharedname(const char* value,
    size_t size) {
  
  sharedname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Buffer.sharedname)
}
inline std::string* Message_CHS_Buffer::_internal_mutable_sharedname() {
  
  return sharedname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Buffer::release_sharedname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Buffer.sharedname)
  return sharedname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Buffer::set_allocated_sharedname(std::string* sharedname) {
  if (sharedname != nullptr) {
    
  } else {
    
  }
  sharedname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sharedname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Buffer.sharedname)
}

// -------------------------------------------------------------------

// Message_Config_Load_MSQ

// -------------------------------------------------------------------

// Message_Config_Load_SMS

// bool success = 1;
inline void Message_Config_Load_SMS::clear_success() {
  success_ = false;
}
inline bool Message_Config_Load_SMS::_internal_success() const {
  return success_;
}
inline bool Message_Config_Load_SMS::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.SMS.success)
  return _internal_success();
}
inline void Message_Config_Load_SMS::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_Config_Load_SMS::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.Config.Load.SMS.success)
}

// -------------------------------------------------------------------

// Message_Config_Load_CHQ

// -------------------------------------------------------------------

// Message_Config_Load_HCS

// bool success = 1;
inline void Message_Config_Load_HCS::clear_success() {
  success_ = false;
}
inline bool Message_Config_Load_HCS::_internal_success() const {
  return success_;
}
inline bool Message_Config_Load_HCS::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.HCS.success)
  return _internal_success();
}
inline void Message_Config_Load_HCS::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_Config_Load_HCS::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.Config.Load.HCS.success)
}

// -------------------------------------------------------------------

// Message_Config_Load

// .megastructure.Message.Config.Load.MSQ msq = 1;
inline bool Message_Config_Load::_internal_has_msq() const {
  return foobar_case() == kMsq;
}
inline bool Message_Config_Load::has_msq() const {
  return _internal_has_msq();
}
inline void Message_Config_Load::set_has_msq() {
  _oneof_case_[0] = kMsq;
}
inline void Message_Config_Load::clear_msq() {
  if (_internal_has_msq()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Load_MSQ* Message_Config_Load::release_msq() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Load.msq)
  if (_internal_has_msq()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Load_MSQ* temp = foobar_.msq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Load_MSQ& Message_Config_Load::_internal_msq() const {
  return _internal_has_msq()
      ? *foobar_.msq_
      : *reinterpret_cast< ::megastructure::Message_Config_Load_MSQ*>(&::megastructure::_Message_Config_Load_MSQ_default_instance_);
}
inline const ::megastructure::Message_Config_Load_MSQ& Message_Config_Load::msq() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.msq)
  return _internal_msq();
}
inline ::megastructure::Message_Config_Load_MSQ* Message_Config_Load::unsafe_arena_release_msq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Load.msq)
  if (_internal_has_msq()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Load_MSQ* temp = foobar_.msq_;
    foobar_.msq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Load::unsafe_arena_set_allocated_msq(::megastructure::Message_Config_Load_MSQ* msq) {
  clear_foobar();
  if (msq) {
    set_has_msq();
    foobar_.msq_ = msq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Load.msq)
}
inline ::megastructure::Message_Config_Load_MSQ* Message_Config_Load::_internal_mutable_msq() {
  if (!_internal_has_msq()) {
    clear_foobar();
    set_has_msq();
    foobar_.msq_ = CreateMaybeMessage< ::megastructure::Message_Config_Load_MSQ >(GetArena());
  }
  return foobar_.msq_;
}
inline ::megastructure::Message_Config_Load_MSQ* Message_Config_Load::mutable_msq() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Load.msq)
  return _internal_mutable_msq();
}

// .megastructure.Message.Config.Load.SMS sms = 2;
inline bool Message_Config_Load::_internal_has_sms() const {
  return foobar_case() == kSms;
}
inline bool Message_Config_Load::has_sms() const {
  return _internal_has_sms();
}
inline void Message_Config_Load::set_has_sms() {
  _oneof_case_[0] = kSms;
}
inline void Message_Config_Load::clear_sms() {
  if (_internal_has_sms()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Load_SMS* Message_Config_Load::release_sms() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Load.sms)
  if (_internal_has_sms()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Load_SMS* temp = foobar_.sms_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Load_SMS& Message_Config_Load::_internal_sms() const {
  return _internal_has_sms()
      ? *foobar_.sms_
      : *reinterpret_cast< ::megastructure::Message_Config_Load_SMS*>(&::megastructure::_Message_Config_Load_SMS_default_instance_);
}
inline const ::megastructure::Message_Config_Load_SMS& Message_Config_Load::sms() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.sms)
  return _internal_sms();
}
inline ::megastructure::Message_Config_Load_SMS* Message_Config_Load::unsafe_arena_release_sms() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Load.sms)
  if (_internal_has_sms()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Load_SMS* temp = foobar_.sms_;
    foobar_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Load::unsafe_arena_set_allocated_sms(::megastructure::Message_Config_Load_SMS* sms) {
  clear_foobar();
  if (sms) {
    set_has_sms();
    foobar_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Load.sms)
}
inline ::megastructure::Message_Config_Load_SMS* Message_Config_Load::_internal_mutable_sms() {
  if (!_internal_has_sms()) {
    clear_foobar();
    set_has_sms();
    foobar_.sms_ = CreateMaybeMessage< ::megastructure::Message_Config_Load_SMS >(GetArena());
  }
  return foobar_.sms_;
}
inline ::megastructure::Message_Config_Load_SMS* Message_Config_Load::mutable_sms() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Load.sms)
  return _internal_mutable_sms();
}

// .megastructure.Message.Config.Load.CHQ chq = 3;
inline bool Message_Config_Load::_internal_has_chq() const {
  return foobar_case() == kChq;
}
inline bool Message_Config_Load::has_chq() const {
  return _internal_has_chq();
}
inline void Message_Config_Load::set_has_chq() {
  _oneof_case_[0] = kChq;
}
inline void Message_Config_Load::clear_chq() {
  if (_internal_has_chq()) {
    if (GetArena() == nullptr) {
      delete foobar_.chq_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Load_CHQ* Message_Config_Load::release_chq() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Load.chq)
  if (_internal_has_chq()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Load_CHQ* temp = foobar_.chq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Load_CHQ& Message_Config_Load::_internal_chq() const {
  return _internal_has_chq()
      ? *foobar_.chq_
      : *reinterpret_cast< ::megastructure::Message_Config_Load_CHQ*>(&::megastructure::_Message_Config_Load_CHQ_default_instance_);
}
inline const ::megastructure::Message_Config_Load_CHQ& Message_Config_Load::chq() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.chq)
  return _internal_chq();
}
inline ::megastructure::Message_Config_Load_CHQ* Message_Config_Load::unsafe_arena_release_chq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Load.chq)
  if (_internal_has_chq()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Load_CHQ* temp = foobar_.chq_;
    foobar_.chq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Load::unsafe_arena_set_allocated_chq(::megastructure::Message_Config_Load_CHQ* chq) {
  clear_foobar();
  if (chq) {
    set_has_chq();
    foobar_.chq_ = chq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Load.chq)
}
inline ::megastructure::Message_Config_Load_CHQ* Message_Config_Load::_internal_mutable_chq() {
  if (!_internal_has_chq()) {
    clear_foobar();
    set_has_chq();
    foobar_.chq_ = CreateMaybeMessage< ::megastructure::Message_Config_Load_CHQ >(GetArena());
  }
  return foobar_.chq_;
}
inline ::megastructure::Message_Config_Load_CHQ* Message_Config_Load::mutable_chq() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Load.chq)
  return _internal_mutable_chq();
}

// .megastructure.Message.Config.Load.HCS hcs = 4;
inline bool Message_Config_Load::_internal_has_hcs() const {
  return foobar_case() == kHcs;
}
inline bool Message_Config_Load::has_hcs() const {
  return _internal_has_hcs();
}
inline void Message_Config_Load::set_has_hcs() {
  _oneof_case_[0] = kHcs;
}
inline void Message_Config_Load::clear_hcs() {
  if (_internal_has_hcs()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcs_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Load_HCS* Message_Config_Load::release_hcs() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Load.hcs)
  if (_internal_has_hcs()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Load_HCS* temp = foobar_.hcs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Load_HCS& Message_Config_Load::_internal_hcs() const {
  return _internal_has_hcs()
      ? *foobar_.hcs_
      : *reinterpret_cast< ::megastructure::Message_Config_Load_HCS*>(&::megastructure::_Message_Config_Load_HCS_default_instance_);
}
inline const ::megastructure::Message_Config_Load_HCS& Message_Config_Load::hcs() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Load.hcs)
  return _internal_hcs();
}
inline ::megastructure::Message_Config_Load_HCS* Message_Config_Load::unsafe_arena_release_hcs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Load.hcs)
  if (_internal_has_hcs()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Load_HCS* temp = foobar_.hcs_;
    foobar_.hcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Load::unsafe_arena_set_allocated_hcs(::megastructure::Message_Config_Load_HCS* hcs) {
  clear_foobar();
  if (hcs) {
    set_has_hcs();
    foobar_.hcs_ = hcs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Load.hcs)
}
inline ::megastructure::Message_Config_Load_HCS* Message_Config_Load::_internal_mutable_hcs() {
  if (!_internal_has_hcs()) {
    clear_foobar();
    set_has_hcs();
    foobar_.hcs_ = CreateMaybeMessage< ::megastructure::Message_Config_Load_HCS >(GetArena());
  }
  return foobar_.hcs_;
}
inline ::megastructure::Message_Config_Load_HCS* Message_Config_Load::mutable_hcs() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Load.hcs)
  return _internal_mutable_hcs();
}

inline bool Message_Config_Load::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message_Config_Load::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message_Config_Load::FoobarCase Message_Config_Load::foobar_case() const {
  return Message_Config_Load::FoobarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_Config_Save_MSQ

// -------------------------------------------------------------------

// Message_Config_Save_SMS

// bool success = 1;
inline void Message_Config_Save_SMS::clear_success() {
  success_ = false;
}
inline bool Message_Config_Save_SMS::_internal_success() const {
  return success_;
}
inline bool Message_Config_Save_SMS::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.SMS.success)
  return _internal_success();
}
inline void Message_Config_Save_SMS::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_Config_Save_SMS::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.Config.Save.SMS.success)
}

// -------------------------------------------------------------------

// Message_Config_Save_CHQ

// -------------------------------------------------------------------

// Message_Config_Save_HCS

// bool success = 1;
inline void Message_Config_Save_HCS::clear_success() {
  success_ = false;
}
inline bool Message_Config_Save_HCS::_internal_success() const {
  return success_;
}
inline bool Message_Config_Save_HCS::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.HCS.success)
  return _internal_success();
}
inline void Message_Config_Save_HCS::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_Config_Save_HCS::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.Config.Save.HCS.success)
}

// -------------------------------------------------------------------

// Message_Config_Save

// .megastructure.Message.Config.Save.MSQ msq = 1;
inline bool Message_Config_Save::_internal_has_msq() const {
  return foobar_case() == kMsq;
}
inline bool Message_Config_Save::has_msq() const {
  return _internal_has_msq();
}
inline void Message_Config_Save::set_has_msq() {
  _oneof_case_[0] = kMsq;
}
inline void Message_Config_Save::clear_msq() {
  if (_internal_has_msq()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Save_MSQ* Message_Config_Save::release_msq() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Save.msq)
  if (_internal_has_msq()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Save_MSQ* temp = foobar_.msq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Save_MSQ& Message_Config_Save::_internal_msq() const {
  return _internal_has_msq()
      ? *foobar_.msq_
      : *reinterpret_cast< ::megastructure::Message_Config_Save_MSQ*>(&::megastructure::_Message_Config_Save_MSQ_default_instance_);
}
inline const ::megastructure::Message_Config_Save_MSQ& Message_Config_Save::msq() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.msq)
  return _internal_msq();
}
inline ::megastructure::Message_Config_Save_MSQ* Message_Config_Save::unsafe_arena_release_msq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Save.msq)
  if (_internal_has_msq()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Save_MSQ* temp = foobar_.msq_;
    foobar_.msq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Save::unsafe_arena_set_allocated_msq(::megastructure::Message_Config_Save_MSQ* msq) {
  clear_foobar();
  if (msq) {
    set_has_msq();
    foobar_.msq_ = msq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Save.msq)
}
inline ::megastructure::Message_Config_Save_MSQ* Message_Config_Save::_internal_mutable_msq() {
  if (!_internal_has_msq()) {
    clear_foobar();
    set_has_msq();
    foobar_.msq_ = CreateMaybeMessage< ::megastructure::Message_Config_Save_MSQ >(GetArena());
  }
  return foobar_.msq_;
}
inline ::megastructure::Message_Config_Save_MSQ* Message_Config_Save::mutable_msq() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Save.msq)
  return _internal_mutable_msq();
}

// .megastructure.Message.Config.Save.SMS sms = 2;
inline bool Message_Config_Save::_internal_has_sms() const {
  return foobar_case() == kSms;
}
inline bool Message_Config_Save::has_sms() const {
  return _internal_has_sms();
}
inline void Message_Config_Save::set_has_sms() {
  _oneof_case_[0] = kSms;
}
inline void Message_Config_Save::clear_sms() {
  if (_internal_has_sms()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Save_SMS* Message_Config_Save::release_sms() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Save.sms)
  if (_internal_has_sms()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Save_SMS* temp = foobar_.sms_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Save_SMS& Message_Config_Save::_internal_sms() const {
  return _internal_has_sms()
      ? *foobar_.sms_
      : *reinterpret_cast< ::megastructure::Message_Config_Save_SMS*>(&::megastructure::_Message_Config_Save_SMS_default_instance_);
}
inline const ::megastructure::Message_Config_Save_SMS& Message_Config_Save::sms() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.sms)
  return _internal_sms();
}
inline ::megastructure::Message_Config_Save_SMS* Message_Config_Save::unsafe_arena_release_sms() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Save.sms)
  if (_internal_has_sms()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Save_SMS* temp = foobar_.sms_;
    foobar_.sms_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Save::unsafe_arena_set_allocated_sms(::megastructure::Message_Config_Save_SMS* sms) {
  clear_foobar();
  if (sms) {
    set_has_sms();
    foobar_.sms_ = sms;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Save.sms)
}
inline ::megastructure::Message_Config_Save_SMS* Message_Config_Save::_internal_mutable_sms() {
  if (!_internal_has_sms()) {
    clear_foobar();
    set_has_sms();
    foobar_.sms_ = CreateMaybeMessage< ::megastructure::Message_Config_Save_SMS >(GetArena());
  }
  return foobar_.sms_;
}
inline ::megastructure::Message_Config_Save_SMS* Message_Config_Save::mutable_sms() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Save.sms)
  return _internal_mutable_sms();
}

// .megastructure.Message.Config.Save.CHQ chq = 3;
inline bool Message_Config_Save::_internal_has_chq() const {
  return foobar_case() == kChq;
}
inline bool Message_Config_Save::has_chq() const {
  return _internal_has_chq();
}
inline void Message_Config_Save::set_has_chq() {
  _oneof_case_[0] = kChq;
}
inline void Message_Config_Save::clear_chq() {
  if (_internal_has_chq()) {
    if (GetArena() == nullptr) {
      delete foobar_.chq_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Save_CHQ* Message_Config_Save::release_chq() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Save.chq)
  if (_internal_has_chq()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Save_CHQ* temp = foobar_.chq_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Save_CHQ& Message_Config_Save::_internal_chq() const {
  return _internal_has_chq()
      ? *foobar_.chq_
      : *reinterpret_cast< ::megastructure::Message_Config_Save_CHQ*>(&::megastructure::_Message_Config_Save_CHQ_default_instance_);
}
inline const ::megastructure::Message_Config_Save_CHQ& Message_Config_Save::chq() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.chq)
  return _internal_chq();
}
inline ::megastructure::Message_Config_Save_CHQ* Message_Config_Save::unsafe_arena_release_chq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Save.chq)
  if (_internal_has_chq()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Save_CHQ* temp = foobar_.chq_;
    foobar_.chq_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Save::unsafe_arena_set_allocated_chq(::megastructure::Message_Config_Save_CHQ* chq) {
  clear_foobar();
  if (chq) {
    set_has_chq();
    foobar_.chq_ = chq;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Save.chq)
}
inline ::megastructure::Message_Config_Save_CHQ* Message_Config_Save::_internal_mutable_chq() {
  if (!_internal_has_chq()) {
    clear_foobar();
    set_has_chq();
    foobar_.chq_ = CreateMaybeMessage< ::megastructure::Message_Config_Save_CHQ >(GetArena());
  }
  return foobar_.chq_;
}
inline ::megastructure::Message_Config_Save_CHQ* Message_Config_Save::mutable_chq() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Save.chq)
  return _internal_mutable_chq();
}

// .megastructure.Message.Config.Save.HCS hcs = 4;
inline bool Message_Config_Save::_internal_has_hcs() const {
  return foobar_case() == kHcs;
}
inline bool Message_Config_Save::has_hcs() const {
  return _internal_has_hcs();
}
inline void Message_Config_Save::set_has_hcs() {
  _oneof_case_[0] = kHcs;
}
inline void Message_Config_Save::clear_hcs() {
  if (_internal_has_hcs()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcs_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Save_HCS* Message_Config_Save::release_hcs() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.Save.hcs)
  if (_internal_has_hcs()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Save_HCS* temp = foobar_.hcs_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Save_HCS& Message_Config_Save::_internal_hcs() const {
  return _internal_has_hcs()
      ? *foobar_.hcs_
      : *reinterpret_cast< ::megastructure::Message_Config_Save_HCS*>(&::megastructure::_Message_Config_Save_HCS_default_instance_);
}
inline const ::megastructure::Message_Config_Save_HCS& Message_Config_Save::hcs() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.Save.hcs)
  return _internal_hcs();
}
inline ::megastructure::Message_Config_Save_HCS* Message_Config_Save::unsafe_arena_release_hcs() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.Save.hcs)
  if (_internal_has_hcs()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Save_HCS* temp = foobar_.hcs_;
    foobar_.hcs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config_Save::unsafe_arena_set_allocated_hcs(::megastructure::Message_Config_Save_HCS* hcs) {
  clear_foobar();
  if (hcs) {
    set_has_hcs();
    foobar_.hcs_ = hcs;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.Save.hcs)
}
inline ::megastructure::Message_Config_Save_HCS* Message_Config_Save::_internal_mutable_hcs() {
  if (!_internal_has_hcs()) {
    clear_foobar();
    set_has_hcs();
    foobar_.hcs_ = CreateMaybeMessage< ::megastructure::Message_Config_Save_HCS >(GetArena());
  }
  return foobar_.hcs_;
}
inline ::megastructure::Message_Config_Save_HCS* Message_Config_Save::mutable_hcs() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.Save.hcs)
  return _internal_mutable_hcs();
}

inline bool Message_Config_Save::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message_Config_Save::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message_Config_Save::FoobarCase Message_Config_Save::foobar_case() const {
  return Message_Config_Save::FoobarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_Config

// .megastructure.Message.Config.Load load = 1;
inline bool Message_Config::_internal_has_load() const {
  return foobar_case() == kLoad;
}
inline bool Message_Config::has_load() const {
  return _internal_has_load();
}
inline void Message_Config::set_has_load() {
  _oneof_case_[0] = kLoad;
}
inline void Message_Config::clear_load() {
  if (_internal_has_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Load* Message_Config::release_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.load)
  if (_internal_has_load()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Load* temp = foobar_.load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Load& Message_Config::_internal_load() const {
  return _internal_has_load()
      ? *foobar_.load_
      : *reinterpret_cast< ::megastructure::Message_Config_Load*>(&::megastructure::_Message_Config_Load_default_instance_);
}
inline const ::megastructure::Message_Config_Load& Message_Config::load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.load)
  return _internal_load();
}
inline ::megastructure::Message_Config_Load* Message_Config::unsafe_arena_release_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.load)
  if (_internal_has_load()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Load* temp = foobar_.load_;
    foobar_.load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config::unsafe_arena_set_allocated_load(::megastructure::Message_Config_Load* load) {
  clear_foobar();
  if (load) {
    set_has_load();
    foobar_.load_ = load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.load)
}
inline ::megastructure::Message_Config_Load* Message_Config::_internal_mutable_load() {
  if (!_internal_has_load()) {
    clear_foobar();
    set_has_load();
    foobar_.load_ = CreateMaybeMessage< ::megastructure::Message_Config_Load >(GetArena());
  }
  return foobar_.load_;
}
inline ::megastructure::Message_Config_Load* Message_Config::mutable_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.load)
  return _internal_mutable_load();
}

// .megastructure.Message.Config.Save save = 2;
inline bool Message_Config::_internal_has_save() const {
  return foobar_case() == kSave;
}
inline bool Message_Config::has_save() const {
  return _internal_has_save();
}
inline void Message_Config::set_has_save() {
  _oneof_case_[0] = kSave;
}
inline void Message_Config::clear_save() {
  if (_internal_has_save()) {
    if (GetArena() == nullptr) {
      delete foobar_.save_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config_Save* Message_Config::release_save() {
  // @@protoc_insertion_point(field_release:megastructure.Message.Config.save)
  if (_internal_has_save()) {
    clear_has_foobar();
      ::megastructure::Message_Config_Save* temp = foobar_.save_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config_Save& Message_Config::_internal_save() const {
  return _internal_has_save()
      ? *foobar_.save_
      : *reinterpret_cast< ::megastructure::Message_Config_Save*>(&::megastructure::_Message_Config_Save_default_instance_);
}
inline const ::megastructure::Message_Config_Save& Message_Config::save() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.Config.save)
  return _internal_save();
}
inline ::megastructure::Message_Config_Save* Message_Config::unsafe_arena_release_save() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.Config.save)
  if (_internal_has_save()) {
    clear_has_foobar();
    ::megastructure::Message_Config_Save* temp = foobar_.save_;
    foobar_.save_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_Config::unsafe_arena_set_allocated_save(::megastructure::Message_Config_Save* save) {
  clear_foobar();
  if (save) {
    set_has_save();
    foobar_.save_ = save;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.Config.save)
}
inline ::megastructure::Message_Config_Save* Message_Config::_internal_mutable_save() {
  if (!_internal_has_save()) {
    clear_foobar();
    set_has_save();
    foobar_.save_ = CreateMaybeMessage< ::megastructure::Message_Config_Save >(GetArena());
  }
  return foobar_.save_;
}
inline ::megastructure::Message_Config_Save* Message_Config::mutable_save() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.Config.save)
  return _internal_mutable_save();
}

inline bool Message_Config::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message_Config::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message_Config::FoobarCase Message_Config::foobar_case() const {
  return Message_Config::FoobarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_EG_Msg_Request_Read

// -------------------------------------------------------------------

// Message_EG_Msg_Request_Write

// bytes value = 1;
inline void Message_EG_Msg_Request_Write::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_EG_Msg_Request_Write::value() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.Write.value)
  return _internal_value();
}
inline void Message_EG_Msg_Request_Write::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Request.Write.value)
}
inline std::string* Message_EG_Msg_Request_Write::mutable_value() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Request.Write.value)
  return _internal_mutable_value();
}
inline const std::string& Message_EG_Msg_Request_Write::_internal_value() const {
  return value_.Get();
}
inline void Message_EG_Msg_Request_Write::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_EG_Msg_Request_Write::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.EG_Msg.Request.Write.value)
}
inline void Message_EG_Msg_Request_Write::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.EG_Msg.Request.Write.value)
}
inline void Message_EG_Msg_Request_Write::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.EG_Msg.Request.Write.value)
}
inline std::string* Message_EG_Msg_Request_Write::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_EG_Msg_Request_Write::release_value() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Request.Write.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_EG_Msg_Request_Write::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.EG_Msg.Request.Write.value)
}

// -------------------------------------------------------------------

// Message_EG_Msg_Request_Lock

// bool read = 1;
inline void Message_EG_Msg_Request_Lock::clear_read() {
  read_ = false;
}
inline bool Message_EG_Msg_Request_Lock::_internal_read() const {
  return read_;
}
inline bool Message_EG_Msg_Request_Lock::read() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.Lock.read)
  return _internal_read();
}
inline void Message_EG_Msg_Request_Lock::_internal_set_read(bool value) {
  
  read_ = value;
}
inline void Message_EG_Msg_Request_Lock::set_read(bool value) {
  _internal_set_read(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Request.Lock.read)
}

// -------------------------------------------------------------------

// Message_EG_Msg_Request_Unlock

// -------------------------------------------------------------------

// Message_EG_Msg_Request

// uint32 coordinator = 1;
inline void Message_EG_Msg_Request::clear_coordinator() {
  coordinator_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Request::_internal_coordinator() const {
  return coordinator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Request::coordinator() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.coordinator)
  return _internal_coordinator();
}
inline void Message_EG_Msg_Request::_internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coordinator_ = value;
}
inline void Message_EG_Msg_Request::set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coordinator(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Request.coordinator)
}

// uint32 host = 2;
inline void Message_EG_Msg_Request::clear_host() {
  host_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Request::_internal_host() const {
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Request::host() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.host)
  return _internal_host();
}
inline void Message_EG_Msg_Request::_internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  host_ = value;
}
inline void Message_EG_Msg_Request::set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Request.host)
}

// .megastructure.Message.EG_Msg.Request.Read read = 3;
inline bool Message_EG_Msg_Request::_internal_has_read() const {
  return foobar_case() == kRead;
}
inline bool Message_EG_Msg_Request::has_read() const {
  return _internal_has_read();
}
inline void Message_EG_Msg_Request::set_has_read() {
  _oneof_case_[0] = kRead;
}
inline void Message_EG_Msg_Request::clear_read() {
  if (_internal_has_read()) {
    if (GetArena() == nullptr) {
      delete foobar_.read_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Request_Read* Message_EG_Msg_Request::release_read() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Request.read)
  if (_internal_has_read()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Request_Read* temp = foobar_.read_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Request_Read& Message_EG_Msg_Request::_internal_read() const {
  return _internal_has_read()
      ? *foobar_.read_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Request_Read*>(&::megastructure::_Message_EG_Msg_Request_Read_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Request_Read& Message_EG_Msg_Request::read() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.read)
  return _internal_read();
}
inline ::megastructure::Message_EG_Msg_Request_Read* Message_EG_Msg_Request::unsafe_arena_release_read() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.Request.read)
  if (_internal_has_read()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Request_Read* temp = foobar_.read_;
    foobar_.read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg_Request::unsafe_arena_set_allocated_read(::megastructure::Message_EG_Msg_Request_Read* read) {
  clear_foobar();
  if (read) {
    set_has_read();
    foobar_.read_ = read;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.Request.read)
}
inline ::megastructure::Message_EG_Msg_Request_Read* Message_EG_Msg_Request::_internal_mutable_read() {
  if (!_internal_has_read()) {
    clear_foobar();
    set_has_read();
    foobar_.read_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Request_Read >(GetArena());
  }
  return foobar_.read_;
}
inline ::megastructure::Message_EG_Msg_Request_Read* Message_EG_Msg_Request::mutable_read() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Request.read)
  return _internal_mutable_read();
}

// .megastructure.Message.EG_Msg.Request.Write write = 4;
inline bool Message_EG_Msg_Request::_internal_has_write() const {
  return foobar_case() == kWrite;
}
inline bool Message_EG_Msg_Request::has_write() const {
  return _internal_has_write();
}
inline void Message_EG_Msg_Request::set_has_write() {
  _oneof_case_[0] = kWrite;
}
inline void Message_EG_Msg_Request::clear_write() {
  if (_internal_has_write()) {
    if (GetArena() == nullptr) {
      delete foobar_.write_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Request_Write* Message_EG_Msg_Request::release_write() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Request.write)
  if (_internal_has_write()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Request_Write* temp = foobar_.write_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Request_Write& Message_EG_Msg_Request::_internal_write() const {
  return _internal_has_write()
      ? *foobar_.write_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Request_Write*>(&::megastructure::_Message_EG_Msg_Request_Write_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Request_Write& Message_EG_Msg_Request::write() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.write)
  return _internal_write();
}
inline ::megastructure::Message_EG_Msg_Request_Write* Message_EG_Msg_Request::unsafe_arena_release_write() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.Request.write)
  if (_internal_has_write()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Request_Write* temp = foobar_.write_;
    foobar_.write_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg_Request::unsafe_arena_set_allocated_write(::megastructure::Message_EG_Msg_Request_Write* write) {
  clear_foobar();
  if (write) {
    set_has_write();
    foobar_.write_ = write;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.Request.write)
}
inline ::megastructure::Message_EG_Msg_Request_Write* Message_EG_Msg_Request::_internal_mutable_write() {
  if (!_internal_has_write()) {
    clear_foobar();
    set_has_write();
    foobar_.write_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Request_Write >(GetArena());
  }
  return foobar_.write_;
}
inline ::megastructure::Message_EG_Msg_Request_Write* Message_EG_Msg_Request::mutable_write() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Request.write)
  return _internal_mutable_write();
}

// .megastructure.Message.EG_Msg.Request.Lock lock = 6;
inline bool Message_EG_Msg_Request::_internal_has_lock() const {
  return foobar_case() == kLock;
}
inline bool Message_EG_Msg_Request::has_lock() const {
  return _internal_has_lock();
}
inline void Message_EG_Msg_Request::set_has_lock() {
  _oneof_case_[0] = kLock;
}
inline void Message_EG_Msg_Request::clear_lock() {
  if (_internal_has_lock()) {
    if (GetArena() == nullptr) {
      delete foobar_.lock_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Request_Lock* Message_EG_Msg_Request::release_lock() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Request.lock)
  if (_internal_has_lock()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Request_Lock* temp = foobar_.lock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.lock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Request_Lock& Message_EG_Msg_Request::_internal_lock() const {
  return _internal_has_lock()
      ? *foobar_.lock_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Request_Lock*>(&::megastructure::_Message_EG_Msg_Request_Lock_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Request_Lock& Message_EG_Msg_Request::lock() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.lock)
  return _internal_lock();
}
inline ::megastructure::Message_EG_Msg_Request_Lock* Message_EG_Msg_Request::unsafe_arena_release_lock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.Request.lock)
  if (_internal_has_lock()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Request_Lock* temp = foobar_.lock_;
    foobar_.lock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg_Request::unsafe_arena_set_allocated_lock(::megastructure::Message_EG_Msg_Request_Lock* lock) {
  clear_foobar();
  if (lock) {
    set_has_lock();
    foobar_.lock_ = lock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.Request.lock)
}
inline ::megastructure::Message_EG_Msg_Request_Lock* Message_EG_Msg_Request::_internal_mutable_lock() {
  if (!_internal_has_lock()) {
    clear_foobar();
    set_has_lock();
    foobar_.lock_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Request_Lock >(GetArena());
  }
  return foobar_.lock_;
}
inline ::megastructure::Message_EG_Msg_Request_Lock* Message_EG_Msg_Request::mutable_lock() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Request.lock)
  return _internal_mutable_lock();
}

// .megastructure.Message.EG_Msg.Request.Unlock unlock = 7;
inline bool Message_EG_Msg_Request::_internal_has_unlock() const {
  return foobar_case() == kUnlock;
}
inline bool Message_EG_Msg_Request::has_unlock() const {
  return _internal_has_unlock();
}
inline void Message_EG_Msg_Request::set_has_unlock() {
  _oneof_case_[0] = kUnlock;
}
inline void Message_EG_Msg_Request::clear_unlock() {
  if (_internal_has_unlock()) {
    if (GetArena() == nullptr) {
      delete foobar_.unlock_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Request_Unlock* Message_EG_Msg_Request::release_unlock() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Request.unlock)
  if (_internal_has_unlock()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Request_Unlock* temp = foobar_.unlock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Request_Unlock& Message_EG_Msg_Request::_internal_unlock() const {
  return _internal_has_unlock()
      ? *foobar_.unlock_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Request_Unlock*>(&::megastructure::_Message_EG_Msg_Request_Unlock_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Request_Unlock& Message_EG_Msg_Request::unlock() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Request.unlock)
  return _internal_unlock();
}
inline ::megastructure::Message_EG_Msg_Request_Unlock* Message_EG_Msg_Request::unsafe_arena_release_unlock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.Request.unlock)
  if (_internal_has_unlock()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Request_Unlock* temp = foobar_.unlock_;
    foobar_.unlock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg_Request::unsafe_arena_set_allocated_unlock(::megastructure::Message_EG_Msg_Request_Unlock* unlock) {
  clear_foobar();
  if (unlock) {
    set_has_unlock();
    foobar_.unlock_ = unlock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.Request.unlock)
}
inline ::megastructure::Message_EG_Msg_Request_Unlock* Message_EG_Msg_Request::_internal_mutable_unlock() {
  if (!_internal_has_unlock()) {
    clear_foobar();
    set_has_unlock();
    foobar_.unlock_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Request_Unlock >(GetArena());
  }
  return foobar_.unlock_;
}
inline ::megastructure::Message_EG_Msg_Request_Unlock* Message_EG_Msg_Request::mutable_unlock() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Request.unlock)
  return _internal_mutable_unlock();
}

inline bool Message_EG_Msg_Request::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message_EG_Msg_Request::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message_EG_Msg_Request::FoobarCase Message_EG_Msg_Request::foobar_case() const {
  return Message_EG_Msg_Request::FoobarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message_EG_Msg_Response

// uint32 coordinator = 1;
inline void Message_EG_Msg_Response::clear_coordinator() {
  coordinator_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Response::_internal_coordinator() const {
  return coordinator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Response::coordinator() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Response.coordinator)
  return _internal_coordinator();
}
inline void Message_EG_Msg_Response::_internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coordinator_ = value;
}
inline void Message_EG_Msg_Response::set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coordinator(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Response.coordinator)
}

// uint32 host = 2;
inline void Message_EG_Msg_Response::clear_host() {
  host_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Response::_internal_host() const {
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Response::host() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Response.host)
  return _internal_host();
}
inline void Message_EG_Msg_Response::_internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  host_ = value;
}
inline void Message_EG_Msg_Response::set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Response.host)
}

// bytes value = 3;
inline void Message_EG_Msg_Response::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_EG_Msg_Response::value() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Response.value)
  return _internal_value();
}
inline void Message_EG_Msg_Response::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Response.value)
}
inline std::string* Message_EG_Msg_Response::mutable_value() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Response.value)
  return _internal_mutable_value();
}
inline const std::string& Message_EG_Msg_Response::_internal_value() const {
  return value_.Get();
}
inline void Message_EG_Msg_Response::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_EG_Msg_Response::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.EG_Msg.Response.value)
}
inline void Message_EG_Msg_Response::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.EG_Msg.Response.value)
}
inline void Message_EG_Msg_Response::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.EG_Msg.Response.value)
}
inline std::string* Message_EG_Msg_Response::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_EG_Msg_Response::release_value() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Response.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_EG_Msg_Response::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.EG_Msg.Response.value)
}

// -------------------------------------------------------------------

// Message_EG_Msg_Error

// uint32 coordinator = 1;
inline void Message_EG_Msg_Error::clear_coordinator() {
  coordinator_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Error::_internal_coordinator() const {
  return coordinator_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Error::coordinator() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Error.coordinator)
  return _internal_coordinator();
}
inline void Message_EG_Msg_Error::_internal_set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  coordinator_ = value;
}
inline void Message_EG_Msg_Error::set_coordinator(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_coordinator(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Error.coordinator)
}

// uint32 host = 2;
inline void Message_EG_Msg_Error::clear_host() {
  host_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Error::_internal_host() const {
  return host_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg_Error::host() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Error.host)
  return _internal_host();
}
inline void Message_EG_Msg_Error::_internal_set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  host_ = value;
}
inline void Message_EG_Msg_Error::set_host(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Error.host)
}

// -------------------------------------------------------------------

// Message_EG_Msg_Event

// bytes value = 1;
inline void Message_EG_Msg_Event::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_EG_Msg_Event::value() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.Event.value)
  return _internal_value();
}
inline void Message_EG_Msg_Event::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.Event.value)
}
inline std::string* Message_EG_Msg_Event::mutable_value() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.Event.value)
  return _internal_mutable_value();
}
inline const std::string& Message_EG_Msg_Event::_internal_value() const {
  return value_.Get();
}
inline void Message_EG_Msg_Event::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_EG_Msg_Event::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.EG_Msg.Event.value)
}
inline void Message_EG_Msg_Event::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.EG_Msg.Event.value)
}
inline void Message_EG_Msg_Event::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.EG_Msg.Event.value)
}
inline std::string* Message_EG_Msg_Event::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_EG_Msg_Event::release_value() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.Event.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_EG_Msg_Event::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.EG_Msg.Event.value)
}

// -------------------------------------------------------------------

// Message_EG_Msg

// int32 type = 1;
inline void Message_EG_Msg::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_EG_Msg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_EG_Msg::type() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.type)
  return _internal_type();
}
inline void Message_EG_Msg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Message_EG_Msg::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.type)
}

// uint32 instance = 2;
inline void Message_EG_Msg::clear_instance() {
  instance_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg::_internal_instance() const {
  return instance_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg::instance() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.instance)
  return _internal_instance();
}
inline void Message_EG_Msg::_internal_set_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  instance_ = value;
}
inline void Message_EG_Msg::set_instance(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_instance(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.instance)
}

// uint32 cycle = 3;
inline void Message_EG_Msg::clear_cycle() {
  cycle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg::_internal_cycle() const {
  return cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message_EG_Msg::cycle() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.cycle)
  return _internal_cycle();
}
inline void Message_EG_Msg::_internal_set_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cycle_ = value;
}
inline void Message_EG_Msg::set_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cycle(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.EG_Msg.cycle)
}

// .megastructure.Message.EG_Msg.Request request = 4;
inline bool Message_EG_Msg::_internal_has_request() const {
  return foobar_case() == kRequest;
}
inline bool Message_EG_Msg::has_request() const {
  return _internal_has_request();
}
inline void Message_EG_Msg::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void Message_EG_Msg::clear_request() {
  if (_internal_has_request()) {
    if (GetArena() == nullptr) {
      delete foobar_.request_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Request* Message_EG_Msg::release_request() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.request)
  if (_internal_has_request()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Request* temp = foobar_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Request& Message_EG_Msg::_internal_request() const {
  return _internal_has_request()
      ? *foobar_.request_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Request*>(&::megastructure::_Message_EG_Msg_Request_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Request& Message_EG_Msg::request() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.request)
  return _internal_request();
}
inline ::megastructure::Message_EG_Msg_Request* Message_EG_Msg::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.request)
  if (_internal_has_request()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Request* temp = foobar_.request_;
    foobar_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg::unsafe_arena_set_allocated_request(::megastructure::Message_EG_Msg_Request* request) {
  clear_foobar();
  if (request) {
    set_has_request();
    foobar_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.request)
}
inline ::megastructure::Message_EG_Msg_Request* Message_EG_Msg::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_foobar();
    set_has_request();
    foobar_.request_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Request >(GetArena());
  }
  return foobar_.request_;
}
inline ::megastructure::Message_EG_Msg_Request* Message_EG_Msg::mutable_request() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.request)
  return _internal_mutable_request();
}

// .megastructure.Message.EG_Msg.Response response = 5;
inline bool Message_EG_Msg::_internal_has_response() const {
  return foobar_case() == kResponse;
}
inline bool Message_EG_Msg::has_response() const {
  return _internal_has_response();
}
inline void Message_EG_Msg::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void Message_EG_Msg::clear_response() {
  if (_internal_has_response()) {
    if (GetArena() == nullptr) {
      delete foobar_.response_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Response* Message_EG_Msg::release_response() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.response)
  if (_internal_has_response()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Response* temp = foobar_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Response& Message_EG_Msg::_internal_response() const {
  return _internal_has_response()
      ? *foobar_.response_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Response*>(&::megastructure::_Message_EG_Msg_Response_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Response& Message_EG_Msg::response() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.response)
  return _internal_response();
}
inline ::megastructure::Message_EG_Msg_Response* Message_EG_Msg::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.response)
  if (_internal_has_response()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Response* temp = foobar_.response_;
    foobar_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg::unsafe_arena_set_allocated_response(::megastructure::Message_EG_Msg_Response* response) {
  clear_foobar();
  if (response) {
    set_has_response();
    foobar_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.response)
}
inline ::megastructure::Message_EG_Msg_Response* Message_EG_Msg::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_foobar();
    set_has_response();
    foobar_.response_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Response >(GetArena());
  }
  return foobar_.response_;
}
inline ::megastructure::Message_EG_Msg_Response* Message_EG_Msg::mutable_response() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.response)
  return _internal_mutable_response();
}

// .megastructure.Message.EG_Msg.Error error = 6;
inline bool Message_EG_Msg::_internal_has_error() const {
  return foobar_case() == kError;
}
inline bool Message_EG_Msg::has_error() const {
  return _internal_has_error();
}
inline void Message_EG_Msg::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void Message_EG_Msg::clear_error() {
  if (_internal_has_error()) {
    if (GetArena() == nullptr) {
      delete foobar_.error_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Error* Message_EG_Msg::release_error() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.error)
  if (_internal_has_error()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Error* temp = foobar_.error_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Error& Message_EG_Msg::_internal_error() const {
  return _internal_has_error()
      ? *foobar_.error_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Error*>(&::megastructure::_Message_EG_Msg_Error_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Error& Message_EG_Msg::error() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.error)
  return _internal_error();
}
inline ::megastructure::Message_EG_Msg_Error* Message_EG_Msg::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.error)
  if (_internal_has_error()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Error* temp = foobar_.error_;
    foobar_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg::unsafe_arena_set_allocated_error(::megastructure::Message_EG_Msg_Error* error) {
  clear_foobar();
  if (error) {
    set_has_error();
    foobar_.error_ = error;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.error)
}
inline ::megastructure::Message_EG_Msg_Error* Message_EG_Msg::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_foobar();
    set_has_error();
    foobar_.error_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Error >(GetArena());
  }
  return foobar_.error_;
}
inline ::megastructure::Message_EG_Msg_Error* Message_EG_Msg::mutable_error() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.error)
  return _internal_mutable_error();
}

// .megastructure.Message.EG_Msg.Event event = 7;
inline bool Message_EG_Msg::_internal_has_event() const {
  return foobar_case() == kEvent;
}
inline bool Message_EG_Msg::has_event() const {
  return _internal_has_event();
}
inline void Message_EG_Msg::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void Message_EG_Msg::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete foobar_.event_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg_Event* Message_EG_Msg::release_event() {
  // @@protoc_insertion_point(field_release:megastructure.Message.EG_Msg.event)
  if (_internal_has_event()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg_Event* temp = foobar_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg_Event& Message_EG_Msg::_internal_event() const {
  return _internal_has_event()
      ? *foobar_.event_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg_Event*>(&::megastructure::_Message_EG_Msg_Event_default_instance_);
}
inline const ::megastructure::Message_EG_Msg_Event& Message_EG_Msg::event() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.EG_Msg.event)
  return _internal_event();
}
inline ::megastructure::Message_EG_Msg_Event* Message_EG_Msg::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.EG_Msg.event)
  if (_internal_has_event()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg_Event* temp = foobar_.event_;
    foobar_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message_EG_Msg::unsafe_arena_set_allocated_event(::megastructure::Message_EG_Msg_Event* event) {
  clear_foobar();
  if (event) {
    set_has_event();
    foobar_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.EG_Msg.event)
}
inline ::megastructure::Message_EG_Msg_Event* Message_EG_Msg::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_foobar();
    set_has_event();
    foobar_.event_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg_Event >(GetArena());
  }
  return foobar_.event_;
}
inline ::megastructure::Message_EG_Msg_Event* Message_EG_Msg::mutable_event() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.EG_Msg.event)
  return _internal_mutable_event();
}

inline bool Message_EG_Msg::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message_EG_Msg::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message_EG_Msg::FoobarCase Message_EG_Msg::foobar_case() const {
  return Message_EG_Msg::FoobarCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Message

// .megastructure.Message.SMQ_Enroll smq_enroll = 2;
inline bool Message::_internal_has_smq_enroll() const {
  return foobar_case() == kSmqEnroll;
}
inline bool Message::has_smq_enroll() const {
  return _internal_has_smq_enroll();
}
inline void Message::set_has_smq_enroll() {
  _oneof_case_[0] = kSmqEnroll;
}
inline void Message::clear_smq_enroll() {
  if (_internal_has_smq_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.smq_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMQ_Enroll* Message::release_smq_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.smq_enroll)
  if (_internal_has_smq_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_SMQ_Enroll* temp = foobar_.smq_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.smq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMQ_Enroll& Message::_internal_smq_enroll() const {
  return _internal_has_smq_enroll()
      ? *foobar_.smq_enroll_
      : *reinterpret_cast< ::megastructure::Message_SMQ_Enroll*>(&::megastructure::_Message_SMQ_Enroll_default_instance_);
}
inline const ::megastructure::Message_SMQ_Enroll& Message::smq_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.smq_enroll)
  return _internal_smq_enroll();
}
inline ::megastructure::Message_SMQ_Enroll* Message::unsafe_arena_release_smq_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.smq_enroll)
  if (_internal_has_smq_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_SMQ_Enroll* temp = foobar_.smq_enroll_;
    foobar_.smq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_smq_enroll(::megastructure::Message_SMQ_Enroll* smq_enroll) {
  clear_foobar();
  if (smq_enroll) {
    set_has_smq_enroll();
    foobar_.smq_enroll_ = smq_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.smq_enroll)
}
inline ::megastructure::Message_SMQ_Enroll* Message::_internal_mutable_smq_enroll() {
  if (!_internal_has_smq_enroll()) {
    clear_foobar();
    set_has_smq_enroll();
    foobar_.smq_enroll_ = CreateMaybeMessage< ::megastructure::Message_SMQ_Enroll >(GetArena());
  }
  return foobar_.smq_enroll_;
}
inline ::megastructure::Message_SMQ_Enroll* Message::mutable_smq_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.smq_enroll)
  return _internal_mutable_smq_enroll();
}

// .megastructure.Message.MSS_Enroll mss_enroll = 3;
inline bool Message::_internal_has_mss_enroll() const {
  return foobar_case() == kMssEnroll;
}
inline bool Message::has_mss_enroll() const {
  return _internal_has_mss_enroll();
}
inline void Message::set_has_mss_enroll() {
  _oneof_case_[0] = kMssEnroll;
}
inline void Message::clear_mss_enroll() {
  if (_internal_has_mss_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.mss_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSS_Enroll* Message::release_mss_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.mss_enroll)
  if (_internal_has_mss_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_MSS_Enroll* temp = foobar_.mss_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.mss_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSS_Enroll& Message::_internal_mss_enroll() const {
  return _internal_has_mss_enroll()
      ? *foobar_.mss_enroll_
      : *reinterpret_cast< ::megastructure::Message_MSS_Enroll*>(&::megastructure::_Message_MSS_Enroll_default_instance_);
}
inline const ::megastructure::Message_MSS_Enroll& Message::mss_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.mss_enroll)
  return _internal_mss_enroll();
}
inline ::megastructure::Message_MSS_Enroll* Message::unsafe_arena_release_mss_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.mss_enroll)
  if (_internal_has_mss_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_MSS_Enroll* temp = foobar_.mss_enroll_;
    foobar_.mss_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_mss_enroll(::megastructure::Message_MSS_Enroll* mss_enroll) {
  clear_foobar();
  if (mss_enroll) {
    set_has_mss_enroll();
    foobar_.mss_enroll_ = mss_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.mss_enroll)
}
inline ::megastructure::Message_MSS_Enroll* Message::_internal_mutable_mss_enroll() {
  if (!_internal_has_mss_enroll()) {
    clear_foobar();
    set_has_mss_enroll();
    foobar_.mss_enroll_ = CreateMaybeMessage< ::megastructure::Message_MSS_Enroll >(GetArena());
  }
  return foobar_.mss_enroll_;
}
inline ::megastructure::Message_MSS_Enroll* Message::mutable_mss_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.mss_enroll)
  return _internal_mutable_mss_enroll();
}

// .megastructure.Message.MSQ_Alive msq_alive = 4;
inline bool Message::_internal_has_msq_alive() const {
  return foobar_case() == kMsqAlive;
}
inline bool Message::has_msq_alive() const {
  return _internal_has_msq_alive();
}
inline void Message::set_has_msq_alive() {
  _oneof_case_[0] = kMsqAlive;
}
inline void Message::clear_msq_alive() {
  if (_internal_has_msq_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSQ_Alive* Message::release_msq_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.msq_alive)
  if (_internal_has_msq_alive()) {
    clear_has_foobar();
      ::megastructure::Message_MSQ_Alive* temp = foobar_.msq_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSQ_Alive& Message::_internal_msq_alive() const {
  return _internal_has_msq_alive()
      ? *foobar_.msq_alive_
      : *reinterpret_cast< ::megastructure::Message_MSQ_Alive*>(&::megastructure::_Message_MSQ_Alive_default_instance_);
}
inline const ::megastructure::Message_MSQ_Alive& Message::msq_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.msq_alive)
  return _internal_msq_alive();
}
inline ::megastructure::Message_MSQ_Alive* Message::unsafe_arena_release_msq_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.msq_alive)
  if (_internal_has_msq_alive()) {
    clear_has_foobar();
    ::megastructure::Message_MSQ_Alive* temp = foobar_.msq_alive_;
    foobar_.msq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_msq_alive(::megastructure::Message_MSQ_Alive* msq_alive) {
  clear_foobar();
  if (msq_alive) {
    set_has_msq_alive();
    foobar_.msq_alive_ = msq_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.msq_alive)
}
inline ::megastructure::Message_MSQ_Alive* Message::_internal_mutable_msq_alive() {
  if (!_internal_has_msq_alive()) {
    clear_foobar();
    set_has_msq_alive();
    foobar_.msq_alive_ = CreateMaybeMessage< ::megastructure::Message_MSQ_Alive >(GetArena());
  }
  return foobar_.msq_alive_;
}
inline ::megastructure::Message_MSQ_Alive* Message::mutable_msq_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.msq_alive)
  return _internal_mutable_msq_alive();
}

// .megastructure.Message.SMS_Alive sms_alive = 5;
inline bool Message::_internal_has_sms_alive() const {
  return foobar_case() == kSmsAlive;
}
inline bool Message::has_sms_alive() const {
  return _internal_has_sms_alive();
}
inline void Message::set_has_sms_alive() {
  _oneof_case_[0] = kSmsAlive;
}
inline void Message::clear_sms_alive() {
  if (_internal_has_sms_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMS_Alive* Message::release_sms_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.sms_alive)
  if (_internal_has_sms_alive()) {
    clear_has_foobar();
      ::megastructure::Message_SMS_Alive* temp = foobar_.sms_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMS_Alive& Message::_internal_sms_alive() const {
  return _internal_has_sms_alive()
      ? *foobar_.sms_alive_
      : *reinterpret_cast< ::megastructure::Message_SMS_Alive*>(&::megastructure::_Message_SMS_Alive_default_instance_);
}
inline const ::megastructure::Message_SMS_Alive& Message::sms_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.sms_alive)
  return _internal_sms_alive();
}
inline ::megastructure::Message_SMS_Alive* Message::unsafe_arena_release_sms_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.sms_alive)
  if (_internal_has_sms_alive()) {
    clear_has_foobar();
    ::megastructure::Message_SMS_Alive* temp = foobar_.sms_alive_;
    foobar_.sms_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sms_alive(::megastructure::Message_SMS_Alive* sms_alive) {
  clear_foobar();
  if (sms_alive) {
    set_has_sms_alive();
    foobar_.sms_alive_ = sms_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.sms_alive)
}
inline ::megastructure::Message_SMS_Alive* Message::_internal_mutable_sms_alive() {
  if (!_internal_has_sms_alive()) {
    clear_foobar();
    set_has_sms_alive();
    foobar_.sms_alive_ = CreateMaybeMessage< ::megastructure::Message_SMS_Alive >(GetArena());
  }
  return foobar_.sms_alive_;
}
inline ::megastructure::Message_SMS_Alive* Message::mutable_sms_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.sms_alive)
  return _internal_mutable_sms_alive();
}

// .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
inline bool Message::_internal_has_hcq_enroll() const {
  return foobar_case() == kHcqEnroll;
}
inline bool Message::has_hcq_enroll() const {
  return _internal_has_hcq_enroll();
}
inline void Message::set_has_hcq_enroll() {
  _oneof_case_[0] = kHcqEnroll;
}
inline void Message::clear_hcq_enroll() {
  if (_internal_has_hcq_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcq_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCQ_Enroll* Message::release_hcq_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcq_enroll)
  if (_internal_has_hcq_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_HCQ_Enroll* temp = foobar_.hcq_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCQ_Enroll& Message::_internal_hcq_enroll() const {
  return _internal_has_hcq_enroll()
      ? *foobar_.hcq_enroll_
      : *reinterpret_cast< ::megastructure::Message_HCQ_Enroll*>(&::megastructure::_Message_HCQ_Enroll_default_instance_);
}
inline const ::megastructure::Message_HCQ_Enroll& Message::hcq_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcq_enroll)
  return _internal_hcq_enroll();
}
inline ::megastructure::Message_HCQ_Enroll* Message::unsafe_arena_release_hcq_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcq_enroll)
  if (_internal_has_hcq_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_HCQ_Enroll* temp = foobar_.hcq_enroll_;
    foobar_.hcq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcq_enroll(::megastructure::Message_HCQ_Enroll* hcq_enroll) {
  clear_foobar();
  if (hcq_enroll) {
    set_has_hcq_enroll();
    foobar_.hcq_enroll_ = hcq_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcq_enroll)
}
inline ::megastructure::Message_HCQ_Enroll* Message::_internal_mutable_hcq_enroll() {
  if (!_internal_has_hcq_enroll()) {
    clear_foobar();
    set_has_hcq_enroll();
    foobar_.hcq_enroll_ = CreateMaybeMessage< ::megastructure::Message_HCQ_Enroll >(GetArena());
  }
  return foobar_.hcq_enroll_;
}
inline ::megastructure::Message_HCQ_Enroll* Message::mutable_hcq_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcq_enroll)
  return _internal_mutable_hcq_enroll();
}

// .megastructure.Message.CHS_Enroll chs_enroll = 7;
inline bool Message::_internal_has_chs_enroll() const {
  return foobar_case() == kChsEnroll;
}
inline bool Message::has_chs_enroll() const {
  return _internal_has_chs_enroll();
}
inline void Message::set_has_chs_enroll() {
  _oneof_case_[0] = kChsEnroll;
}
inline void Message::clear_chs_enroll() {
  if (_internal_has_chs_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.chs_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHS_Enroll* Message::release_chs_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chs_enroll)
  if (_internal_has_chs_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_CHS_Enroll* temp = foobar_.chs_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chs_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHS_Enroll& Message::_internal_chs_enroll() const {
  return _internal_has_chs_enroll()
      ? *foobar_.chs_enroll_
      : *reinterpret_cast< ::megastructure::Message_CHS_Enroll*>(&::megastructure::_Message_CHS_Enroll_default_instance_);
}
inline const ::megastructure::Message_CHS_Enroll& Message::chs_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chs_enroll)
  return _internal_chs_enroll();
}
inline ::megastructure::Message_CHS_Enroll* Message::unsafe_arena_release_chs_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chs_enroll)
  if (_internal_has_chs_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_CHS_Enroll* temp = foobar_.chs_enroll_;
    foobar_.chs_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chs_enroll(::megastructure::Message_CHS_Enroll* chs_enroll) {
  clear_foobar();
  if (chs_enroll) {
    set_has_chs_enroll();
    foobar_.chs_enroll_ = chs_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chs_enroll)
}
inline ::megastructure::Message_CHS_Enroll* Message::_internal_mutable_chs_enroll() {
  if (!_internal_has_chs_enroll()) {
    clear_foobar();
    set_has_chs_enroll();
    foobar_.chs_enroll_ = CreateMaybeMessage< ::megastructure::Message_CHS_Enroll >(GetArena());
  }
  return foobar_.chs_enroll_;
}
inline ::megastructure::Message_CHS_Enroll* Message::mutable_chs_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chs_enroll)
  return _internal_mutable_chs_enroll();
}

// .megastructure.Message.HCQ_EnrollEG hcq_enrolleg = 8;
inline bool Message::_internal_has_hcq_enrolleg() const {
  return foobar_case() == kHcqEnrolleg;
}
inline bool Message::has_hcq_enrolleg() const {
  return _internal_has_hcq_enrolleg();
}
inline void Message::set_has_hcq_enrolleg() {
  _oneof_case_[0] = kHcqEnrolleg;
}
inline void Message::clear_hcq_enrolleg() {
  if (_internal_has_hcq_enrolleg()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcq_enrolleg_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCQ_EnrollEG* Message::release_hcq_enrolleg() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcq_enrolleg)
  if (_internal_has_hcq_enrolleg()) {
    clear_has_foobar();
      ::megastructure::Message_HCQ_EnrollEG* temp = foobar_.hcq_enrolleg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcq_enrolleg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCQ_EnrollEG& Message::_internal_hcq_enrolleg() const {
  return _internal_has_hcq_enrolleg()
      ? *foobar_.hcq_enrolleg_
      : *reinterpret_cast< ::megastructure::Message_HCQ_EnrollEG*>(&::megastructure::_Message_HCQ_EnrollEG_default_instance_);
}
inline const ::megastructure::Message_HCQ_EnrollEG& Message::hcq_enrolleg() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcq_enrolleg)
  return _internal_hcq_enrolleg();
}
inline ::megastructure::Message_HCQ_EnrollEG* Message::unsafe_arena_release_hcq_enrolleg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcq_enrolleg)
  if (_internal_has_hcq_enrolleg()) {
    clear_has_foobar();
    ::megastructure::Message_HCQ_EnrollEG* temp = foobar_.hcq_enrolleg_;
    foobar_.hcq_enrolleg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcq_enrolleg(::megastructure::Message_HCQ_EnrollEG* hcq_enrolleg) {
  clear_foobar();
  if (hcq_enrolleg) {
    set_has_hcq_enrolleg();
    foobar_.hcq_enrolleg_ = hcq_enrolleg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcq_enrolleg)
}
inline ::megastructure::Message_HCQ_EnrollEG* Message::_internal_mutable_hcq_enrolleg() {
  if (!_internal_has_hcq_enrolleg()) {
    clear_foobar();
    set_has_hcq_enrolleg();
    foobar_.hcq_enrolleg_ = CreateMaybeMessage< ::megastructure::Message_HCQ_EnrollEG >(GetArena());
  }
  return foobar_.hcq_enrolleg_;
}
inline ::megastructure::Message_HCQ_EnrollEG* Message::mutable_hcq_enrolleg() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcq_enrolleg)
  return _internal_mutable_hcq_enrolleg();
}

// .megastructure.Message.CHS_EnrollEG chs_enrolleg = 9;
inline bool Message::_internal_has_chs_enrolleg() const {
  return foobar_case() == kChsEnrolleg;
}
inline bool Message::has_chs_enrolleg() const {
  return _internal_has_chs_enrolleg();
}
inline void Message::set_has_chs_enrolleg() {
  _oneof_case_[0] = kChsEnrolleg;
}
inline void Message::clear_chs_enrolleg() {
  if (_internal_has_chs_enrolleg()) {
    if (GetArena() == nullptr) {
      delete foobar_.chs_enrolleg_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHS_EnrollEG* Message::release_chs_enrolleg() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chs_enrolleg)
  if (_internal_has_chs_enrolleg()) {
    clear_has_foobar();
      ::megastructure::Message_CHS_EnrollEG* temp = foobar_.chs_enrolleg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chs_enrolleg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHS_EnrollEG& Message::_internal_chs_enrolleg() const {
  return _internal_has_chs_enrolleg()
      ? *foobar_.chs_enrolleg_
      : *reinterpret_cast< ::megastructure::Message_CHS_EnrollEG*>(&::megastructure::_Message_CHS_EnrollEG_default_instance_);
}
inline const ::megastructure::Message_CHS_EnrollEG& Message::chs_enrolleg() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chs_enrolleg)
  return _internal_chs_enrolleg();
}
inline ::megastructure::Message_CHS_EnrollEG* Message::unsafe_arena_release_chs_enrolleg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chs_enrolleg)
  if (_internal_has_chs_enrolleg()) {
    clear_has_foobar();
    ::megastructure::Message_CHS_EnrollEG* temp = foobar_.chs_enrolleg_;
    foobar_.chs_enrolleg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chs_enrolleg(::megastructure::Message_CHS_EnrollEG* chs_enrolleg) {
  clear_foobar();
  if (chs_enrolleg) {
    set_has_chs_enrolleg();
    foobar_.chs_enrolleg_ = chs_enrolleg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chs_enrolleg)
}
inline ::megastructure::Message_CHS_EnrollEG* Message::_internal_mutable_chs_enrolleg() {
  if (!_internal_has_chs_enrolleg()) {
    clear_foobar();
    set_has_chs_enrolleg();
    foobar_.chs_enrolleg_ = CreateMaybeMessage< ::megastructure::Message_CHS_EnrollEG >(GetArena());
  }
  return foobar_.chs_enrolleg_;
}
inline ::megastructure::Message_CHS_EnrollEG* Message::mutable_chs_enrolleg() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chs_enrolleg)
  return _internal_mutable_chs_enrolleg();
}

// .megastructure.Message.CHQ_Alive chq_alive = 10;
inline bool Message::_internal_has_chq_alive() const {
  return foobar_case() == kChqAlive;
}
inline bool Message::has_chq_alive() const {
  return _internal_has_chq_alive();
}
inline void Message::set_has_chq_alive() {
  _oneof_case_[0] = kChqAlive;
}
inline void Message::clear_chq_alive() {
  if (_internal_has_chq_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.chq_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHQ_Alive* Message::release_chq_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chq_alive)
  if (_internal_has_chq_alive()) {
    clear_has_foobar();
      ::megastructure::Message_CHQ_Alive* temp = foobar_.chq_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHQ_Alive& Message::_internal_chq_alive() const {
  return _internal_has_chq_alive()
      ? *foobar_.chq_alive_
      : *reinterpret_cast< ::megastructure::Message_CHQ_Alive*>(&::megastructure::_Message_CHQ_Alive_default_instance_);
}
inline const ::megastructure::Message_CHQ_Alive& Message::chq_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chq_alive)
  return _internal_chq_alive();
}
inline ::megastructure::Message_CHQ_Alive* Message::unsafe_arena_release_chq_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chq_alive)
  if (_internal_has_chq_alive()) {
    clear_has_foobar();
    ::megastructure::Message_CHQ_Alive* temp = foobar_.chq_alive_;
    foobar_.chq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chq_alive(::megastructure::Message_CHQ_Alive* chq_alive) {
  clear_foobar();
  if (chq_alive) {
    set_has_chq_alive();
    foobar_.chq_alive_ = chq_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chq_alive)
}
inline ::megastructure::Message_CHQ_Alive* Message::_internal_mutable_chq_alive() {
  if (!_internal_has_chq_alive()) {
    clear_foobar();
    set_has_chq_alive();
    foobar_.chq_alive_ = CreateMaybeMessage< ::megastructure::Message_CHQ_Alive >(GetArena());
  }
  return foobar_.chq_alive_;
}
inline ::megastructure::Message_CHQ_Alive* Message::mutable_chq_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chq_alive)
  return _internal_mutable_chq_alive();
}

// .megastructure.Message.HCS_Alive hcs_alive = 11;
inline bool Message::_internal_has_hcs_alive() const {
  return foobar_case() == kHcsAlive;
}
inline bool Message::has_hcs_alive() const {
  return _internal_has_hcs_alive();
}
inline void Message::set_has_hcs_alive() {
  _oneof_case_[0] = kHcsAlive;
}
inline void Message::clear_hcs_alive() {
  if (_internal_has_hcs_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcs_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCS_Alive* Message::release_hcs_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcs_alive)
  if (_internal_has_hcs_alive()) {
    clear_has_foobar();
      ::megastructure::Message_HCS_Alive* temp = foobar_.hcs_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcs_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCS_Alive& Message::_internal_hcs_alive() const {
  return _internal_has_hcs_alive()
      ? *foobar_.hcs_alive_
      : *reinterpret_cast< ::megastructure::Message_HCS_Alive*>(&::megastructure::_Message_HCS_Alive_default_instance_);
}
inline const ::megastructure::Message_HCS_Alive& Message::hcs_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcs_alive)
  return _internal_hcs_alive();
}
inline ::megastructure::Message_HCS_Alive* Message::unsafe_arena_release_hcs_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcs_alive)
  if (_internal_has_hcs_alive()) {
    clear_has_foobar();
    ::megastructure::Message_HCS_Alive* temp = foobar_.hcs_alive_;
    foobar_.hcs_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcs_alive(::megastructure::Message_HCS_Alive* hcs_alive) {
  clear_foobar();
  if (hcs_alive) {
    set_has_hcs_alive();
    foobar_.hcs_alive_ = hcs_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcs_alive)
}
inline ::megastructure::Message_HCS_Alive* Message::_internal_mutable_hcs_alive() {
  if (!_internal_has_hcs_alive()) {
    clear_foobar();
    set_has_hcs_alive();
    foobar_.hcs_alive_ = CreateMaybeMessage< ::megastructure::Message_HCS_Alive >(GetArena());
  }
  return foobar_.hcs_alive_;
}
inline ::megastructure::Message_HCS_Alive* Message::mutable_hcs_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcs_alive)
  return _internal_mutable_hcs_alive();
}

// .megastructure.Message.MSQ_Load msq_load = 12;
inline bool Message::_internal_has_msq_load() const {
  return foobar_case() == kMsqLoad;
}
inline bool Message::has_msq_load() const {
  return _internal_has_msq_load();
}
inline void Message::set_has_msq_load() {
  _oneof_case_[0] = kMsqLoad;
}
inline void Message::clear_msq_load() {
  if (_internal_has_msq_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSQ_Load* Message::release_msq_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.msq_load)
  if (_internal_has_msq_load()) {
    clear_has_foobar();
      ::megastructure::Message_MSQ_Load* temp = foobar_.msq_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSQ_Load& Message::_internal_msq_load() const {
  return _internal_has_msq_load()
      ? *foobar_.msq_load_
      : *reinterpret_cast< ::megastructure::Message_MSQ_Load*>(&::megastructure::_Message_MSQ_Load_default_instance_);
}
inline const ::megastructure::Message_MSQ_Load& Message::msq_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.msq_load)
  return _internal_msq_load();
}
inline ::megastructure::Message_MSQ_Load* Message::unsafe_arena_release_msq_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.msq_load)
  if (_internal_has_msq_load()) {
    clear_has_foobar();
    ::megastructure::Message_MSQ_Load* temp = foobar_.msq_load_;
    foobar_.msq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_msq_load(::megastructure::Message_MSQ_Load* msq_load) {
  clear_foobar();
  if (msq_load) {
    set_has_msq_load();
    foobar_.msq_load_ = msq_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.msq_load)
}
inline ::megastructure::Message_MSQ_Load* Message::_internal_mutable_msq_load() {
  if (!_internal_has_msq_load()) {
    clear_foobar();
    set_has_msq_load();
    foobar_.msq_load_ = CreateMaybeMessage< ::megastructure::Message_MSQ_Load >(GetArena());
  }
  return foobar_.msq_load_;
}
inline ::megastructure::Message_MSQ_Load* Message::mutable_msq_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.msq_load)
  return _internal_mutable_msq_load();
}

// .megastructure.Message.SMS_Load sms_load = 13;
inline bool Message::_internal_has_sms_load() const {
  return foobar_case() == kSmsLoad;
}
inline bool Message::has_sms_load() const {
  return _internal_has_sms_load();
}
inline void Message::set_has_sms_load() {
  _oneof_case_[0] = kSmsLoad;
}
inline void Message::clear_sms_load() {
  if (_internal_has_sms_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMS_Load* Message::release_sms_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.sms_load)
  if (_internal_has_sms_load()) {
    clear_has_foobar();
      ::megastructure::Message_SMS_Load* temp = foobar_.sms_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMS_Load& Message::_internal_sms_load() const {
  return _internal_has_sms_load()
      ? *foobar_.sms_load_
      : *reinterpret_cast< ::megastructure::Message_SMS_Load*>(&::megastructure::_Message_SMS_Load_default_instance_);
}
inline const ::megastructure::Message_SMS_Load& Message::sms_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.sms_load)
  return _internal_sms_load();
}
inline ::megastructure::Message_SMS_Load* Message::unsafe_arena_release_sms_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.sms_load)
  if (_internal_has_sms_load()) {
    clear_has_foobar();
    ::megastructure::Message_SMS_Load* temp = foobar_.sms_load_;
    foobar_.sms_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sms_load(::megastructure::Message_SMS_Load* sms_load) {
  clear_foobar();
  if (sms_load) {
    set_has_sms_load();
    foobar_.sms_load_ = sms_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.sms_load)
}
inline ::megastructure::Message_SMS_Load* Message::_internal_mutable_sms_load() {
  if (!_internal_has_sms_load()) {
    clear_foobar();
    set_has_sms_load();
    foobar_.sms_load_ = CreateMaybeMessage< ::megastructure::Message_SMS_Load >(GetArena());
  }
  return foobar_.sms_load_;
}
inline ::megastructure::Message_SMS_Load* Message::mutable_sms_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.sms_load)
  return _internal_mutable_sms_load();
}

// .megastructure.Message.CHQ_Load chq_load = 14;
inline bool Message::_internal_has_chq_load() const {
  return foobar_case() == kChqLoad;
}
inline bool Message::has_chq_load() const {
  return _internal_has_chq_load();
}
inline void Message::set_has_chq_load() {
  _oneof_case_[0] = kChqLoad;
}
inline void Message::clear_chq_load() {
  if (_internal_has_chq_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.chq_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHQ_Load* Message::release_chq_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chq_load)
  if (_internal_has_chq_load()) {
    clear_has_foobar();
      ::megastructure::Message_CHQ_Load* temp = foobar_.chq_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHQ_Load& Message::_internal_chq_load() const {
  return _internal_has_chq_load()
      ? *foobar_.chq_load_
      : *reinterpret_cast< ::megastructure::Message_CHQ_Load*>(&::megastructure::_Message_CHQ_Load_default_instance_);
}
inline const ::megastructure::Message_CHQ_Load& Message::chq_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chq_load)
  return _internal_chq_load();
}
inline ::megastructure::Message_CHQ_Load* Message::unsafe_arena_release_chq_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chq_load)
  if (_internal_has_chq_load()) {
    clear_has_foobar();
    ::megastructure::Message_CHQ_Load* temp = foobar_.chq_load_;
    foobar_.chq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chq_load(::megastructure::Message_CHQ_Load* chq_load) {
  clear_foobar();
  if (chq_load) {
    set_has_chq_load();
    foobar_.chq_load_ = chq_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chq_load)
}
inline ::megastructure::Message_CHQ_Load* Message::_internal_mutable_chq_load() {
  if (!_internal_has_chq_load()) {
    clear_foobar();
    set_has_chq_load();
    foobar_.chq_load_ = CreateMaybeMessage< ::megastructure::Message_CHQ_Load >(GetArena());
  }
  return foobar_.chq_load_;
}
inline ::megastructure::Message_CHQ_Load* Message::mutable_chq_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chq_load)
  return _internal_mutable_chq_load();
}

// .megastructure.Message.HCS_Load hcs_load = 15;
inline bool Message::_internal_has_hcs_load() const {
  return foobar_case() == kHcsLoad;
}
inline bool Message::has_hcs_load() const {
  return _internal_has_hcs_load();
}
inline void Message::set_has_hcs_load() {
  _oneof_case_[0] = kHcsLoad;
}
inline void Message::clear_hcs_load() {
  if (_internal_has_hcs_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcs_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCS_Load* Message::release_hcs_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcs_load)
  if (_internal_has_hcs_load()) {
    clear_has_foobar();
      ::megastructure::Message_HCS_Load* temp = foobar_.hcs_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcs_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCS_Load& Message::_internal_hcs_load() const {
  return _internal_has_hcs_load()
      ? *foobar_.hcs_load_
      : *reinterpret_cast< ::megastructure::Message_HCS_Load*>(&::megastructure::_Message_HCS_Load_default_instance_);
}
inline const ::megastructure::Message_HCS_Load& Message::hcs_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcs_load)
  return _internal_hcs_load();
}
inline ::megastructure::Message_HCS_Load* Message::unsafe_arena_release_hcs_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcs_load)
  if (_internal_has_hcs_load()) {
    clear_has_foobar();
    ::megastructure::Message_HCS_Load* temp = foobar_.hcs_load_;
    foobar_.hcs_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcs_load(::megastructure::Message_HCS_Load* hcs_load) {
  clear_foobar();
  if (hcs_load) {
    set_has_hcs_load();
    foobar_.hcs_load_ = hcs_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcs_load)
}
inline ::megastructure::Message_HCS_Load* Message::_internal_mutable_hcs_load() {
  if (!_internal_has_hcs_load()) {
    clear_foobar();
    set_has_hcs_load();
    foobar_.hcs_load_ = CreateMaybeMessage< ::megastructure::Message_HCS_Load >(GetArena());
  }
  return foobar_.hcs_load_;
}
inline ::megastructure::Message_HCS_Load* Message::mutable_hcs_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcs_load)
  return _internal_mutable_hcs_load();
}

// .megastructure.Message.HCQ_Buffer hcq_buffer = 16;
inline bool Message::_internal_has_hcq_buffer() const {
  return foobar_case() == kHcqBuffer;
}
inline bool Message::has_hcq_buffer() const {
  return _internal_has_hcq_buffer();
}
inline void Message::set_has_hcq_buffer() {
  _oneof_case_[0] = kHcqBuffer;
}
inline void Message::clear_hcq_buffer() {
  if (_internal_has_hcq_buffer()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcq_buffer_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCQ_Buffer* Message::release_hcq_buffer() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcq_buffer)
  if (_internal_has_hcq_buffer()) {
    clear_has_foobar();
      ::megastructure::Message_HCQ_Buffer* temp = foobar_.hcq_buffer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcq_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCQ_Buffer& Message::_internal_hcq_buffer() const {
  return _internal_has_hcq_buffer()
      ? *foobar_.hcq_buffer_
      : *reinterpret_cast< ::megastructure::Message_HCQ_Buffer*>(&::megastructure::_Message_HCQ_Buffer_default_instance_);
}
inline const ::megastructure::Message_HCQ_Buffer& Message::hcq_buffer() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcq_buffer)
  return _internal_hcq_buffer();
}
inline ::megastructure::Message_HCQ_Buffer* Message::unsafe_arena_release_hcq_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcq_buffer)
  if (_internal_has_hcq_buffer()) {
    clear_has_foobar();
    ::megastructure::Message_HCQ_Buffer* temp = foobar_.hcq_buffer_;
    foobar_.hcq_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcq_buffer(::megastructure::Message_HCQ_Buffer* hcq_buffer) {
  clear_foobar();
  if (hcq_buffer) {
    set_has_hcq_buffer();
    foobar_.hcq_buffer_ = hcq_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcq_buffer)
}
inline ::megastructure::Message_HCQ_Buffer* Message::_internal_mutable_hcq_buffer() {
  if (!_internal_has_hcq_buffer()) {
    clear_foobar();
    set_has_hcq_buffer();
    foobar_.hcq_buffer_ = CreateMaybeMessage< ::megastructure::Message_HCQ_Buffer >(GetArena());
  }
  return foobar_.hcq_buffer_;
}
inline ::megastructure::Message_HCQ_Buffer* Message::mutable_hcq_buffer() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcq_buffer)
  return _internal_mutable_hcq_buffer();
}

// .megastructure.Message.CHS_Buffer chs_buffer = 17;
inline bool Message::_internal_has_chs_buffer() const {
  return foobar_case() == kChsBuffer;
}
inline bool Message::has_chs_buffer() const {
  return _internal_has_chs_buffer();
}
inline void Message::set_has_chs_buffer() {
  _oneof_case_[0] = kChsBuffer;
}
inline void Message::clear_chs_buffer() {
  if (_internal_has_chs_buffer()) {
    if (GetArena() == nullptr) {
      delete foobar_.chs_buffer_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHS_Buffer* Message::release_chs_buffer() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chs_buffer)
  if (_internal_has_chs_buffer()) {
    clear_has_foobar();
      ::megastructure::Message_CHS_Buffer* temp = foobar_.chs_buffer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chs_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHS_Buffer& Message::_internal_chs_buffer() const {
  return _internal_has_chs_buffer()
      ? *foobar_.chs_buffer_
      : *reinterpret_cast< ::megastructure::Message_CHS_Buffer*>(&::megastructure::_Message_CHS_Buffer_default_instance_);
}
inline const ::megastructure::Message_CHS_Buffer& Message::chs_buffer() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chs_buffer)
  return _internal_chs_buffer();
}
inline ::megastructure::Message_CHS_Buffer* Message::unsafe_arena_release_chs_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chs_buffer)
  if (_internal_has_chs_buffer()) {
    clear_has_foobar();
    ::megastructure::Message_CHS_Buffer* temp = foobar_.chs_buffer_;
    foobar_.chs_buffer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chs_buffer(::megastructure::Message_CHS_Buffer* chs_buffer) {
  clear_foobar();
  if (chs_buffer) {
    set_has_chs_buffer();
    foobar_.chs_buffer_ = chs_buffer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chs_buffer)
}
inline ::megastructure::Message_CHS_Buffer* Message::_internal_mutable_chs_buffer() {
  if (!_internal_has_chs_buffer()) {
    clear_foobar();
    set_has_chs_buffer();
    foobar_.chs_buffer_ = CreateMaybeMessage< ::megastructure::Message_CHS_Buffer >(GetArena());
  }
  return foobar_.chs_buffer_;
}
inline ::megastructure::Message_CHS_Buffer* Message::mutable_chs_buffer() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chs_buffer)
  return _internal_mutable_chs_buffer();
}

// .megastructure.Message.Config config_msg = 18;
inline bool Message::_internal_has_config_msg() const {
  return foobar_case() == kConfigMsg;
}
inline bool Message::has_config_msg() const {
  return _internal_has_config_msg();
}
inline void Message::set_has_config_msg() {
  _oneof_case_[0] = kConfigMsg;
}
inline void Message::clear_config_msg() {
  if (_internal_has_config_msg()) {
    if (GetArena() == nullptr) {
      delete foobar_.config_msg_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_Config* Message::release_config_msg() {
  // @@protoc_insertion_point(field_release:megastructure.Message.config_msg)
  if (_internal_has_config_msg()) {
    clear_has_foobar();
      ::megastructure::Message_Config* temp = foobar_.config_msg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.config_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_Config& Message::_internal_config_msg() const {
  return _internal_has_config_msg()
      ? *foobar_.config_msg_
      : *reinterpret_cast< ::megastructure::Message_Config*>(&::megastructure::_Message_Config_default_instance_);
}
inline const ::megastructure::Message_Config& Message::config_msg() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.config_msg)
  return _internal_config_msg();
}
inline ::megastructure::Message_Config* Message::unsafe_arena_release_config_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.config_msg)
  if (_internal_has_config_msg()) {
    clear_has_foobar();
    ::megastructure::Message_Config* temp = foobar_.config_msg_;
    foobar_.config_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_config_msg(::megastructure::Message_Config* config_msg) {
  clear_foobar();
  if (config_msg) {
    set_has_config_msg();
    foobar_.config_msg_ = config_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.config_msg)
}
inline ::megastructure::Message_Config* Message::_internal_mutable_config_msg() {
  if (!_internal_has_config_msg()) {
    clear_foobar();
    set_has_config_msg();
    foobar_.config_msg_ = CreateMaybeMessage< ::megastructure::Message_Config >(GetArena());
  }
  return foobar_.config_msg_;
}
inline ::megastructure::Message_Config* Message::mutable_config_msg() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.config_msg)
  return _internal_mutable_config_msg();
}

// .megastructure.Message.EG_Msg eg_msg = 19;
inline bool Message::_internal_has_eg_msg() const {
  return foobar_case() == kEgMsg;
}
inline bool Message::has_eg_msg() const {
  return _internal_has_eg_msg();
}
inline void Message::set_has_eg_msg() {
  _oneof_case_[0] = kEgMsg;
}
inline void Message::clear_eg_msg() {
  if (_internal_has_eg_msg()) {
    if (GetArena() == nullptr) {
      delete foobar_.eg_msg_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_EG_Msg* Message::release_eg_msg() {
  // @@protoc_insertion_point(field_release:megastructure.Message.eg_msg)
  if (_internal_has_eg_msg()) {
    clear_has_foobar();
      ::megastructure::Message_EG_Msg* temp = foobar_.eg_msg_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.eg_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_EG_Msg& Message::_internal_eg_msg() const {
  return _internal_has_eg_msg()
      ? *foobar_.eg_msg_
      : *reinterpret_cast< ::megastructure::Message_EG_Msg*>(&::megastructure::_Message_EG_Msg_default_instance_);
}
inline const ::megastructure::Message_EG_Msg& Message::eg_msg() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.eg_msg)
  return _internal_eg_msg();
}
inline ::megastructure::Message_EG_Msg* Message::unsafe_arena_release_eg_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.eg_msg)
  if (_internal_has_eg_msg()) {
    clear_has_foobar();
    ::megastructure::Message_EG_Msg* temp = foobar_.eg_msg_;
    foobar_.eg_msg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_eg_msg(::megastructure::Message_EG_Msg* eg_msg) {
  clear_foobar();
  if (eg_msg) {
    set_has_eg_msg();
    foobar_.eg_msg_ = eg_msg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.eg_msg)
}
inline ::megastructure::Message_EG_Msg* Message::_internal_mutable_eg_msg() {
  if (!_internal_has_eg_msg()) {
    clear_foobar();
    set_has_eg_msg();
    foobar_.eg_msg_ = CreateMaybeMessage< ::megastructure::Message_EG_Msg >(GetArena());
  }
  return foobar_.eg_msg_;
}
inline ::megastructure::Message_EG_Msg* Message::mutable_eg_msg() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.eg_msg)
  return _internal_mutable_eg_msg();
}

inline bool Message::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message::FoobarCase Message::foobar_case() const {
  return Message::FoobarCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace megastructure

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
