// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megastructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_megastructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_megastructure_2eproto;
namespace megastructure {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_HostSlaveRequest_Alive;
class Message_HostSlaveRequest_AliveDefaultTypeInternal;
extern Message_HostSlaveRequest_AliveDefaultTypeInternal _Message_HostSlaveRequest_Alive_default_instance_;
class Message_HostSlaveResponse_Enroll;
class Message_HostSlaveResponse_EnrollDefaultTypeInternal;
extern Message_HostSlaveResponse_EnrollDefaultTypeInternal _Message_HostSlaveResponse_Enroll_default_instance_;
class Message_SlaveHostRequest_Enroll;
class Message_SlaveHostRequest_EnrollDefaultTypeInternal;
extern Message_SlaveHostRequest_EnrollDefaultTypeInternal _Message_SlaveHostRequest_Enroll_default_instance_;
class Message_SlaveHostResponse_Alive;
class Message_SlaveHostResponse_AliveDefaultTypeInternal;
extern Message_SlaveHostResponse_AliveDefaultTypeInternal _Message_SlaveHostResponse_Alive_default_instance_;
}  // namespace megastructure
PROTOBUF_NAMESPACE_OPEN
template<> ::megastructure::Message* Arena::CreateMaybeMessage<::megastructure::Message>(Arena*);
template<> ::megastructure::Message_HostSlaveRequest_Alive* Arena::CreateMaybeMessage<::megastructure::Message_HostSlaveRequest_Alive>(Arena*);
template<> ::megastructure::Message_HostSlaveResponse_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_HostSlaveResponse_Enroll>(Arena*);
template<> ::megastructure::Message_SlaveHostRequest_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_SlaveHostRequest_Enroll>(Arena*);
template<> ::megastructure::Message_SlaveHostResponse_Alive* Arena::CreateMaybeMessage<::megastructure::Message_SlaveHostResponse_Alive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace megastructure {

// ===================================================================

class Message_SlaveHostRequest_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SlaveHostRequest_Enroll) */ {
 public:
  inline Message_SlaveHostRequest_Enroll() : Message_SlaveHostRequest_Enroll(nullptr) {};
  virtual ~Message_SlaveHostRequest_Enroll();

  Message_SlaveHostRequest_Enroll(const Message_SlaveHostRequest_Enroll& from);
  Message_SlaveHostRequest_Enroll(Message_SlaveHostRequest_Enroll&& from) noexcept
    : Message_SlaveHostRequest_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_SlaveHostRequest_Enroll& operator=(const Message_SlaveHostRequest_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SlaveHostRequest_Enroll& operator=(Message_SlaveHostRequest_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SlaveHostRequest_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SlaveHostRequest_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_SlaveHostRequest_Enroll*>(
               &_Message_SlaveHostRequest_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_SlaveHostRequest_Enroll& a, Message_SlaveHostRequest_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SlaveHostRequest_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SlaveHostRequest_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SlaveHostRequest_Enroll* New() const final {
    return CreateMaybeMessage<Message_SlaveHostRequest_Enroll>(nullptr);
  }

  Message_SlaveHostRequest_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SlaveHostRequest_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SlaveHostRequest_Enroll& from);
  void MergeFrom(const Message_SlaveHostRequest_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SlaveHostRequest_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SlaveHostRequest_Enroll";
  }
  protected:
  explicit Message_SlaveHostRequest_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slavename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slavename(
      std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SlaveHostRequest_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HostSlaveResponse_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HostSlaveResponse_Enroll) */ {
 public:
  inline Message_HostSlaveResponse_Enroll() : Message_HostSlaveResponse_Enroll(nullptr) {};
  virtual ~Message_HostSlaveResponse_Enroll();

  Message_HostSlaveResponse_Enroll(const Message_HostSlaveResponse_Enroll& from);
  Message_HostSlaveResponse_Enroll(Message_HostSlaveResponse_Enroll&& from) noexcept
    : Message_HostSlaveResponse_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_HostSlaveResponse_Enroll& operator=(const Message_HostSlaveResponse_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HostSlaveResponse_Enroll& operator=(Message_HostSlaveResponse_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HostSlaveResponse_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HostSlaveResponse_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_HostSlaveResponse_Enroll*>(
               &_Message_HostSlaveResponse_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_HostSlaveResponse_Enroll& a, Message_HostSlaveResponse_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HostSlaveResponse_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HostSlaveResponse_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HostSlaveResponse_Enroll* New() const final {
    return CreateMaybeMessage<Message_HostSlaveResponse_Enroll>(nullptr);
  }

  Message_HostSlaveResponse_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HostSlaveResponse_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HostSlaveResponse_Enroll& from);
  void MergeFrom(const Message_HostSlaveResponse_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HostSlaveResponse_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HostSlaveResponse_Enroll";
  }
  protected:
  explicit Message_HostSlaveResponse_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HostSlaveResponse_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HostSlaveRequest_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HostSlaveRequest_Alive) */ {
 public:
  inline Message_HostSlaveRequest_Alive() : Message_HostSlaveRequest_Alive(nullptr) {};
  virtual ~Message_HostSlaveRequest_Alive();

  Message_HostSlaveRequest_Alive(const Message_HostSlaveRequest_Alive& from);
  Message_HostSlaveRequest_Alive(Message_HostSlaveRequest_Alive&& from) noexcept
    : Message_HostSlaveRequest_Alive() {
    *this = ::std::move(from);
  }

  inline Message_HostSlaveRequest_Alive& operator=(const Message_HostSlaveRequest_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HostSlaveRequest_Alive& operator=(Message_HostSlaveRequest_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HostSlaveRequest_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HostSlaveRequest_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_HostSlaveRequest_Alive*>(
               &_Message_HostSlaveRequest_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_HostSlaveRequest_Alive& a, Message_HostSlaveRequest_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HostSlaveRequest_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HostSlaveRequest_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HostSlaveRequest_Alive* New() const final {
    return CreateMaybeMessage<Message_HostSlaveRequest_Alive>(nullptr);
  }

  Message_HostSlaveRequest_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HostSlaveRequest_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HostSlaveRequest_Alive& from);
  void MergeFrom(const Message_HostSlaveRequest_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HostSlaveRequest_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HostSlaveRequest_Alive";
  }
  protected:
  explicit Message_HostSlaveRequest_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slavename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slavename(
      std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HostSlaveRequest_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_SlaveHostResponse_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SlaveHostResponse_Alive) */ {
 public:
  inline Message_SlaveHostResponse_Alive() : Message_SlaveHostResponse_Alive(nullptr) {};
  virtual ~Message_SlaveHostResponse_Alive();

  Message_SlaveHostResponse_Alive(const Message_SlaveHostResponse_Alive& from);
  Message_SlaveHostResponse_Alive(Message_SlaveHostResponse_Alive&& from) noexcept
    : Message_SlaveHostResponse_Alive() {
    *this = ::std::move(from);
  }

  inline Message_SlaveHostResponse_Alive& operator=(const Message_SlaveHostResponse_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SlaveHostResponse_Alive& operator=(Message_SlaveHostResponse_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SlaveHostResponse_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SlaveHostResponse_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_SlaveHostResponse_Alive*>(
               &_Message_SlaveHostResponse_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_SlaveHostResponse_Alive& a, Message_SlaveHostResponse_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SlaveHostResponse_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SlaveHostResponse_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SlaveHostResponse_Alive* New() const final {
    return CreateMaybeMessage<Message_SlaveHostResponse_Alive>(nullptr);
  }

  Message_SlaveHostResponse_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SlaveHostResponse_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SlaveHostResponse_Alive& from);
  void MergeFrom(const Message_SlaveHostResponse_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SlaveHostResponse_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SlaveHostResponse_Alive";
  }
  protected:
  explicit Message_SlaveHostResponse_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SlaveHostResponse_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum FoobarCase {
    kSlavehostrequestEnroll = 2,
    kHostslaveresponseEnroll = 3,
    kHostslaverequestAlive = 4,
    kSlavehostresponseAlive = 5,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_SlaveHostRequest_Enroll SlaveHostRequest_Enroll;
  typedef Message_HostSlaveResponse_Enroll HostSlaveResponse_Enroll;
  typedef Message_HostSlaveRequest_Alive HostSlaveRequest_Alive;
  typedef Message_SlaveHostResponse_Alive SlaveHostResponse_Alive;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSlavehostrequestEnrollFieldNumber = 2,
    kHostslaveresponseEnrollFieldNumber = 3,
    kHostslaverequestAliveFieldNumber = 4,
    kSlavehostresponseAliveFieldNumber = 5,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .megastructure.Message.SlaveHostRequest_Enroll slavehostrequest_enroll = 2;
  bool has_slavehostrequest_enroll() const;
  private:
  bool _internal_has_slavehostrequest_enroll() const;
  public:
  void clear_slavehostrequest_enroll();
  const ::megastructure::Message_SlaveHostRequest_Enroll& slavehostrequest_enroll() const;
  ::megastructure::Message_SlaveHostRequest_Enroll* release_slavehostrequest_enroll();
  ::megastructure::Message_SlaveHostRequest_Enroll* mutable_slavehostrequest_enroll();
  void set_allocated_slavehostrequest_enroll(::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll);
  private:
  const ::megastructure::Message_SlaveHostRequest_Enroll& _internal_slavehostrequest_enroll() const;
  ::megastructure::Message_SlaveHostRequest_Enroll* _internal_mutable_slavehostrequest_enroll();
  public:
  void unsafe_arena_set_allocated_slavehostrequest_enroll(
      ::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll);
  ::megastructure::Message_SlaveHostRequest_Enroll* unsafe_arena_release_slavehostrequest_enroll();

  // .megastructure.Message.HostSlaveResponse_Enroll hostslaveresponse_enroll = 3;
  bool has_hostslaveresponse_enroll() const;
  private:
  bool _internal_has_hostslaveresponse_enroll() const;
  public:
  void clear_hostslaveresponse_enroll();
  const ::megastructure::Message_HostSlaveResponse_Enroll& hostslaveresponse_enroll() const;
  ::megastructure::Message_HostSlaveResponse_Enroll* release_hostslaveresponse_enroll();
  ::megastructure::Message_HostSlaveResponse_Enroll* mutable_hostslaveresponse_enroll();
  void set_allocated_hostslaveresponse_enroll(::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll);
  private:
  const ::megastructure::Message_HostSlaveResponse_Enroll& _internal_hostslaveresponse_enroll() const;
  ::megastructure::Message_HostSlaveResponse_Enroll* _internal_mutable_hostslaveresponse_enroll();
  public:
  void unsafe_arena_set_allocated_hostslaveresponse_enroll(
      ::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll);
  ::megastructure::Message_HostSlaveResponse_Enroll* unsafe_arena_release_hostslaveresponse_enroll();

  // .megastructure.Message.HostSlaveRequest_Alive hostslaverequest_alive = 4;
  bool has_hostslaverequest_alive() const;
  private:
  bool _internal_has_hostslaverequest_alive() const;
  public:
  void clear_hostslaverequest_alive();
  const ::megastructure::Message_HostSlaveRequest_Alive& hostslaverequest_alive() const;
  ::megastructure::Message_HostSlaveRequest_Alive* release_hostslaverequest_alive();
  ::megastructure::Message_HostSlaveRequest_Alive* mutable_hostslaverequest_alive();
  void set_allocated_hostslaverequest_alive(::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive);
  private:
  const ::megastructure::Message_HostSlaveRequest_Alive& _internal_hostslaverequest_alive() const;
  ::megastructure::Message_HostSlaveRequest_Alive* _internal_mutable_hostslaverequest_alive();
  public:
  void unsafe_arena_set_allocated_hostslaverequest_alive(
      ::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive);
  ::megastructure::Message_HostSlaveRequest_Alive* unsafe_arena_release_hostslaverequest_alive();

  // .megastructure.Message.SlaveHostResponse_Alive slavehostresponse_alive = 5;
  bool has_slavehostresponse_alive() const;
  private:
  bool _internal_has_slavehostresponse_alive() const;
  public:
  void clear_slavehostresponse_alive();
  const ::megastructure::Message_SlaveHostResponse_Alive& slavehostresponse_alive() const;
  ::megastructure::Message_SlaveHostResponse_Alive* release_slavehostresponse_alive();
  ::megastructure::Message_SlaveHostResponse_Alive* mutable_slavehostresponse_alive();
  void set_allocated_slavehostresponse_alive(::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive);
  private:
  const ::megastructure::Message_SlaveHostResponse_Alive& _internal_slavehostresponse_alive() const;
  ::megastructure::Message_SlaveHostResponse_Alive* _internal_mutable_slavehostresponse_alive();
  public:
  void unsafe_arena_set_allocated_slavehostresponse_alive(
      ::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive);
  ::megastructure::Message_SlaveHostResponse_Alive* unsafe_arena_release_slavehostresponse_alive();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message)
 private:
  class _Internal;
  void set_has_slavehostrequest_enroll();
  void set_has_hostslaveresponse_enroll();
  void set_has_hostslaverequest_alive();
  void set_has_slavehostresponse_alive();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll_;
    ::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll_;
    ::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive_;
    ::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_SlaveHostRequest_Enroll

// string slavename = 1;
inline void Message_SlaveHostRequest_Enroll::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_SlaveHostRequest_Enroll::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SlaveHostRequest_Enroll.slavename)
  return _internal_slavename();
}
inline void Message_SlaveHostRequest_Enroll::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}
inline std::string* Message_SlaveHostRequest_Enroll::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.SlaveHostRequest_Enroll.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_SlaveHostRequest_Enroll::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_SlaveHostRequest_Enroll::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_SlaveHostRequest_Enroll::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}
inline void Message_SlaveHostRequest_Enroll::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}
inline void Message_SlaveHostRequest_Enroll::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}
inline std::string* Message_SlaveHostRequest_Enroll::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_SlaveHostRequest_Enroll::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.SlaveHostRequest_Enroll.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SlaveHostRequest_Enroll::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}
inline std::string* Message_SlaveHostRequest_Enroll::unsafe_arena_release_slavename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.SlaveHostRequest_Enroll.slavename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slavename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_SlaveHostRequest_Enroll::unsafe_arena_set_allocated_slavename(
    std::string* slavename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slavename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.SlaveHostRequest_Enroll.slavename)
}

// -------------------------------------------------------------------

// Message_HostSlaveResponse_Enroll

// bool success = 1;
inline void Message_HostSlaveResponse_Enroll::clear_success() {
  success_ = false;
}
inline bool Message_HostSlaveResponse_Enroll::_internal_success() const {
  return success_;
}
inline bool Message_HostSlaveResponse_Enroll::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HostSlaveResponse_Enroll.success)
  return _internal_success();
}
inline void Message_HostSlaveResponse_Enroll::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_HostSlaveResponse_Enroll::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HostSlaveResponse_Enroll.success)
}

// -------------------------------------------------------------------

// Message_HostSlaveRequest_Alive

// string slavename = 1;
inline void Message_HostSlaveRequest_Alive::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HostSlaveRequest_Alive::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HostSlaveRequest_Alive.slavename)
  return _internal_slavename();
}
inline void Message_HostSlaveRequest_Alive::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HostSlaveRequest_Alive.slavename)
}
inline std::string* Message_HostSlaveRequest_Alive::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HostSlaveRequest_Alive.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_HostSlaveRequest_Alive::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_HostSlaveRequest_Alive::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HostSlaveRequest_Alive::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HostSlaveRequest_Alive.slavename)
}
inline void Message_HostSlaveRequest_Alive::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HostSlaveRequest_Alive.slavename)
}
inline void Message_HostSlaveRequest_Alive::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HostSlaveRequest_Alive.slavename)
}
inline std::string* Message_HostSlaveRequest_Alive::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HostSlaveRequest_Alive::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HostSlaveRequest_Alive.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HostSlaveRequest_Alive::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HostSlaveRequest_Alive.slavename)
}
inline std::string* Message_HostSlaveRequest_Alive::unsafe_arena_release_slavename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.HostSlaveRequest_Alive.slavename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slavename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_HostSlaveRequest_Alive::unsafe_arena_set_allocated_slavename(
    std::string* slavename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slavename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.HostSlaveRequest_Alive.slavename)
}

// -------------------------------------------------------------------

// Message_SlaveHostResponse_Alive

// bool success = 1;
inline void Message_SlaveHostResponse_Alive::clear_success() {
  success_ = false;
}
inline bool Message_SlaveHostResponse_Alive::_internal_success() const {
  return success_;
}
inline bool Message_SlaveHostResponse_Alive::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SlaveHostResponse_Alive.success)
  return _internal_success();
}
inline void Message_SlaveHostResponse_Alive::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_SlaveHostResponse_Alive::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SlaveHostResponse_Alive.success)
}

// -------------------------------------------------------------------

// Message

// int32 id = 1;
inline void Message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.id)
  return _internal_id();
}
inline void Message::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.id)
}

// .megastructure.Message.SlaveHostRequest_Enroll slavehostrequest_enroll = 2;
inline bool Message::_internal_has_slavehostrequest_enroll() const {
  return foobar_case() == kSlavehostrequestEnroll;
}
inline bool Message::has_slavehostrequest_enroll() const {
  return _internal_has_slavehostrequest_enroll();
}
inline void Message::set_has_slavehostrequest_enroll() {
  _oneof_case_[0] = kSlavehostrequestEnroll;
}
inline void Message::clear_slavehostrequest_enroll() {
  if (_internal_has_slavehostrequest_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.slavehostrequest_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SlaveHostRequest_Enroll* Message::release_slavehostrequest_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.slavehostrequest_enroll)
  if (_internal_has_slavehostrequest_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_SlaveHostRequest_Enroll* temp = foobar_.slavehostrequest_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.slavehostrequest_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SlaveHostRequest_Enroll& Message::_internal_slavehostrequest_enroll() const {
  return _internal_has_slavehostrequest_enroll()
      ? *foobar_.slavehostrequest_enroll_
      : *reinterpret_cast< ::megastructure::Message_SlaveHostRequest_Enroll*>(&::megastructure::_Message_SlaveHostRequest_Enroll_default_instance_);
}
inline const ::megastructure::Message_SlaveHostRequest_Enroll& Message::slavehostrequest_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.slavehostrequest_enroll)
  return _internal_slavehostrequest_enroll();
}
inline ::megastructure::Message_SlaveHostRequest_Enroll* Message::unsafe_arena_release_slavehostrequest_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.slavehostrequest_enroll)
  if (_internal_has_slavehostrequest_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_SlaveHostRequest_Enroll* temp = foobar_.slavehostrequest_enroll_;
    foobar_.slavehostrequest_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_slavehostrequest_enroll(::megastructure::Message_SlaveHostRequest_Enroll* slavehostrequest_enroll) {
  clear_foobar();
  if (slavehostrequest_enroll) {
    set_has_slavehostrequest_enroll();
    foobar_.slavehostrequest_enroll_ = slavehostrequest_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.slavehostrequest_enroll)
}
inline ::megastructure::Message_SlaveHostRequest_Enroll* Message::_internal_mutable_slavehostrequest_enroll() {
  if (!_internal_has_slavehostrequest_enroll()) {
    clear_foobar();
    set_has_slavehostrequest_enroll();
    foobar_.slavehostrequest_enroll_ = CreateMaybeMessage< ::megastructure::Message_SlaveHostRequest_Enroll >(GetArena());
  }
  return foobar_.slavehostrequest_enroll_;
}
inline ::megastructure::Message_SlaveHostRequest_Enroll* Message::mutable_slavehostrequest_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.slavehostrequest_enroll)
  return _internal_mutable_slavehostrequest_enroll();
}

// .megastructure.Message.HostSlaveResponse_Enroll hostslaveresponse_enroll = 3;
inline bool Message::_internal_has_hostslaveresponse_enroll() const {
  return foobar_case() == kHostslaveresponseEnroll;
}
inline bool Message::has_hostslaveresponse_enroll() const {
  return _internal_has_hostslaveresponse_enroll();
}
inline void Message::set_has_hostslaveresponse_enroll() {
  _oneof_case_[0] = kHostslaveresponseEnroll;
}
inline void Message::clear_hostslaveresponse_enroll() {
  if (_internal_has_hostslaveresponse_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.hostslaveresponse_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HostSlaveResponse_Enroll* Message::release_hostslaveresponse_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hostslaveresponse_enroll)
  if (_internal_has_hostslaveresponse_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_HostSlaveResponse_Enroll* temp = foobar_.hostslaveresponse_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hostslaveresponse_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HostSlaveResponse_Enroll& Message::_internal_hostslaveresponse_enroll() const {
  return _internal_has_hostslaveresponse_enroll()
      ? *foobar_.hostslaveresponse_enroll_
      : *reinterpret_cast< ::megastructure::Message_HostSlaveResponse_Enroll*>(&::megastructure::_Message_HostSlaveResponse_Enroll_default_instance_);
}
inline const ::megastructure::Message_HostSlaveResponse_Enroll& Message::hostslaveresponse_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hostslaveresponse_enroll)
  return _internal_hostslaveresponse_enroll();
}
inline ::megastructure::Message_HostSlaveResponse_Enroll* Message::unsafe_arena_release_hostslaveresponse_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hostslaveresponse_enroll)
  if (_internal_has_hostslaveresponse_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_HostSlaveResponse_Enroll* temp = foobar_.hostslaveresponse_enroll_;
    foobar_.hostslaveresponse_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hostslaveresponse_enroll(::megastructure::Message_HostSlaveResponse_Enroll* hostslaveresponse_enroll) {
  clear_foobar();
  if (hostslaveresponse_enroll) {
    set_has_hostslaveresponse_enroll();
    foobar_.hostslaveresponse_enroll_ = hostslaveresponse_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hostslaveresponse_enroll)
}
inline ::megastructure::Message_HostSlaveResponse_Enroll* Message::_internal_mutable_hostslaveresponse_enroll() {
  if (!_internal_has_hostslaveresponse_enroll()) {
    clear_foobar();
    set_has_hostslaveresponse_enroll();
    foobar_.hostslaveresponse_enroll_ = CreateMaybeMessage< ::megastructure::Message_HostSlaveResponse_Enroll >(GetArena());
  }
  return foobar_.hostslaveresponse_enroll_;
}
inline ::megastructure::Message_HostSlaveResponse_Enroll* Message::mutable_hostslaveresponse_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hostslaveresponse_enroll)
  return _internal_mutable_hostslaveresponse_enroll();
}

// .megastructure.Message.HostSlaveRequest_Alive hostslaverequest_alive = 4;
inline bool Message::_internal_has_hostslaverequest_alive() const {
  return foobar_case() == kHostslaverequestAlive;
}
inline bool Message::has_hostslaverequest_alive() const {
  return _internal_has_hostslaverequest_alive();
}
inline void Message::set_has_hostslaverequest_alive() {
  _oneof_case_[0] = kHostslaverequestAlive;
}
inline void Message::clear_hostslaverequest_alive() {
  if (_internal_has_hostslaverequest_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.hostslaverequest_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HostSlaveRequest_Alive* Message::release_hostslaverequest_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hostslaverequest_alive)
  if (_internal_has_hostslaverequest_alive()) {
    clear_has_foobar();
      ::megastructure::Message_HostSlaveRequest_Alive* temp = foobar_.hostslaverequest_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hostslaverequest_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HostSlaveRequest_Alive& Message::_internal_hostslaverequest_alive() const {
  return _internal_has_hostslaverequest_alive()
      ? *foobar_.hostslaverequest_alive_
      : *reinterpret_cast< ::megastructure::Message_HostSlaveRequest_Alive*>(&::megastructure::_Message_HostSlaveRequest_Alive_default_instance_);
}
inline const ::megastructure::Message_HostSlaveRequest_Alive& Message::hostslaverequest_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hostslaverequest_alive)
  return _internal_hostslaverequest_alive();
}
inline ::megastructure::Message_HostSlaveRequest_Alive* Message::unsafe_arena_release_hostslaverequest_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hostslaverequest_alive)
  if (_internal_has_hostslaverequest_alive()) {
    clear_has_foobar();
    ::megastructure::Message_HostSlaveRequest_Alive* temp = foobar_.hostslaverequest_alive_;
    foobar_.hostslaverequest_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hostslaverequest_alive(::megastructure::Message_HostSlaveRequest_Alive* hostslaverequest_alive) {
  clear_foobar();
  if (hostslaverequest_alive) {
    set_has_hostslaverequest_alive();
    foobar_.hostslaverequest_alive_ = hostslaverequest_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hostslaverequest_alive)
}
inline ::megastructure::Message_HostSlaveRequest_Alive* Message::_internal_mutable_hostslaverequest_alive() {
  if (!_internal_has_hostslaverequest_alive()) {
    clear_foobar();
    set_has_hostslaverequest_alive();
    foobar_.hostslaverequest_alive_ = CreateMaybeMessage< ::megastructure::Message_HostSlaveRequest_Alive >(GetArena());
  }
  return foobar_.hostslaverequest_alive_;
}
inline ::megastructure::Message_HostSlaveRequest_Alive* Message::mutable_hostslaverequest_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hostslaverequest_alive)
  return _internal_mutable_hostslaverequest_alive();
}

// .megastructure.Message.SlaveHostResponse_Alive slavehostresponse_alive = 5;
inline bool Message::_internal_has_slavehostresponse_alive() const {
  return foobar_case() == kSlavehostresponseAlive;
}
inline bool Message::has_slavehostresponse_alive() const {
  return _internal_has_slavehostresponse_alive();
}
inline void Message::set_has_slavehostresponse_alive() {
  _oneof_case_[0] = kSlavehostresponseAlive;
}
inline void Message::clear_slavehostresponse_alive() {
  if (_internal_has_slavehostresponse_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.slavehostresponse_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SlaveHostResponse_Alive* Message::release_slavehostresponse_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.slavehostresponse_alive)
  if (_internal_has_slavehostresponse_alive()) {
    clear_has_foobar();
      ::megastructure::Message_SlaveHostResponse_Alive* temp = foobar_.slavehostresponse_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.slavehostresponse_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SlaveHostResponse_Alive& Message::_internal_slavehostresponse_alive() const {
  return _internal_has_slavehostresponse_alive()
      ? *foobar_.slavehostresponse_alive_
      : *reinterpret_cast< ::megastructure::Message_SlaveHostResponse_Alive*>(&::megastructure::_Message_SlaveHostResponse_Alive_default_instance_);
}
inline const ::megastructure::Message_SlaveHostResponse_Alive& Message::slavehostresponse_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.slavehostresponse_alive)
  return _internal_slavehostresponse_alive();
}
inline ::megastructure::Message_SlaveHostResponse_Alive* Message::unsafe_arena_release_slavehostresponse_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.slavehostresponse_alive)
  if (_internal_has_slavehostresponse_alive()) {
    clear_has_foobar();
    ::megastructure::Message_SlaveHostResponse_Alive* temp = foobar_.slavehostresponse_alive_;
    foobar_.slavehostresponse_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_slavehostresponse_alive(::megastructure::Message_SlaveHostResponse_Alive* slavehostresponse_alive) {
  clear_foobar();
  if (slavehostresponse_alive) {
    set_has_slavehostresponse_alive();
    foobar_.slavehostresponse_alive_ = slavehostresponse_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.slavehostresponse_alive)
}
inline ::megastructure::Message_SlaveHostResponse_Alive* Message::_internal_mutable_slavehostresponse_alive() {
  if (!_internal_has_slavehostresponse_alive()) {
    clear_foobar();
    set_has_slavehostresponse_alive();
    foobar_.slavehostresponse_alive_ = CreateMaybeMessage< ::megastructure::Message_SlaveHostResponse_Alive >(GetArena());
  }
  return foobar_.slavehostresponse_alive_;
}
inline ::megastructure::Message_SlaveHostResponse_Alive* Message::mutable_slavehostresponse_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.slavehostresponse_alive)
  return _internal_mutable_slavehostresponse_alive();
}

inline bool Message::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message::FoobarCase Message::foobar_case() const {
  return Message::FoobarCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace megastructure

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
