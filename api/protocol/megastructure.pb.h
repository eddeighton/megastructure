// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: megastructure.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_megastructure_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_megastructure_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_megastructure_2eproto;
namespace megastructure {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_CHQ_Alive;
class Message_CHQ_AliveDefaultTypeInternal;
extern Message_CHQ_AliveDefaultTypeInternal _Message_CHQ_Alive_default_instance_;
class Message_CHS_Enroll;
class Message_CHS_EnrollDefaultTypeInternal;
extern Message_CHS_EnrollDefaultTypeInternal _Message_CHS_Enroll_default_instance_;
class Message_CHS_Load;
class Message_CHS_LoadDefaultTypeInternal;
extern Message_CHS_LoadDefaultTypeInternal _Message_CHS_Load_default_instance_;
class Message_HCQ_Enroll;
class Message_HCQ_EnrollDefaultTypeInternal;
extern Message_HCQ_EnrollDefaultTypeInternal _Message_HCQ_Enroll_default_instance_;
class Message_HCQ_Load;
class Message_HCQ_LoadDefaultTypeInternal;
extern Message_HCQ_LoadDefaultTypeInternal _Message_HCQ_Load_default_instance_;
class Message_HCS_Alive;
class Message_HCS_AliveDefaultTypeInternal;
extern Message_HCS_AliveDefaultTypeInternal _Message_HCS_Alive_default_instance_;
class Message_MSQ_Alive;
class Message_MSQ_AliveDefaultTypeInternal;
extern Message_MSQ_AliveDefaultTypeInternal _Message_MSQ_Alive_default_instance_;
class Message_MSQ_Load;
class Message_MSQ_LoadDefaultTypeInternal;
extern Message_MSQ_LoadDefaultTypeInternal _Message_MSQ_Load_default_instance_;
class Message_MSS_Enroll;
class Message_MSS_EnrollDefaultTypeInternal;
extern Message_MSS_EnrollDefaultTypeInternal _Message_MSS_Enroll_default_instance_;
class Message_SMQ_Enroll;
class Message_SMQ_EnrollDefaultTypeInternal;
extern Message_SMQ_EnrollDefaultTypeInternal _Message_SMQ_Enroll_default_instance_;
class Message_SMS_Alive;
class Message_SMS_AliveDefaultTypeInternal;
extern Message_SMS_AliveDefaultTypeInternal _Message_SMS_Alive_default_instance_;
class Message_SMS_Load;
class Message_SMS_LoadDefaultTypeInternal;
extern Message_SMS_LoadDefaultTypeInternal _Message_SMS_Load_default_instance_;
}  // namespace megastructure
PROTOBUF_NAMESPACE_OPEN
template<> ::megastructure::Message* Arena::CreateMaybeMessage<::megastructure::Message>(Arena*);
template<> ::megastructure::Message_CHQ_Alive* Arena::CreateMaybeMessage<::megastructure::Message_CHQ_Alive>(Arena*);
template<> ::megastructure::Message_CHS_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_CHS_Enroll>(Arena*);
template<> ::megastructure::Message_CHS_Load* Arena::CreateMaybeMessage<::megastructure::Message_CHS_Load>(Arena*);
template<> ::megastructure::Message_HCQ_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_HCQ_Enroll>(Arena*);
template<> ::megastructure::Message_HCQ_Load* Arena::CreateMaybeMessage<::megastructure::Message_HCQ_Load>(Arena*);
template<> ::megastructure::Message_HCS_Alive* Arena::CreateMaybeMessage<::megastructure::Message_HCS_Alive>(Arena*);
template<> ::megastructure::Message_MSQ_Alive* Arena::CreateMaybeMessage<::megastructure::Message_MSQ_Alive>(Arena*);
template<> ::megastructure::Message_MSQ_Load* Arena::CreateMaybeMessage<::megastructure::Message_MSQ_Load>(Arena*);
template<> ::megastructure::Message_MSS_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_MSS_Enroll>(Arena*);
template<> ::megastructure::Message_SMQ_Enroll* Arena::CreateMaybeMessage<::megastructure::Message_SMQ_Enroll>(Arena*);
template<> ::megastructure::Message_SMS_Alive* Arena::CreateMaybeMessage<::megastructure::Message_SMS_Alive>(Arena*);
template<> ::megastructure::Message_SMS_Load* Arena::CreateMaybeMessage<::megastructure::Message_SMS_Load>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace megastructure {

// ===================================================================

class Message_SMQ_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMQ_Enroll) */ {
 public:
  inline Message_SMQ_Enroll() : Message_SMQ_Enroll(nullptr) {};
  virtual ~Message_SMQ_Enroll();

  Message_SMQ_Enroll(const Message_SMQ_Enroll& from);
  Message_SMQ_Enroll(Message_SMQ_Enroll&& from) noexcept
    : Message_SMQ_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_SMQ_Enroll& operator=(const Message_SMQ_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMQ_Enroll& operator=(Message_SMQ_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMQ_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMQ_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_SMQ_Enroll*>(
               &_Message_SMQ_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_SMQ_Enroll& a, Message_SMQ_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMQ_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMQ_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMQ_Enroll* New() const final {
    return CreateMaybeMessage<Message_SMQ_Enroll>(nullptr);
  }

  Message_SMQ_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMQ_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMQ_Enroll& from);
  void MergeFrom(const Message_SMQ_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMQ_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMQ_Enroll";
  }
  protected:
  explicit Message_SMQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slavename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slavename(
      std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMQ_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSS_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSS_Enroll) */ {
 public:
  inline Message_MSS_Enroll() : Message_MSS_Enroll(nullptr) {};
  virtual ~Message_MSS_Enroll();

  Message_MSS_Enroll(const Message_MSS_Enroll& from);
  Message_MSS_Enroll(Message_MSS_Enroll&& from) noexcept
    : Message_MSS_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_MSS_Enroll& operator=(const Message_MSS_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSS_Enroll& operator=(Message_MSS_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSS_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSS_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_MSS_Enroll*>(
               &_Message_MSS_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_MSS_Enroll& a, Message_MSS_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSS_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSS_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSS_Enroll* New() const final {
    return CreateMaybeMessage<Message_MSS_Enroll>(nullptr);
  }

  Message_MSS_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSS_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSS_Enroll& from);
  void MergeFrom(const Message_MSS_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSS_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSS_Enroll";
  }
  protected:
  explicit Message_MSS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramnameFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string programname = 2;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_programname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_programname(
      std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSS_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSQ_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSQ_Alive) */ {
 public:
  inline Message_MSQ_Alive() : Message_MSQ_Alive(nullptr) {};
  virtual ~Message_MSQ_Alive();

  Message_MSQ_Alive(const Message_MSQ_Alive& from);
  Message_MSQ_Alive(Message_MSQ_Alive&& from) noexcept
    : Message_MSQ_Alive() {
    *this = ::std::move(from);
  }

  inline Message_MSQ_Alive& operator=(const Message_MSQ_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSQ_Alive& operator=(Message_MSQ_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSQ_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSQ_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_MSQ_Alive*>(
               &_Message_MSQ_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_MSQ_Alive& a, Message_MSQ_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSQ_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSQ_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSQ_Alive* New() const final {
    return CreateMaybeMessage<Message_MSQ_Alive>(nullptr);
  }

  Message_MSQ_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSQ_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSQ_Alive& from);
  void MergeFrom(const Message_MSQ_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSQ_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSQ_Alive";
  }
  protected:
  explicit Message_MSQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlavenameFieldNumber = 1,
  };
  // string slavename = 1;
  void clear_slavename();
  const std::string& slavename() const;
  void set_slavename(const std::string& value);
  void set_slavename(std::string&& value);
  void set_slavename(const char* value);
  void set_slavename(const char* value, size_t size);
  std::string* mutable_slavename();
  std::string* release_slavename();
  void set_allocated_slavename(std::string* slavename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slavename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slavename(
      std::string* slavename);
  private:
  const std::string& _internal_slavename() const;
  void _internal_set_slavename(const std::string& value);
  std::string* _internal_mutable_slavename();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSQ_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slavename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_SMS_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMS_Alive) */ {
 public:
  inline Message_SMS_Alive() : Message_SMS_Alive(nullptr) {};
  virtual ~Message_SMS_Alive();

  Message_SMS_Alive(const Message_SMS_Alive& from);
  Message_SMS_Alive(Message_SMS_Alive&& from) noexcept
    : Message_SMS_Alive() {
    *this = ::std::move(from);
  }

  inline Message_SMS_Alive& operator=(const Message_SMS_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMS_Alive& operator=(Message_SMS_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMS_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMS_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_SMS_Alive*>(
               &_Message_SMS_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_SMS_Alive& a, Message_SMS_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMS_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMS_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMS_Alive* New() const final {
    return CreateMaybeMessage<Message_SMS_Alive>(nullptr);
  }

  Message_SMS_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMS_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMS_Alive& from);
  void MergeFrom(const Message_SMS_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMS_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMS_Alive";
  }
  protected:
  explicit Message_SMS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMS_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_MSQ_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.MSQ_Load) */ {
 public:
  inline Message_MSQ_Load() : Message_MSQ_Load(nullptr) {};
  virtual ~Message_MSQ_Load();

  Message_MSQ_Load(const Message_MSQ_Load& from);
  Message_MSQ_Load(Message_MSQ_Load&& from) noexcept
    : Message_MSQ_Load() {
    *this = ::std::move(from);
  }

  inline Message_MSQ_Load& operator=(const Message_MSQ_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_MSQ_Load& operator=(Message_MSQ_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_MSQ_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_MSQ_Load* internal_default_instance() {
    return reinterpret_cast<const Message_MSQ_Load*>(
               &_Message_MSQ_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message_MSQ_Load& a, Message_MSQ_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_MSQ_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_MSQ_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_MSQ_Load* New() const final {
    return CreateMaybeMessage<Message_MSQ_Load>(nullptr);
  }

  Message_MSQ_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_MSQ_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_MSQ_Load& from);
  void MergeFrom(const Message_MSQ_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_MSQ_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.MSQ_Load";
  }
  protected:
  explicit Message_MSQ_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramnameFieldNumber = 1,
  };
  // string programname = 1;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_programname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_programname(
      std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.MSQ_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_SMS_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.SMS_Load) */ {
 public:
  inline Message_SMS_Load() : Message_SMS_Load(nullptr) {};
  virtual ~Message_SMS_Load();

  Message_SMS_Load(const Message_SMS_Load& from);
  Message_SMS_Load(Message_SMS_Load&& from) noexcept
    : Message_SMS_Load() {
    *this = ::std::move(from);
  }

  inline Message_SMS_Load& operator=(const Message_SMS_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_SMS_Load& operator=(Message_SMS_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_SMS_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_SMS_Load* internal_default_instance() {
    return reinterpret_cast<const Message_SMS_Load*>(
               &_Message_SMS_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message_SMS_Load& a, Message_SMS_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_SMS_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_SMS_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_SMS_Load* New() const final {
    return CreateMaybeMessage<Message_SMS_Load>(nullptr);
  }

  Message_SMS_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_SMS_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_SMS_Load& from);
  void MergeFrom(const Message_SMS_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_SMS_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.SMS_Load";
  }
  protected:
  explicit Message_SMS_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.SMS_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCQ_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCQ_Load) */ {
 public:
  inline Message_HCQ_Load() : Message_HCQ_Load(nullptr) {};
  virtual ~Message_HCQ_Load();

  Message_HCQ_Load(const Message_HCQ_Load& from);
  Message_HCQ_Load(Message_HCQ_Load&& from) noexcept
    : Message_HCQ_Load() {
    *this = ::std::move(from);
  }

  inline Message_HCQ_Load& operator=(const Message_HCQ_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCQ_Load& operator=(Message_HCQ_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCQ_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCQ_Load* internal_default_instance() {
    return reinterpret_cast<const Message_HCQ_Load*>(
               &_Message_HCQ_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message_HCQ_Load& a, Message_HCQ_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCQ_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCQ_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCQ_Load* New() const final {
    return CreateMaybeMessage<Message_HCQ_Load>(nullptr);
  }

  Message_HCQ_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCQ_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCQ_Load& from);
  void MergeFrom(const Message_HCQ_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCQ_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCQ_Load";
  }
  protected:
  explicit Message_HCQ_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgramnameFieldNumber = 1,
  };
  // string programname = 1;
  void clear_programname();
  const std::string& programname() const;
  void set_programname(const std::string& value);
  void set_programname(std::string&& value);
  void set_programname(const char* value);
  void set_programname(const char* value, size_t size);
  std::string* mutable_programname();
  std::string* release_programname();
  void set_allocated_programname(std::string* programname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_programname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_programname(
      std::string* programname);
  private:
  const std::string& _internal_programname() const;
  void _internal_set_programname(const std::string& value);
  std::string* _internal_mutable_programname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCQ_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr programname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHS_Load PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHS_Load) */ {
 public:
  inline Message_CHS_Load() : Message_CHS_Load(nullptr) {};
  virtual ~Message_CHS_Load();

  Message_CHS_Load(const Message_CHS_Load& from);
  Message_CHS_Load(Message_CHS_Load&& from) noexcept
    : Message_CHS_Load() {
    *this = ::std::move(from);
  }

  inline Message_CHS_Load& operator=(const Message_CHS_Load& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHS_Load& operator=(Message_CHS_Load&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHS_Load& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHS_Load* internal_default_instance() {
    return reinterpret_cast<const Message_CHS_Load*>(
               &_Message_CHS_Load_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Message_CHS_Load& a, Message_CHS_Load& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHS_Load* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHS_Load* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHS_Load* New() const final {
    return CreateMaybeMessage<Message_CHS_Load>(nullptr);
  }

  Message_CHS_Load* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHS_Load>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHS_Load& from);
  void MergeFrom(const Message_CHS_Load& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHS_Load* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHS_Load";
  }
  protected:
  explicit Message_CHS_Load(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHS_Load)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCQ_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCQ_Enroll) */ {
 public:
  inline Message_HCQ_Enroll() : Message_HCQ_Enroll(nullptr) {};
  virtual ~Message_HCQ_Enroll();

  Message_HCQ_Enroll(const Message_HCQ_Enroll& from);
  Message_HCQ_Enroll(Message_HCQ_Enroll&& from) noexcept
    : Message_HCQ_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_HCQ_Enroll& operator=(const Message_HCQ_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCQ_Enroll& operator=(Message_HCQ_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCQ_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCQ_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_HCQ_Enroll*>(
               &_Message_HCQ_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Message_HCQ_Enroll& a, Message_HCQ_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCQ_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCQ_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCQ_Enroll* New() const final {
    return CreateMaybeMessage<Message_HCQ_Enroll>(nullptr);
  }

  Message_HCQ_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCQ_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCQ_Enroll& from);
  void MergeFrom(const Message_HCQ_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCQ_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCQ_Enroll";
  }
  protected:
  explicit Message_HCQ_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessnameFieldNumber = 1,
  };
  // string processname = 1;
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_processname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_processname(
      std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCQ_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHS_Enroll PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHS_Enroll) */ {
 public:
  inline Message_CHS_Enroll() : Message_CHS_Enroll(nullptr) {};
  virtual ~Message_CHS_Enroll();

  Message_CHS_Enroll(const Message_CHS_Enroll& from);
  Message_CHS_Enroll(Message_CHS_Enroll&& from) noexcept
    : Message_CHS_Enroll() {
    *this = ::std::move(from);
  }

  inline Message_CHS_Enroll& operator=(const Message_CHS_Enroll& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHS_Enroll& operator=(Message_CHS_Enroll&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHS_Enroll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHS_Enroll* internal_default_instance() {
    return reinterpret_cast<const Message_CHS_Enroll*>(
               &_Message_CHS_Enroll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Message_CHS_Enroll& a, Message_CHS_Enroll& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHS_Enroll* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHS_Enroll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHS_Enroll* New() const final {
    return CreateMaybeMessage<Message_CHS_Enroll>(nullptr);
  }

  Message_CHS_Enroll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHS_Enroll>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHS_Enroll& from);
  void MergeFrom(const Message_CHS_Enroll& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHS_Enroll* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHS_Enroll";
  }
  protected:
  explicit Message_CHS_Enroll(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostpathFieldNumber = 2,
    kProgramFieldNumber = 3,
    kSuccessFieldNumber = 1,
  };
  // string hostpath = 2;
  void clear_hostpath();
  const std::string& hostpath() const;
  void set_hostpath(const std::string& value);
  void set_hostpath(std::string&& value);
  void set_hostpath(const char* value);
  void set_hostpath(const char* value, size_t size);
  std::string* mutable_hostpath();
  std::string* release_hostpath();
  void set_allocated_hostpath(std::string* hostpath);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostpath();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostpath(
      std::string* hostpath);
  private:
  const std::string& _internal_hostpath() const;
  void _internal_set_hostpath(const std::string& value);
  std::string* _internal_mutable_hostpath();
  public:

  // string program = 3;
  void clear_program();
  const std::string& program() const;
  void set_program(const std::string& value);
  void set_program(std::string&& value);
  void set_program(const char* value);
  void set_program(const char* value, size_t size);
  std::string* mutable_program();
  std::string* release_program();
  void set_allocated_program(std::string* program);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_program();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_program(
      std::string* program);
  private:
  const std::string& _internal_program() const;
  void _internal_set_program(const std::string& value);
  std::string* _internal_mutable_program();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHS_Enroll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr program_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_CHQ_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.CHQ_Alive) */ {
 public:
  inline Message_CHQ_Alive() : Message_CHQ_Alive(nullptr) {};
  virtual ~Message_CHQ_Alive();

  Message_CHQ_Alive(const Message_CHQ_Alive& from);
  Message_CHQ_Alive(Message_CHQ_Alive&& from) noexcept
    : Message_CHQ_Alive() {
    *this = ::std::move(from);
  }

  inline Message_CHQ_Alive& operator=(const Message_CHQ_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CHQ_Alive& operator=(Message_CHQ_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CHQ_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CHQ_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_CHQ_Alive*>(
               &_Message_CHQ_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Message_CHQ_Alive& a, Message_CHQ_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CHQ_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_CHQ_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CHQ_Alive* New() const final {
    return CreateMaybeMessage<Message_CHQ_Alive>(nullptr);
  }

  Message_CHQ_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CHQ_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CHQ_Alive& from);
  void MergeFrom(const Message_CHQ_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CHQ_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.CHQ_Alive";
  }
  protected:
  explicit Message_CHQ_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessnameFieldNumber = 1,
  };
  // string processname = 1;
  void clear_processname();
  const std::string& processname() const;
  void set_processname(const std::string& value);
  void set_processname(std::string&& value);
  void set_processname(const char* value);
  void set_processname(const char* value, size_t size);
  std::string* mutable_processname();
  std::string* release_processname();
  void set_allocated_processname(std::string* processname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_processname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_processname(
      std::string* processname);
  private:
  const std::string& _internal_processname() const;
  void _internal_set_processname(const std::string& value);
  std::string* _internal_mutable_processname();
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.CHQ_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processname_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message_HCS_Alive PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message.HCS_Alive) */ {
 public:
  inline Message_HCS_Alive() : Message_HCS_Alive(nullptr) {};
  virtual ~Message_HCS_Alive();

  Message_HCS_Alive(const Message_HCS_Alive& from);
  Message_HCS_Alive(Message_HCS_Alive&& from) noexcept
    : Message_HCS_Alive() {
    *this = ::std::move(from);
  }

  inline Message_HCS_Alive& operator=(const Message_HCS_Alive& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_HCS_Alive& operator=(Message_HCS_Alive&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_HCS_Alive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_HCS_Alive* internal_default_instance() {
    return reinterpret_cast<const Message_HCS_Alive*>(
               &_Message_HCS_Alive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Message_HCS_Alive& a, Message_HCS_Alive& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_HCS_Alive* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message_HCS_Alive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_HCS_Alive* New() const final {
    return CreateMaybeMessage<Message_HCS_Alive>(nullptr);
  }

  Message_HCS_Alive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_HCS_Alive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_HCS_Alive& from);
  void MergeFrom(const Message_HCS_Alive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_HCS_Alive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message.HCS_Alive";
  }
  protected:
  explicit Message_HCS_Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:megastructure.Message.HCS_Alive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_megastructure_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:megastructure.Message) */ {
 public:
  inline Message() : Message(nullptr) {};
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  enum FoobarCase {
    kSmqEnroll = 2,
    kMssEnroll = 3,
    kMsqAlive = 4,
    kSmsAlive = 5,
    kHcqEnroll = 6,
    kChsEnroll = 7,
    kChqAlive = 8,
    kHcsAlive = 9,
    kMsqLoad = 12,
    kSmsLoad = 13,
    kHcqLoad = 14,
    kChsLoad = 15,
    FOOBAR_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "megastructure.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_megastructure_2eproto);
    return ::descriptor_table_megastructure_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_SMQ_Enroll SMQ_Enroll;
  typedef Message_MSS_Enroll MSS_Enroll;
  typedef Message_MSQ_Alive MSQ_Alive;
  typedef Message_SMS_Alive SMS_Alive;
  typedef Message_MSQ_Load MSQ_Load;
  typedef Message_SMS_Load SMS_Load;
  typedef Message_HCQ_Load HCQ_Load;
  typedef Message_CHS_Load CHS_Load;
  typedef Message_HCQ_Enroll HCQ_Enroll;
  typedef Message_CHS_Enroll CHS_Enroll;
  typedef Message_CHQ_Alive CHQ_Alive;
  typedef Message_HCS_Alive HCS_Alive;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSmqEnrollFieldNumber = 2,
    kMssEnrollFieldNumber = 3,
    kMsqAliveFieldNumber = 4,
    kSmsAliveFieldNumber = 5,
    kHcqEnrollFieldNumber = 6,
    kChsEnrollFieldNumber = 7,
    kChqAliveFieldNumber = 8,
    kHcsAliveFieldNumber = 9,
    kMsqLoadFieldNumber = 12,
    kSmsLoadFieldNumber = 13,
    kHcqLoadFieldNumber = 14,
    kChsLoadFieldNumber = 15,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .megastructure.Message.SMQ_Enroll smq_enroll = 2;
  bool has_smq_enroll() const;
  private:
  bool _internal_has_smq_enroll() const;
  public:
  void clear_smq_enroll();
  const ::megastructure::Message_SMQ_Enroll& smq_enroll() const;
  ::megastructure::Message_SMQ_Enroll* release_smq_enroll();
  ::megastructure::Message_SMQ_Enroll* mutable_smq_enroll();
  void set_allocated_smq_enroll(::megastructure::Message_SMQ_Enroll* smq_enroll);
  private:
  const ::megastructure::Message_SMQ_Enroll& _internal_smq_enroll() const;
  ::megastructure::Message_SMQ_Enroll* _internal_mutable_smq_enroll();
  public:
  void unsafe_arena_set_allocated_smq_enroll(
      ::megastructure::Message_SMQ_Enroll* smq_enroll);
  ::megastructure::Message_SMQ_Enroll* unsafe_arena_release_smq_enroll();

  // .megastructure.Message.MSS_Enroll mss_enroll = 3;
  bool has_mss_enroll() const;
  private:
  bool _internal_has_mss_enroll() const;
  public:
  void clear_mss_enroll();
  const ::megastructure::Message_MSS_Enroll& mss_enroll() const;
  ::megastructure::Message_MSS_Enroll* release_mss_enroll();
  ::megastructure::Message_MSS_Enroll* mutable_mss_enroll();
  void set_allocated_mss_enroll(::megastructure::Message_MSS_Enroll* mss_enroll);
  private:
  const ::megastructure::Message_MSS_Enroll& _internal_mss_enroll() const;
  ::megastructure::Message_MSS_Enroll* _internal_mutable_mss_enroll();
  public:
  void unsafe_arena_set_allocated_mss_enroll(
      ::megastructure::Message_MSS_Enroll* mss_enroll);
  ::megastructure::Message_MSS_Enroll* unsafe_arena_release_mss_enroll();

  // .megastructure.Message.MSQ_Alive msq_alive = 4;
  bool has_msq_alive() const;
  private:
  bool _internal_has_msq_alive() const;
  public:
  void clear_msq_alive();
  const ::megastructure::Message_MSQ_Alive& msq_alive() const;
  ::megastructure::Message_MSQ_Alive* release_msq_alive();
  ::megastructure::Message_MSQ_Alive* mutable_msq_alive();
  void set_allocated_msq_alive(::megastructure::Message_MSQ_Alive* msq_alive);
  private:
  const ::megastructure::Message_MSQ_Alive& _internal_msq_alive() const;
  ::megastructure::Message_MSQ_Alive* _internal_mutable_msq_alive();
  public:
  void unsafe_arena_set_allocated_msq_alive(
      ::megastructure::Message_MSQ_Alive* msq_alive);
  ::megastructure::Message_MSQ_Alive* unsafe_arena_release_msq_alive();

  // .megastructure.Message.SMS_Alive sms_alive = 5;
  bool has_sms_alive() const;
  private:
  bool _internal_has_sms_alive() const;
  public:
  void clear_sms_alive();
  const ::megastructure::Message_SMS_Alive& sms_alive() const;
  ::megastructure::Message_SMS_Alive* release_sms_alive();
  ::megastructure::Message_SMS_Alive* mutable_sms_alive();
  void set_allocated_sms_alive(::megastructure::Message_SMS_Alive* sms_alive);
  private:
  const ::megastructure::Message_SMS_Alive& _internal_sms_alive() const;
  ::megastructure::Message_SMS_Alive* _internal_mutable_sms_alive();
  public:
  void unsafe_arena_set_allocated_sms_alive(
      ::megastructure::Message_SMS_Alive* sms_alive);
  ::megastructure::Message_SMS_Alive* unsafe_arena_release_sms_alive();

  // .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
  bool has_hcq_enroll() const;
  private:
  bool _internal_has_hcq_enroll() const;
  public:
  void clear_hcq_enroll();
  const ::megastructure::Message_HCQ_Enroll& hcq_enroll() const;
  ::megastructure::Message_HCQ_Enroll* release_hcq_enroll();
  ::megastructure::Message_HCQ_Enroll* mutable_hcq_enroll();
  void set_allocated_hcq_enroll(::megastructure::Message_HCQ_Enroll* hcq_enroll);
  private:
  const ::megastructure::Message_HCQ_Enroll& _internal_hcq_enroll() const;
  ::megastructure::Message_HCQ_Enroll* _internal_mutable_hcq_enroll();
  public:
  void unsafe_arena_set_allocated_hcq_enroll(
      ::megastructure::Message_HCQ_Enroll* hcq_enroll);
  ::megastructure::Message_HCQ_Enroll* unsafe_arena_release_hcq_enroll();

  // .megastructure.Message.CHS_Enroll chs_enroll = 7;
  bool has_chs_enroll() const;
  private:
  bool _internal_has_chs_enroll() const;
  public:
  void clear_chs_enroll();
  const ::megastructure::Message_CHS_Enroll& chs_enroll() const;
  ::megastructure::Message_CHS_Enroll* release_chs_enroll();
  ::megastructure::Message_CHS_Enroll* mutable_chs_enroll();
  void set_allocated_chs_enroll(::megastructure::Message_CHS_Enroll* chs_enroll);
  private:
  const ::megastructure::Message_CHS_Enroll& _internal_chs_enroll() const;
  ::megastructure::Message_CHS_Enroll* _internal_mutable_chs_enroll();
  public:
  void unsafe_arena_set_allocated_chs_enroll(
      ::megastructure::Message_CHS_Enroll* chs_enroll);
  ::megastructure::Message_CHS_Enroll* unsafe_arena_release_chs_enroll();

  // .megastructure.Message.CHQ_Alive chq_alive = 8;
  bool has_chq_alive() const;
  private:
  bool _internal_has_chq_alive() const;
  public:
  void clear_chq_alive();
  const ::megastructure::Message_CHQ_Alive& chq_alive() const;
  ::megastructure::Message_CHQ_Alive* release_chq_alive();
  ::megastructure::Message_CHQ_Alive* mutable_chq_alive();
  void set_allocated_chq_alive(::megastructure::Message_CHQ_Alive* chq_alive);
  private:
  const ::megastructure::Message_CHQ_Alive& _internal_chq_alive() const;
  ::megastructure::Message_CHQ_Alive* _internal_mutable_chq_alive();
  public:
  void unsafe_arena_set_allocated_chq_alive(
      ::megastructure::Message_CHQ_Alive* chq_alive);
  ::megastructure::Message_CHQ_Alive* unsafe_arena_release_chq_alive();

  // .megastructure.Message.HCS_Alive hcs_alive = 9;
  bool has_hcs_alive() const;
  private:
  bool _internal_has_hcs_alive() const;
  public:
  void clear_hcs_alive();
  const ::megastructure::Message_HCS_Alive& hcs_alive() const;
  ::megastructure::Message_HCS_Alive* release_hcs_alive();
  ::megastructure::Message_HCS_Alive* mutable_hcs_alive();
  void set_allocated_hcs_alive(::megastructure::Message_HCS_Alive* hcs_alive);
  private:
  const ::megastructure::Message_HCS_Alive& _internal_hcs_alive() const;
  ::megastructure::Message_HCS_Alive* _internal_mutable_hcs_alive();
  public:
  void unsafe_arena_set_allocated_hcs_alive(
      ::megastructure::Message_HCS_Alive* hcs_alive);
  ::megastructure::Message_HCS_Alive* unsafe_arena_release_hcs_alive();

  // .megastructure.Message.MSQ_Load msq_load = 12;
  bool has_msq_load() const;
  private:
  bool _internal_has_msq_load() const;
  public:
  void clear_msq_load();
  const ::megastructure::Message_MSQ_Load& msq_load() const;
  ::megastructure::Message_MSQ_Load* release_msq_load();
  ::megastructure::Message_MSQ_Load* mutable_msq_load();
  void set_allocated_msq_load(::megastructure::Message_MSQ_Load* msq_load);
  private:
  const ::megastructure::Message_MSQ_Load& _internal_msq_load() const;
  ::megastructure::Message_MSQ_Load* _internal_mutable_msq_load();
  public:
  void unsafe_arena_set_allocated_msq_load(
      ::megastructure::Message_MSQ_Load* msq_load);
  ::megastructure::Message_MSQ_Load* unsafe_arena_release_msq_load();

  // .megastructure.Message.SMS_Load sms_load = 13;
  bool has_sms_load() const;
  private:
  bool _internal_has_sms_load() const;
  public:
  void clear_sms_load();
  const ::megastructure::Message_SMS_Load& sms_load() const;
  ::megastructure::Message_SMS_Load* release_sms_load();
  ::megastructure::Message_SMS_Load* mutable_sms_load();
  void set_allocated_sms_load(::megastructure::Message_SMS_Load* sms_load);
  private:
  const ::megastructure::Message_SMS_Load& _internal_sms_load() const;
  ::megastructure::Message_SMS_Load* _internal_mutable_sms_load();
  public:
  void unsafe_arena_set_allocated_sms_load(
      ::megastructure::Message_SMS_Load* sms_load);
  ::megastructure::Message_SMS_Load* unsafe_arena_release_sms_load();

  // .megastructure.Message.HCQ_Load hcq_load = 14;
  bool has_hcq_load() const;
  private:
  bool _internal_has_hcq_load() const;
  public:
  void clear_hcq_load();
  const ::megastructure::Message_HCQ_Load& hcq_load() const;
  ::megastructure::Message_HCQ_Load* release_hcq_load();
  ::megastructure::Message_HCQ_Load* mutable_hcq_load();
  void set_allocated_hcq_load(::megastructure::Message_HCQ_Load* hcq_load);
  private:
  const ::megastructure::Message_HCQ_Load& _internal_hcq_load() const;
  ::megastructure::Message_HCQ_Load* _internal_mutable_hcq_load();
  public:
  void unsafe_arena_set_allocated_hcq_load(
      ::megastructure::Message_HCQ_Load* hcq_load);
  ::megastructure::Message_HCQ_Load* unsafe_arena_release_hcq_load();

  // .megastructure.Message.CHS_Load chs_load = 15;
  bool has_chs_load() const;
  private:
  bool _internal_has_chs_load() const;
  public:
  void clear_chs_load();
  const ::megastructure::Message_CHS_Load& chs_load() const;
  ::megastructure::Message_CHS_Load* release_chs_load();
  ::megastructure::Message_CHS_Load* mutable_chs_load();
  void set_allocated_chs_load(::megastructure::Message_CHS_Load* chs_load);
  private:
  const ::megastructure::Message_CHS_Load& _internal_chs_load() const;
  ::megastructure::Message_CHS_Load* _internal_mutable_chs_load();
  public:
  void unsafe_arena_set_allocated_chs_load(
      ::megastructure::Message_CHS_Load* chs_load);
  ::megastructure::Message_CHS_Load* unsafe_arena_release_chs_load();

  void clear_foobar();
  FoobarCase foobar_case() const;
  // @@protoc_insertion_point(class_scope:megastructure.Message)
 private:
  class _Internal;
  void set_has_smq_enroll();
  void set_has_mss_enroll();
  void set_has_msq_alive();
  void set_has_sms_alive();
  void set_has_hcq_enroll();
  void set_has_chs_enroll();
  void set_has_chq_alive();
  void set_has_hcs_alive();
  void set_has_msq_load();
  void set_has_sms_load();
  void set_has_hcq_load();
  void set_has_chs_load();

  inline bool has_foobar() const;
  inline void clear_has_foobar();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  union FoobarUnion {
    FoobarUnion() {}
    ::megastructure::Message_SMQ_Enroll* smq_enroll_;
    ::megastructure::Message_MSS_Enroll* mss_enroll_;
    ::megastructure::Message_MSQ_Alive* msq_alive_;
    ::megastructure::Message_SMS_Alive* sms_alive_;
    ::megastructure::Message_HCQ_Enroll* hcq_enroll_;
    ::megastructure::Message_CHS_Enroll* chs_enroll_;
    ::megastructure::Message_CHQ_Alive* chq_alive_;
    ::megastructure::Message_HCS_Alive* hcs_alive_;
    ::megastructure::Message_MSQ_Load* msq_load_;
    ::megastructure::Message_SMS_Load* sms_load_;
    ::megastructure::Message_HCQ_Load* hcq_load_;
    ::megastructure::Message_CHS_Load* chs_load_;
  } foobar_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_megastructure_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_SMQ_Enroll

// string slavename = 1;
inline void Message_SMQ_Enroll::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_SMQ_Enroll::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMQ_Enroll.slavename)
  return _internal_slavename();
}
inline void Message_SMQ_Enroll::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMQ_Enroll.slavename)
}
inline std::string* Message_SMQ_Enroll::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.SMQ_Enroll.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_SMQ_Enroll::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_SMQ_Enroll::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_SMQ_Enroll::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.SMQ_Enroll.slavename)
}
inline void Message_SMQ_Enroll::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.SMQ_Enroll.slavename)
}
inline void Message_SMQ_Enroll::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.SMQ_Enroll.slavename)
}
inline std::string* Message_SMQ_Enroll::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_SMQ_Enroll::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.SMQ_Enroll.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_SMQ_Enroll::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.SMQ_Enroll.slavename)
}
inline std::string* Message_SMQ_Enroll::unsafe_arena_release_slavename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.SMQ_Enroll.slavename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slavename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_SMQ_Enroll::unsafe_arena_set_allocated_slavename(
    std::string* slavename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slavename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.SMQ_Enroll.slavename)
}

// -------------------------------------------------------------------

// Message_MSS_Enroll

// bool success = 1;
inline void Message_MSS_Enroll::clear_success() {
  success_ = false;
}
inline bool Message_MSS_Enroll::_internal_success() const {
  return success_;
}
inline bool Message_MSS_Enroll::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSS_Enroll.success)
  return _internal_success();
}
inline void Message_MSS_Enroll::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_MSS_Enroll::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSS_Enroll.success)
}

// string programname = 2;
inline void Message_MSS_Enroll::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSS_Enroll::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSS_Enroll.programname)
  return _internal_programname();
}
inline void Message_MSS_Enroll::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSS_Enroll.programname)
}
inline std::string* Message_MSS_Enroll::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSS_Enroll.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_MSS_Enroll::_internal_programname() const {
  return programname_.Get();
}
inline void Message_MSS_Enroll::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSS_Enroll::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSS_Enroll.programname)
}
inline void Message_MSS_Enroll::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSS_Enroll.programname)
}
inline void Message_MSS_Enroll::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSS_Enroll.programname)
}
inline std::string* Message_MSS_Enroll::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSS_Enroll::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSS_Enroll.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSS_Enroll::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSS_Enroll.programname)
}
inline std::string* Message_MSS_Enroll::unsafe_arena_release_programname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.MSS_Enroll.programname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return programname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_MSS_Enroll::unsafe_arena_set_allocated_programname(
    std::string* programname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      programname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.MSS_Enroll.programname)
}

// -------------------------------------------------------------------

// Message_MSQ_Alive

// string slavename = 1;
inline void Message_MSQ_Alive::clear_slavename() {
  slavename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSQ_Alive::slavename() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSQ_Alive.slavename)
  return _internal_slavename();
}
inline void Message_MSQ_Alive::set_slavename(const std::string& value) {
  _internal_set_slavename(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSQ_Alive.slavename)
}
inline std::string* Message_MSQ_Alive::mutable_slavename() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSQ_Alive.slavename)
  return _internal_mutable_slavename();
}
inline const std::string& Message_MSQ_Alive::_internal_slavename() const {
  return slavename_.Get();
}
inline void Message_MSQ_Alive::_internal_set_slavename(const std::string& value) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSQ_Alive::set_slavename(std::string&& value) {
  
  slavename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSQ_Alive.slavename)
}
inline void Message_MSQ_Alive::set_slavename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSQ_Alive.slavename)
}
inline void Message_MSQ_Alive::set_slavename(const char* value,
    size_t size) {
  
  slavename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSQ_Alive.slavename)
}
inline std::string* Message_MSQ_Alive::_internal_mutable_slavename() {
  
  return slavename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSQ_Alive::release_slavename() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSQ_Alive.slavename)
  return slavename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSQ_Alive::set_allocated_slavename(std::string* slavename) {
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slavename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSQ_Alive.slavename)
}
inline std::string* Message_MSQ_Alive::unsafe_arena_release_slavename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.MSQ_Alive.slavename)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slavename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_MSQ_Alive::unsafe_arena_set_allocated_slavename(
    std::string* slavename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slavename != nullptr) {
    
  } else {
    
  }
  slavename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slavename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.MSQ_Alive.slavename)
}

// -------------------------------------------------------------------

// Message_SMS_Alive

// bool success = 1;
inline void Message_SMS_Alive::clear_success() {
  success_ = false;
}
inline bool Message_SMS_Alive::_internal_success() const {
  return success_;
}
inline bool Message_SMS_Alive::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMS_Alive.success)
  return _internal_success();
}
inline void Message_SMS_Alive::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_SMS_Alive::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMS_Alive.success)
}

// -------------------------------------------------------------------

// Message_MSQ_Load

// string programname = 1;
inline void Message_MSQ_Load::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_MSQ_Load::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.MSQ_Load.programname)
  return _internal_programname();
}
inline void Message_MSQ_Load::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.MSQ_Load.programname)
}
inline std::string* Message_MSQ_Load::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.MSQ_Load.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_MSQ_Load::_internal_programname() const {
  return programname_.Get();
}
inline void Message_MSQ_Load::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_MSQ_Load::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.MSQ_Load.programname)
}
inline void Message_MSQ_Load::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.MSQ_Load.programname)
}
inline void Message_MSQ_Load::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.MSQ_Load.programname)
}
inline std::string* Message_MSQ_Load::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_MSQ_Load::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.MSQ_Load.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_MSQ_Load::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.MSQ_Load.programname)
}
inline std::string* Message_MSQ_Load::unsafe_arena_release_programname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.MSQ_Load.programname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return programname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_MSQ_Load::unsafe_arena_set_allocated_programname(
    std::string* programname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      programname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.MSQ_Load.programname)
}

// -------------------------------------------------------------------

// Message_SMS_Load

// bool success = 1;
inline void Message_SMS_Load::clear_success() {
  success_ = false;
}
inline bool Message_SMS_Load::_internal_success() const {
  return success_;
}
inline bool Message_SMS_Load::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.SMS_Load.success)
  return _internal_success();
}
inline void Message_SMS_Load::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_SMS_Load::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.SMS_Load.success)
}

// -------------------------------------------------------------------

// Message_HCQ_Load

// string programname = 1;
inline void Message_HCQ_Load::clear_programname() {
  programname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_Load::programname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Load.programname)
  return _internal_programname();
}
inline void Message_HCQ_Load::set_programname(const std::string& value) {
  _internal_set_programname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Load.programname)
}
inline std::string* Message_HCQ_Load::mutable_programname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_Load.programname)
  return _internal_mutable_programname();
}
inline const std::string& Message_HCQ_Load::_internal_programname() const {
  return programname_.Get();
}
inline void Message_HCQ_Load::_internal_set_programname(const std::string& value) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_Load::set_programname(std::string&& value) {
  
  programname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_Load.programname)
}
inline void Message_HCQ_Load::set_programname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_Load.programname)
}
inline void Message_HCQ_Load::set_programname(const char* value,
    size_t size) {
  
  programname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_Load.programname)
}
inline std::string* Message_HCQ_Load::_internal_mutable_programname() {
  
  return programname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_Load::release_programname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_Load.programname)
  return programname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_Load::set_allocated_programname(std::string* programname) {
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), programname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_Load.programname)
}
inline std::string* Message_HCQ_Load::unsafe_arena_release_programname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.HCQ_Load.programname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return programname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_HCQ_Load::unsafe_arena_set_allocated_programname(
    std::string* programname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (programname != nullptr) {
    
  } else {
    
  }
  programname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      programname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.HCQ_Load.programname)
}

// -------------------------------------------------------------------

// Message_CHS_Load

// bool success = 1;
inline void Message_CHS_Load::clear_success() {
  success_ = false;
}
inline bool Message_CHS_Load::_internal_success() const {
  return success_;
}
inline bool Message_CHS_Load::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Load.success)
  return _internal_success();
}
inline void Message_CHS_Load::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_CHS_Load::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Load.success)
}

// -------------------------------------------------------------------

// Message_HCQ_Enroll

// string processname = 1;
inline void Message_HCQ_Enroll::clear_processname() {
  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_HCQ_Enroll::processname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCQ_Enroll.processname)
  return _internal_processname();
}
inline void Message_HCQ_Enroll::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCQ_Enroll.processname)
}
inline std::string* Message_HCQ_Enroll::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.HCQ_Enroll.processname)
  return _internal_mutable_processname();
}
inline const std::string& Message_HCQ_Enroll::_internal_processname() const {
  return processname_.Get();
}
inline void Message_HCQ_Enroll::_internal_set_processname(const std::string& value) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_HCQ_Enroll::set_processname(std::string&& value) {
  
  processname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.HCQ_Enroll.processname)
}
inline void Message_HCQ_Enroll::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.HCQ_Enroll.processname)
}
inline void Message_HCQ_Enroll::set_processname(const char* value,
    size_t size) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.HCQ_Enroll.processname)
}
inline std::string* Message_HCQ_Enroll::_internal_mutable_processname() {
  
  return processname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_HCQ_Enroll::release_processname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.HCQ_Enroll.processname)
  return processname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_HCQ_Enroll::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.HCQ_Enroll.processname)
}
inline std::string* Message_HCQ_Enroll::unsafe_arena_release_processname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.HCQ_Enroll.processname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return processname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_HCQ_Enroll::unsafe_arena_set_allocated_processname(
    std::string* processname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      processname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.HCQ_Enroll.processname)
}

// -------------------------------------------------------------------

// Message_CHS_Enroll

// bool success = 1;
inline void Message_CHS_Enroll::clear_success() {
  success_ = false;
}
inline bool Message_CHS_Enroll::_internal_success() const {
  return success_;
}
inline bool Message_CHS_Enroll::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.success)
  return _internal_success();
}
inline void Message_CHS_Enroll::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_CHS_Enroll::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.success)
}

// string hostpath = 2;
inline void Message_CHS_Enroll::clear_hostpath() {
  hostpath_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Enroll::hostpath() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.hostpath)
  return _internal_hostpath();
}
inline void Message_CHS_Enroll::set_hostpath(const std::string& value) {
  _internal_set_hostpath(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.hostpath)
}
inline std::string* Message_CHS_Enroll::mutable_hostpath() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Enroll.hostpath)
  return _internal_mutable_hostpath();
}
inline const std::string& Message_CHS_Enroll::_internal_hostpath() const {
  return hostpath_.Get();
}
inline void Message_CHS_Enroll::_internal_set_hostpath(const std::string& value) {
  
  hostpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Enroll::set_hostpath(std::string&& value) {
  
  hostpath_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Enroll.hostpath)
}
inline void Message_CHS_Enroll::set_hostpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Enroll.hostpath)
}
inline void Message_CHS_Enroll::set_hostpath(const char* value,
    size_t size) {
  
  hostpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Enroll.hostpath)
}
inline std::string* Message_CHS_Enroll::_internal_mutable_hostpath() {
  
  return hostpath_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Enroll::release_hostpath() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Enroll.hostpath)
  return hostpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Enroll::set_allocated_hostpath(std::string* hostpath) {
  if (hostpath != nullptr) {
    
  } else {
    
  }
  hostpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostpath,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Enroll.hostpath)
}
inline std::string* Message_CHS_Enroll::unsafe_arena_release_hostpath() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.CHS_Enroll.hostpath)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostpath_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_CHS_Enroll::unsafe_arena_set_allocated_hostpath(
    std::string* hostpath) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostpath != nullptr) {
    
  } else {
    
  }
  hostpath_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostpath, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.CHS_Enroll.hostpath)
}

// string program = 3;
inline void Message_CHS_Enroll::clear_program() {
  program_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHS_Enroll::program() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHS_Enroll.program)
  return _internal_program();
}
inline void Message_CHS_Enroll::set_program(const std::string& value) {
  _internal_set_program(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHS_Enroll.program)
}
inline std::string* Message_CHS_Enroll::mutable_program() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHS_Enroll.program)
  return _internal_mutable_program();
}
inline const std::string& Message_CHS_Enroll::_internal_program() const {
  return program_.Get();
}
inline void Message_CHS_Enroll::_internal_set_program(const std::string& value) {
  
  program_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHS_Enroll::set_program(std::string&& value) {
  
  program_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHS_Enroll.program)
}
inline void Message_CHS_Enroll::set_program(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  program_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHS_Enroll.program)
}
inline void Message_CHS_Enroll::set_program(const char* value,
    size_t size) {
  
  program_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHS_Enroll.program)
}
inline std::string* Message_CHS_Enroll::_internal_mutable_program() {
  
  return program_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHS_Enroll::release_program() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHS_Enroll.program)
  return program_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHS_Enroll::set_allocated_program(std::string* program) {
  if (program != nullptr) {
    
  } else {
    
  }
  program_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), program,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHS_Enroll.program)
}
inline std::string* Message_CHS_Enroll::unsafe_arena_release_program() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.CHS_Enroll.program)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return program_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_CHS_Enroll::unsafe_arena_set_allocated_program(
    std::string* program) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (program != nullptr) {
    
  } else {
    
  }
  program_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      program, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.CHS_Enroll.program)
}

// -------------------------------------------------------------------

// Message_CHQ_Alive

// string processname = 1;
inline void Message_CHQ_Alive::clear_processname() {
  processname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Message_CHQ_Alive::processname() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.CHQ_Alive.processname)
  return _internal_processname();
}
inline void Message_CHQ_Alive::set_processname(const std::string& value) {
  _internal_set_processname(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.CHQ_Alive.processname)
}
inline std::string* Message_CHQ_Alive::mutable_processname() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.CHQ_Alive.processname)
  return _internal_mutable_processname();
}
inline const std::string& Message_CHQ_Alive::_internal_processname() const {
  return processname_.Get();
}
inline void Message_CHQ_Alive::_internal_set_processname(const std::string& value) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Message_CHQ_Alive::set_processname(std::string&& value) {
  
  processname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:megastructure.Message.CHQ_Alive.processname)
}
inline void Message_CHQ_Alive::set_processname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:megastructure.Message.CHQ_Alive.processname)
}
inline void Message_CHQ_Alive::set_processname(const char* value,
    size_t size) {
  
  processname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:megastructure.Message.CHQ_Alive.processname)
}
inline std::string* Message_CHQ_Alive::_internal_mutable_processname() {
  
  return processname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Message_CHQ_Alive::release_processname() {
  // @@protoc_insertion_point(field_release:megastructure.Message.CHQ_Alive.processname)
  return processname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message_CHQ_Alive::set_allocated_processname(std::string* processname) {
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:megastructure.Message.CHQ_Alive.processname)
}
inline std::string* Message_CHQ_Alive::unsafe_arena_release_processname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.CHQ_Alive.processname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return processname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Message_CHQ_Alive::unsafe_arena_set_allocated_processname(
    std::string* processname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (processname != nullptr) {
    
  } else {
    
  }
  processname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      processname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.CHQ_Alive.processname)
}

// -------------------------------------------------------------------

// Message_HCS_Alive

// bool success = 1;
inline void Message_HCS_Alive::clear_success() {
  success_ = false;
}
inline bool Message_HCS_Alive::_internal_success() const {
  return success_;
}
inline bool Message_HCS_Alive::success() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.HCS_Alive.success)
  return _internal_success();
}
inline void Message_HCS_Alive::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Message_HCS_Alive::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.HCS_Alive.success)
}

// -------------------------------------------------------------------

// Message

// int32 id = 1;
inline void Message::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.id)
  return _internal_id();
}
inline void Message::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Message::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:megastructure.Message.id)
}

// .megastructure.Message.SMQ_Enroll smq_enroll = 2;
inline bool Message::_internal_has_smq_enroll() const {
  return foobar_case() == kSmqEnroll;
}
inline bool Message::has_smq_enroll() const {
  return _internal_has_smq_enroll();
}
inline void Message::set_has_smq_enroll() {
  _oneof_case_[0] = kSmqEnroll;
}
inline void Message::clear_smq_enroll() {
  if (_internal_has_smq_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.smq_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMQ_Enroll* Message::release_smq_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.smq_enroll)
  if (_internal_has_smq_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_SMQ_Enroll* temp = foobar_.smq_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.smq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMQ_Enroll& Message::_internal_smq_enroll() const {
  return _internal_has_smq_enroll()
      ? *foobar_.smq_enroll_
      : *reinterpret_cast< ::megastructure::Message_SMQ_Enroll*>(&::megastructure::_Message_SMQ_Enroll_default_instance_);
}
inline const ::megastructure::Message_SMQ_Enroll& Message::smq_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.smq_enroll)
  return _internal_smq_enroll();
}
inline ::megastructure::Message_SMQ_Enroll* Message::unsafe_arena_release_smq_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.smq_enroll)
  if (_internal_has_smq_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_SMQ_Enroll* temp = foobar_.smq_enroll_;
    foobar_.smq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_smq_enroll(::megastructure::Message_SMQ_Enroll* smq_enroll) {
  clear_foobar();
  if (smq_enroll) {
    set_has_smq_enroll();
    foobar_.smq_enroll_ = smq_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.smq_enroll)
}
inline ::megastructure::Message_SMQ_Enroll* Message::_internal_mutable_smq_enroll() {
  if (!_internal_has_smq_enroll()) {
    clear_foobar();
    set_has_smq_enroll();
    foobar_.smq_enroll_ = CreateMaybeMessage< ::megastructure::Message_SMQ_Enroll >(GetArena());
  }
  return foobar_.smq_enroll_;
}
inline ::megastructure::Message_SMQ_Enroll* Message::mutable_smq_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.smq_enroll)
  return _internal_mutable_smq_enroll();
}

// .megastructure.Message.MSS_Enroll mss_enroll = 3;
inline bool Message::_internal_has_mss_enroll() const {
  return foobar_case() == kMssEnroll;
}
inline bool Message::has_mss_enroll() const {
  return _internal_has_mss_enroll();
}
inline void Message::set_has_mss_enroll() {
  _oneof_case_[0] = kMssEnroll;
}
inline void Message::clear_mss_enroll() {
  if (_internal_has_mss_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.mss_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSS_Enroll* Message::release_mss_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.mss_enroll)
  if (_internal_has_mss_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_MSS_Enroll* temp = foobar_.mss_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.mss_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSS_Enroll& Message::_internal_mss_enroll() const {
  return _internal_has_mss_enroll()
      ? *foobar_.mss_enroll_
      : *reinterpret_cast< ::megastructure::Message_MSS_Enroll*>(&::megastructure::_Message_MSS_Enroll_default_instance_);
}
inline const ::megastructure::Message_MSS_Enroll& Message::mss_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.mss_enroll)
  return _internal_mss_enroll();
}
inline ::megastructure::Message_MSS_Enroll* Message::unsafe_arena_release_mss_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.mss_enroll)
  if (_internal_has_mss_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_MSS_Enroll* temp = foobar_.mss_enroll_;
    foobar_.mss_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_mss_enroll(::megastructure::Message_MSS_Enroll* mss_enroll) {
  clear_foobar();
  if (mss_enroll) {
    set_has_mss_enroll();
    foobar_.mss_enroll_ = mss_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.mss_enroll)
}
inline ::megastructure::Message_MSS_Enroll* Message::_internal_mutable_mss_enroll() {
  if (!_internal_has_mss_enroll()) {
    clear_foobar();
    set_has_mss_enroll();
    foobar_.mss_enroll_ = CreateMaybeMessage< ::megastructure::Message_MSS_Enroll >(GetArena());
  }
  return foobar_.mss_enroll_;
}
inline ::megastructure::Message_MSS_Enroll* Message::mutable_mss_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.mss_enroll)
  return _internal_mutable_mss_enroll();
}

// .megastructure.Message.MSQ_Alive msq_alive = 4;
inline bool Message::_internal_has_msq_alive() const {
  return foobar_case() == kMsqAlive;
}
inline bool Message::has_msq_alive() const {
  return _internal_has_msq_alive();
}
inline void Message::set_has_msq_alive() {
  _oneof_case_[0] = kMsqAlive;
}
inline void Message::clear_msq_alive() {
  if (_internal_has_msq_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSQ_Alive* Message::release_msq_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.msq_alive)
  if (_internal_has_msq_alive()) {
    clear_has_foobar();
      ::megastructure::Message_MSQ_Alive* temp = foobar_.msq_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSQ_Alive& Message::_internal_msq_alive() const {
  return _internal_has_msq_alive()
      ? *foobar_.msq_alive_
      : *reinterpret_cast< ::megastructure::Message_MSQ_Alive*>(&::megastructure::_Message_MSQ_Alive_default_instance_);
}
inline const ::megastructure::Message_MSQ_Alive& Message::msq_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.msq_alive)
  return _internal_msq_alive();
}
inline ::megastructure::Message_MSQ_Alive* Message::unsafe_arena_release_msq_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.msq_alive)
  if (_internal_has_msq_alive()) {
    clear_has_foobar();
    ::megastructure::Message_MSQ_Alive* temp = foobar_.msq_alive_;
    foobar_.msq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_msq_alive(::megastructure::Message_MSQ_Alive* msq_alive) {
  clear_foobar();
  if (msq_alive) {
    set_has_msq_alive();
    foobar_.msq_alive_ = msq_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.msq_alive)
}
inline ::megastructure::Message_MSQ_Alive* Message::_internal_mutable_msq_alive() {
  if (!_internal_has_msq_alive()) {
    clear_foobar();
    set_has_msq_alive();
    foobar_.msq_alive_ = CreateMaybeMessage< ::megastructure::Message_MSQ_Alive >(GetArena());
  }
  return foobar_.msq_alive_;
}
inline ::megastructure::Message_MSQ_Alive* Message::mutable_msq_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.msq_alive)
  return _internal_mutable_msq_alive();
}

// .megastructure.Message.SMS_Alive sms_alive = 5;
inline bool Message::_internal_has_sms_alive() const {
  return foobar_case() == kSmsAlive;
}
inline bool Message::has_sms_alive() const {
  return _internal_has_sms_alive();
}
inline void Message::set_has_sms_alive() {
  _oneof_case_[0] = kSmsAlive;
}
inline void Message::clear_sms_alive() {
  if (_internal_has_sms_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMS_Alive* Message::release_sms_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.sms_alive)
  if (_internal_has_sms_alive()) {
    clear_has_foobar();
      ::megastructure::Message_SMS_Alive* temp = foobar_.sms_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMS_Alive& Message::_internal_sms_alive() const {
  return _internal_has_sms_alive()
      ? *foobar_.sms_alive_
      : *reinterpret_cast< ::megastructure::Message_SMS_Alive*>(&::megastructure::_Message_SMS_Alive_default_instance_);
}
inline const ::megastructure::Message_SMS_Alive& Message::sms_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.sms_alive)
  return _internal_sms_alive();
}
inline ::megastructure::Message_SMS_Alive* Message::unsafe_arena_release_sms_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.sms_alive)
  if (_internal_has_sms_alive()) {
    clear_has_foobar();
    ::megastructure::Message_SMS_Alive* temp = foobar_.sms_alive_;
    foobar_.sms_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sms_alive(::megastructure::Message_SMS_Alive* sms_alive) {
  clear_foobar();
  if (sms_alive) {
    set_has_sms_alive();
    foobar_.sms_alive_ = sms_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.sms_alive)
}
inline ::megastructure::Message_SMS_Alive* Message::_internal_mutable_sms_alive() {
  if (!_internal_has_sms_alive()) {
    clear_foobar();
    set_has_sms_alive();
    foobar_.sms_alive_ = CreateMaybeMessage< ::megastructure::Message_SMS_Alive >(GetArena());
  }
  return foobar_.sms_alive_;
}
inline ::megastructure::Message_SMS_Alive* Message::mutable_sms_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.sms_alive)
  return _internal_mutable_sms_alive();
}

// .megastructure.Message.HCQ_Enroll hcq_enroll = 6;
inline bool Message::_internal_has_hcq_enroll() const {
  return foobar_case() == kHcqEnroll;
}
inline bool Message::has_hcq_enroll() const {
  return _internal_has_hcq_enroll();
}
inline void Message::set_has_hcq_enroll() {
  _oneof_case_[0] = kHcqEnroll;
}
inline void Message::clear_hcq_enroll() {
  if (_internal_has_hcq_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcq_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCQ_Enroll* Message::release_hcq_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcq_enroll)
  if (_internal_has_hcq_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_HCQ_Enroll* temp = foobar_.hcq_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCQ_Enroll& Message::_internal_hcq_enroll() const {
  return _internal_has_hcq_enroll()
      ? *foobar_.hcq_enroll_
      : *reinterpret_cast< ::megastructure::Message_HCQ_Enroll*>(&::megastructure::_Message_HCQ_Enroll_default_instance_);
}
inline const ::megastructure::Message_HCQ_Enroll& Message::hcq_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcq_enroll)
  return _internal_hcq_enroll();
}
inline ::megastructure::Message_HCQ_Enroll* Message::unsafe_arena_release_hcq_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcq_enroll)
  if (_internal_has_hcq_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_HCQ_Enroll* temp = foobar_.hcq_enroll_;
    foobar_.hcq_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcq_enroll(::megastructure::Message_HCQ_Enroll* hcq_enroll) {
  clear_foobar();
  if (hcq_enroll) {
    set_has_hcq_enroll();
    foobar_.hcq_enroll_ = hcq_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcq_enroll)
}
inline ::megastructure::Message_HCQ_Enroll* Message::_internal_mutable_hcq_enroll() {
  if (!_internal_has_hcq_enroll()) {
    clear_foobar();
    set_has_hcq_enroll();
    foobar_.hcq_enroll_ = CreateMaybeMessage< ::megastructure::Message_HCQ_Enroll >(GetArena());
  }
  return foobar_.hcq_enroll_;
}
inline ::megastructure::Message_HCQ_Enroll* Message::mutable_hcq_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcq_enroll)
  return _internal_mutable_hcq_enroll();
}

// .megastructure.Message.CHS_Enroll chs_enroll = 7;
inline bool Message::_internal_has_chs_enroll() const {
  return foobar_case() == kChsEnroll;
}
inline bool Message::has_chs_enroll() const {
  return _internal_has_chs_enroll();
}
inline void Message::set_has_chs_enroll() {
  _oneof_case_[0] = kChsEnroll;
}
inline void Message::clear_chs_enroll() {
  if (_internal_has_chs_enroll()) {
    if (GetArena() == nullptr) {
      delete foobar_.chs_enroll_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHS_Enroll* Message::release_chs_enroll() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chs_enroll)
  if (_internal_has_chs_enroll()) {
    clear_has_foobar();
      ::megastructure::Message_CHS_Enroll* temp = foobar_.chs_enroll_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chs_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHS_Enroll& Message::_internal_chs_enroll() const {
  return _internal_has_chs_enroll()
      ? *foobar_.chs_enroll_
      : *reinterpret_cast< ::megastructure::Message_CHS_Enroll*>(&::megastructure::_Message_CHS_Enroll_default_instance_);
}
inline const ::megastructure::Message_CHS_Enroll& Message::chs_enroll() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chs_enroll)
  return _internal_chs_enroll();
}
inline ::megastructure::Message_CHS_Enroll* Message::unsafe_arena_release_chs_enroll() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chs_enroll)
  if (_internal_has_chs_enroll()) {
    clear_has_foobar();
    ::megastructure::Message_CHS_Enroll* temp = foobar_.chs_enroll_;
    foobar_.chs_enroll_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chs_enroll(::megastructure::Message_CHS_Enroll* chs_enroll) {
  clear_foobar();
  if (chs_enroll) {
    set_has_chs_enroll();
    foobar_.chs_enroll_ = chs_enroll;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chs_enroll)
}
inline ::megastructure::Message_CHS_Enroll* Message::_internal_mutable_chs_enroll() {
  if (!_internal_has_chs_enroll()) {
    clear_foobar();
    set_has_chs_enroll();
    foobar_.chs_enroll_ = CreateMaybeMessage< ::megastructure::Message_CHS_Enroll >(GetArena());
  }
  return foobar_.chs_enroll_;
}
inline ::megastructure::Message_CHS_Enroll* Message::mutable_chs_enroll() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chs_enroll)
  return _internal_mutable_chs_enroll();
}

// .megastructure.Message.CHQ_Alive chq_alive = 8;
inline bool Message::_internal_has_chq_alive() const {
  return foobar_case() == kChqAlive;
}
inline bool Message::has_chq_alive() const {
  return _internal_has_chq_alive();
}
inline void Message::set_has_chq_alive() {
  _oneof_case_[0] = kChqAlive;
}
inline void Message::clear_chq_alive() {
  if (_internal_has_chq_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.chq_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHQ_Alive* Message::release_chq_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chq_alive)
  if (_internal_has_chq_alive()) {
    clear_has_foobar();
      ::megastructure::Message_CHQ_Alive* temp = foobar_.chq_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHQ_Alive& Message::_internal_chq_alive() const {
  return _internal_has_chq_alive()
      ? *foobar_.chq_alive_
      : *reinterpret_cast< ::megastructure::Message_CHQ_Alive*>(&::megastructure::_Message_CHQ_Alive_default_instance_);
}
inline const ::megastructure::Message_CHQ_Alive& Message::chq_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chq_alive)
  return _internal_chq_alive();
}
inline ::megastructure::Message_CHQ_Alive* Message::unsafe_arena_release_chq_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chq_alive)
  if (_internal_has_chq_alive()) {
    clear_has_foobar();
    ::megastructure::Message_CHQ_Alive* temp = foobar_.chq_alive_;
    foobar_.chq_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chq_alive(::megastructure::Message_CHQ_Alive* chq_alive) {
  clear_foobar();
  if (chq_alive) {
    set_has_chq_alive();
    foobar_.chq_alive_ = chq_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chq_alive)
}
inline ::megastructure::Message_CHQ_Alive* Message::_internal_mutable_chq_alive() {
  if (!_internal_has_chq_alive()) {
    clear_foobar();
    set_has_chq_alive();
    foobar_.chq_alive_ = CreateMaybeMessage< ::megastructure::Message_CHQ_Alive >(GetArena());
  }
  return foobar_.chq_alive_;
}
inline ::megastructure::Message_CHQ_Alive* Message::mutable_chq_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chq_alive)
  return _internal_mutable_chq_alive();
}

// .megastructure.Message.HCS_Alive hcs_alive = 9;
inline bool Message::_internal_has_hcs_alive() const {
  return foobar_case() == kHcsAlive;
}
inline bool Message::has_hcs_alive() const {
  return _internal_has_hcs_alive();
}
inline void Message::set_has_hcs_alive() {
  _oneof_case_[0] = kHcsAlive;
}
inline void Message::clear_hcs_alive() {
  if (_internal_has_hcs_alive()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcs_alive_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCS_Alive* Message::release_hcs_alive() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcs_alive)
  if (_internal_has_hcs_alive()) {
    clear_has_foobar();
      ::megastructure::Message_HCS_Alive* temp = foobar_.hcs_alive_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcs_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCS_Alive& Message::_internal_hcs_alive() const {
  return _internal_has_hcs_alive()
      ? *foobar_.hcs_alive_
      : *reinterpret_cast< ::megastructure::Message_HCS_Alive*>(&::megastructure::_Message_HCS_Alive_default_instance_);
}
inline const ::megastructure::Message_HCS_Alive& Message::hcs_alive() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcs_alive)
  return _internal_hcs_alive();
}
inline ::megastructure::Message_HCS_Alive* Message::unsafe_arena_release_hcs_alive() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcs_alive)
  if (_internal_has_hcs_alive()) {
    clear_has_foobar();
    ::megastructure::Message_HCS_Alive* temp = foobar_.hcs_alive_;
    foobar_.hcs_alive_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcs_alive(::megastructure::Message_HCS_Alive* hcs_alive) {
  clear_foobar();
  if (hcs_alive) {
    set_has_hcs_alive();
    foobar_.hcs_alive_ = hcs_alive;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcs_alive)
}
inline ::megastructure::Message_HCS_Alive* Message::_internal_mutable_hcs_alive() {
  if (!_internal_has_hcs_alive()) {
    clear_foobar();
    set_has_hcs_alive();
    foobar_.hcs_alive_ = CreateMaybeMessage< ::megastructure::Message_HCS_Alive >(GetArena());
  }
  return foobar_.hcs_alive_;
}
inline ::megastructure::Message_HCS_Alive* Message::mutable_hcs_alive() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcs_alive)
  return _internal_mutable_hcs_alive();
}

// .megastructure.Message.MSQ_Load msq_load = 12;
inline bool Message::_internal_has_msq_load() const {
  return foobar_case() == kMsqLoad;
}
inline bool Message::has_msq_load() const {
  return _internal_has_msq_load();
}
inline void Message::set_has_msq_load() {
  _oneof_case_[0] = kMsqLoad;
}
inline void Message::clear_msq_load() {
  if (_internal_has_msq_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.msq_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_MSQ_Load* Message::release_msq_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.msq_load)
  if (_internal_has_msq_load()) {
    clear_has_foobar();
      ::megastructure::Message_MSQ_Load* temp = foobar_.msq_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.msq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_MSQ_Load& Message::_internal_msq_load() const {
  return _internal_has_msq_load()
      ? *foobar_.msq_load_
      : *reinterpret_cast< ::megastructure::Message_MSQ_Load*>(&::megastructure::_Message_MSQ_Load_default_instance_);
}
inline const ::megastructure::Message_MSQ_Load& Message::msq_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.msq_load)
  return _internal_msq_load();
}
inline ::megastructure::Message_MSQ_Load* Message::unsafe_arena_release_msq_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.msq_load)
  if (_internal_has_msq_load()) {
    clear_has_foobar();
    ::megastructure::Message_MSQ_Load* temp = foobar_.msq_load_;
    foobar_.msq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_msq_load(::megastructure::Message_MSQ_Load* msq_load) {
  clear_foobar();
  if (msq_load) {
    set_has_msq_load();
    foobar_.msq_load_ = msq_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.msq_load)
}
inline ::megastructure::Message_MSQ_Load* Message::_internal_mutable_msq_load() {
  if (!_internal_has_msq_load()) {
    clear_foobar();
    set_has_msq_load();
    foobar_.msq_load_ = CreateMaybeMessage< ::megastructure::Message_MSQ_Load >(GetArena());
  }
  return foobar_.msq_load_;
}
inline ::megastructure::Message_MSQ_Load* Message::mutable_msq_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.msq_load)
  return _internal_mutable_msq_load();
}

// .megastructure.Message.SMS_Load sms_load = 13;
inline bool Message::_internal_has_sms_load() const {
  return foobar_case() == kSmsLoad;
}
inline bool Message::has_sms_load() const {
  return _internal_has_sms_load();
}
inline void Message::set_has_sms_load() {
  _oneof_case_[0] = kSmsLoad;
}
inline void Message::clear_sms_load() {
  if (_internal_has_sms_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.sms_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_SMS_Load* Message::release_sms_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.sms_load)
  if (_internal_has_sms_load()) {
    clear_has_foobar();
      ::megastructure::Message_SMS_Load* temp = foobar_.sms_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.sms_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_SMS_Load& Message::_internal_sms_load() const {
  return _internal_has_sms_load()
      ? *foobar_.sms_load_
      : *reinterpret_cast< ::megastructure::Message_SMS_Load*>(&::megastructure::_Message_SMS_Load_default_instance_);
}
inline const ::megastructure::Message_SMS_Load& Message::sms_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.sms_load)
  return _internal_sms_load();
}
inline ::megastructure::Message_SMS_Load* Message::unsafe_arena_release_sms_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.sms_load)
  if (_internal_has_sms_load()) {
    clear_has_foobar();
    ::megastructure::Message_SMS_Load* temp = foobar_.sms_load_;
    foobar_.sms_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_sms_load(::megastructure::Message_SMS_Load* sms_load) {
  clear_foobar();
  if (sms_load) {
    set_has_sms_load();
    foobar_.sms_load_ = sms_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.sms_load)
}
inline ::megastructure::Message_SMS_Load* Message::_internal_mutable_sms_load() {
  if (!_internal_has_sms_load()) {
    clear_foobar();
    set_has_sms_load();
    foobar_.sms_load_ = CreateMaybeMessage< ::megastructure::Message_SMS_Load >(GetArena());
  }
  return foobar_.sms_load_;
}
inline ::megastructure::Message_SMS_Load* Message::mutable_sms_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.sms_load)
  return _internal_mutable_sms_load();
}

// .megastructure.Message.HCQ_Load hcq_load = 14;
inline bool Message::_internal_has_hcq_load() const {
  return foobar_case() == kHcqLoad;
}
inline bool Message::has_hcq_load() const {
  return _internal_has_hcq_load();
}
inline void Message::set_has_hcq_load() {
  _oneof_case_[0] = kHcqLoad;
}
inline void Message::clear_hcq_load() {
  if (_internal_has_hcq_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.hcq_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_HCQ_Load* Message::release_hcq_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.hcq_load)
  if (_internal_has_hcq_load()) {
    clear_has_foobar();
      ::megastructure::Message_HCQ_Load* temp = foobar_.hcq_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.hcq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_HCQ_Load& Message::_internal_hcq_load() const {
  return _internal_has_hcq_load()
      ? *foobar_.hcq_load_
      : *reinterpret_cast< ::megastructure::Message_HCQ_Load*>(&::megastructure::_Message_HCQ_Load_default_instance_);
}
inline const ::megastructure::Message_HCQ_Load& Message::hcq_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.hcq_load)
  return _internal_hcq_load();
}
inline ::megastructure::Message_HCQ_Load* Message::unsafe_arena_release_hcq_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.hcq_load)
  if (_internal_has_hcq_load()) {
    clear_has_foobar();
    ::megastructure::Message_HCQ_Load* temp = foobar_.hcq_load_;
    foobar_.hcq_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_hcq_load(::megastructure::Message_HCQ_Load* hcq_load) {
  clear_foobar();
  if (hcq_load) {
    set_has_hcq_load();
    foobar_.hcq_load_ = hcq_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.hcq_load)
}
inline ::megastructure::Message_HCQ_Load* Message::_internal_mutable_hcq_load() {
  if (!_internal_has_hcq_load()) {
    clear_foobar();
    set_has_hcq_load();
    foobar_.hcq_load_ = CreateMaybeMessage< ::megastructure::Message_HCQ_Load >(GetArena());
  }
  return foobar_.hcq_load_;
}
inline ::megastructure::Message_HCQ_Load* Message::mutable_hcq_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.hcq_load)
  return _internal_mutable_hcq_load();
}

// .megastructure.Message.CHS_Load chs_load = 15;
inline bool Message::_internal_has_chs_load() const {
  return foobar_case() == kChsLoad;
}
inline bool Message::has_chs_load() const {
  return _internal_has_chs_load();
}
inline void Message::set_has_chs_load() {
  _oneof_case_[0] = kChsLoad;
}
inline void Message::clear_chs_load() {
  if (_internal_has_chs_load()) {
    if (GetArena() == nullptr) {
      delete foobar_.chs_load_;
    }
    clear_has_foobar();
  }
}
inline ::megastructure::Message_CHS_Load* Message::release_chs_load() {
  // @@protoc_insertion_point(field_release:megastructure.Message.chs_load)
  if (_internal_has_chs_load()) {
    clear_has_foobar();
      ::megastructure::Message_CHS_Load* temp = foobar_.chs_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    foobar_.chs_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::megastructure::Message_CHS_Load& Message::_internal_chs_load() const {
  return _internal_has_chs_load()
      ? *foobar_.chs_load_
      : *reinterpret_cast< ::megastructure::Message_CHS_Load*>(&::megastructure::_Message_CHS_Load_default_instance_);
}
inline const ::megastructure::Message_CHS_Load& Message::chs_load() const {
  // @@protoc_insertion_point(field_get:megastructure.Message.chs_load)
  return _internal_chs_load();
}
inline ::megastructure::Message_CHS_Load* Message::unsafe_arena_release_chs_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:megastructure.Message.chs_load)
  if (_internal_has_chs_load()) {
    clear_has_foobar();
    ::megastructure::Message_CHS_Load* temp = foobar_.chs_load_;
    foobar_.chs_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chs_load(::megastructure::Message_CHS_Load* chs_load) {
  clear_foobar();
  if (chs_load) {
    set_has_chs_load();
    foobar_.chs_load_ = chs_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:megastructure.Message.chs_load)
}
inline ::megastructure::Message_CHS_Load* Message::_internal_mutable_chs_load() {
  if (!_internal_has_chs_load()) {
    clear_foobar();
    set_has_chs_load();
    foobar_.chs_load_ = CreateMaybeMessage< ::megastructure::Message_CHS_Load >(GetArena());
  }
  return foobar_.chs_load_;
}
inline ::megastructure::Message_CHS_Load* Message::mutable_chs_load() {
  // @@protoc_insertion_point(field_mutable:megastructure.Message.chs_load)
  return _internal_mutable_chs_load();
}

inline bool Message::has_foobar() const {
  return foobar_case() != FOOBAR_NOT_SET;
}
inline void Message::clear_has_foobar() {
  _oneof_case_[0] = FOOBAR_NOT_SET;
}
inline Message::FoobarCase Message::foobar_case() const {
  return Message::FoobarCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace megastructure

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_megastructure_2eproto
